#!/bin/bash
# Generate commit message using Claude API and commit staged changes

# Configuration
# Available models:
# - claude-3-haiku-20240307 (fastest, most cost-effective)
# - claude-3-5-sonnet-20241022 (balanced performance)
# - claude-3-opus-20240229 (most capable)
# - claude-3-5-haiku-20241022 (latest haiku)
CLAUDE_MODEL="claude-3-haiku-20240307"
MAX_TOKENS=1024
API_VERSION="2023-06-01"
COMMIT_HISTORY_COUNT=10
MAX_SUMMARY_LENGTH=72

# Check if ANTHROPIC_API_KEY is set
if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "ANTHROPIC_API_KEY is not set. Please set it to your Anthropic API key."
    exit 1
fi

# Check for staged changes
if [ -z "$(git diff --staged)" ]; then
    echo "Error: No staged changes found. Please stage your changes first."
    exit 1
fi

# Get staged diff
git_diff=$(git diff --staged)

# Get current branch
current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

# Get last commit messages from current branch
commit_messages=$(git log -n $COMMIT_HISTORY_COUNT --format='%s%n%b' HEAD 2>/dev/null)

# Build the prompt
prompt="You are an expert at following the Conventional Commit specification. Given the git diff listed below, generate a succinct commit message.
- The summary line MUST NOT exceed $MAX_SUMMARY_LENGTH characters.
- In most cases, the summary alone is sufficient; ONLY add a body if the change is complex or non-obvious.
- If you do add a body, it should be concise and use bullet points.
- Wrap variable names or code elements in backticks.
- Consider changed file paths for scope.
- Omit explanations and return only the commit message text."

# Add previous commits if available
if [ -n "$commit_messages" ] && [[ ! "$commit_messages" =~ fatal ]]; then
    prompt="$prompt

Previous commits in this feature branch (most recent first):
\`\`\`
$commit_messages
\`\`\`
Ensure consistency with these commits. Adhere to the $MAX_SUMMARY_LENGTH-character summary rule."
fi

# Add staged changes
prompt="$prompt

Changes to commit:
\`\`\`
$git_diff
\`\`\`"

# Check for issue ID in branch name
issue_id=$(echo "$current_branch" | grep -oE '^bcd-([0-9]{4})' | sed 's/bcd-//')
if [ -n "$issue_id" ]; then
    prompt="$prompt

Please prefix the summary line with the following issue ID: BCD-$issue_id

Example: BCD-$issue_id feat: some new feature"
fi

# Prepare the JSON payload
json_payload=$(jq -n \
    --arg prompt "$prompt" \
    --arg model "$CLAUDE_MODEL" \
    --arg max_tokens "$MAX_TOKENS" \
    '{
        model: $model,
        max_tokens: ($max_tokens | tonumber),
        messages: [
            {
                role: "user",
                content: $prompt
            }
        ]
    }')

# Call Claude API
response=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: $API_VERSION" \
    -H "content-type: application/json" \
    -d "$json_payload")

# Extract the commit message from the response
commit_message=$(echo "$response" | jq -r '.content[0].text' 2>/dev/null | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Check if we got a valid response
if [ -z "$commit_message" ] || [ "$commit_message" = "null" ]; then
    echo "Error: Failed to generate commit message"
    echo "Response: $response"
    exit 1
fi

# Display the generated message
echo "Generated commit message:"
echo "----------------------------------------"
echo "$commit_message"
echo "----------------------------------------"
echo ""
echo "Options: [y]es to commit, [e]dit message, [n]o to cancel"
read -p "Your choice: " -n 1 -r choice
echo ""

case "$choice" in
    y | Y)
        git commit -m "$commit_message"
        ;;
    e | E)
        # Create temp file with commit message
        TEMP_FILE=$(mktemp)
        echo "$commit_message" >"$TEMP_FILE"

        # Open in nvim for editing
        nvim "$TEMP_FILE"

        # Check if file still exists and has content
        if [ -s "$TEMP_FILE" ]; then
            edited_message=$(cat "$TEMP_FILE")
            rm -f "$TEMP_FILE"

            echo ""
            echo "Committing with edited message..."
            git commit -m "$edited_message"
        else
            rm -f "$TEMP_FILE"
            echo "Commit cancelled (empty message)."
            exit 1
        fi
        ;;
    n | N | *)
        echo "Commit cancelled."
        exit 1
        ;;
esac
