#!/usr/bin/env bash
# claude-monitor - Monitor and jump to Claude Code instances across tmux sessions

set -euo pipefail

# Find all Claude CLI processes (exclude desktop app helper processes)
get_claude_processes() {
    ps aux | grep -E '\sclaude\s*$' | grep -v grep || true
}

# Get working directory for a PID
get_cwd() {
    local pid=$1
    lsof -p "$pid" 2>/dev/null | grep cwd | awk '{print $NF}' | head -1
}

# Map TTY to tmux target (session:window.pane)
get_tmux_target() {
    local tty=$1
    tmux list-panes -a -F "#{pane_tty} #{session_name}:#{window_index}.#{pane_index}" 2>/dev/null | grep "^$tty" | awk '{print $2}' | head -1 || true
}

# Shorten path for display
shorten_path() {
    local path=$1
    echo "$path" | sed "s|^$HOME|~|"
}

# Get the most recent conversation message for a project
get_conversation_title() {
    local project_path=$1
    local title=$(grep -F "\"$project_path\"" ~/.claude/history.jsonl 2>/dev/null | tail -1 | jq -r '.display // ""' 2>/dev/null)

    if [[ -n "$title" && "$title" != "null" ]]; then
        # Remove newlines and replace with space
        title=$(echo "$title" | tr '\n' ' ' | tr -s ' ')

        # Truncate to 100 chars and add ellipsis if needed
        if [[ ${#title} -gt 100 ]]; then
            echo "${title:0:97}..."
        else
            echo "$title"
        fi
    else
        echo ""
    fi
}

# Get activity indicator based on CPU usage
# 游리 Yellow = Busy/Active (high CPU, currently processing)
# 游릭 Green = Ready/Idle (low CPU, waiting for input)
get_activity_indicator() {
    local cpu=$1
    # Remove % sign if present and compare as float
    cpu_value=$(echo "$cpu" | sed 's/%//')
    if (( $(echo "$cpu_value > 1.0" | bc -l 2>/dev/null || echo 0) )); then
        echo "游리"  # Yellow = busy/processing
    else
        echo "游릭"  # Green = ready/idle
    fi
}

main() {
    # Check if we have required tools
    if ! command -v fzf &> /dev/null; then
        echo "Error: fzf is required but not installed"
        exit 1
    fi

    # Get all claude processes
    claude_procs=$(get_claude_processes)

    if [[ -z "$claude_procs" ]]; then
        echo "No Claude Code instances running"
        exit 0
    fi

    # Build list for fzf
    declare -a entries
    declare -A target_map

    while IFS= read -r line; do
        pid=$(echo "$line" | awk '{print $2}')
        cpu=$(echo "$line" | awk '{print $3}')
        tty=$(echo "$line" | awk '{print $7}')

        # Convert TTY format: s034 -> /dev/ttys034
        full_tty="/dev/tty${tty}"

        # Get working directory
        cwd=$(get_cwd "$pid")
        [[ -z "$cwd" ]] && continue

        # Get tmux target (session:window.pane)
        target=$(get_tmux_target "$full_tty")
        [[ -z "$target" ]] && continue

        # Extract session name for display
        session=$(echo "$target" | cut -d: -f1)

        # Get activity indicator
        indicator=$(get_activity_indicator "$cpu")

        # Get conversation title
        title=$(get_conversation_title "$cwd")

        # Format: indicator session cwd [title]
        short_cwd=$(shorten_path "$cwd")
        if [[ -n "$title" ]]; then
            entry="$indicator  $(printf '%-35s' "$session")  $(printf '%-50s' "$short_cwd")  $title"
        else
            entry="$indicator  $(printf '%-35s' "$session")  $short_cwd"
        fi
        entries+=("$entry")
        target_map["$entry"]="$target"
    done <<< "$claude_procs"

    if [[ ${#entries[@]} -eq 0 ]]; then
        echo "No Claude Code instances found in tmux sessions"
        exit 0
    fi

    # Use fzf to select
    selected=$(printf '%s\n' "${entries[@]}" | fzf --ansi --header="Select Claude Code instance" --height=40% --reverse --border)

    if [[ -n "$selected" ]]; then
        target="${target_map[$selected]}"

        # Check if we're inside tmux
        if [[ -n "${TMUX:-}" ]]; then
            tmux switch-client -t "$target"
        else
            tmux attach -t "$target"
        fi
    fi
}

main "$@"
