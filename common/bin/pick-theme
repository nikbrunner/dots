#!/bin/bash

# pick-theme - Unified theme selector for all development tools
# Uses fzf to select from Black Atom themes and updates configurations

set -euo pipefail

# Configuration
DOTS_DIR="$HOME/repos/nikbrunner/dots"
THEMES_JSON="$DOTS_DIR/common/themes.json"

# Tool configurations
NVIM_CONFIG="$DOTS_DIR/common/.config/nvim/lua/config.lua"
TMUX_CONFIG="$DOTS_DIR/common/.config/tmux/tmux.conf"
GHOSTTY_CONFIG="$DOTS_DIR/common/.config/ghostty/config"
GIT_CONFIG="$DOTS_DIR/common/.gitconfig"

# Get current theme from nvim config
get_current_theme() {
    local current_mode
    current_mode=$(get_current_mode)
    
    if [[ "$current_mode" == "dark" ]]; then
        grep "colorscheme_dark" "$NVIM_CONFIG" | sed 's/.*= *"//' | sed 's/".*//'
    else
        grep "colorscheme_light" "$NVIM_CONFIG" | sed 's/.*= *"//' | sed 's/".*//'
    fi
}

# Get current background mode from nvim config
get_current_mode() {
    grep "background" "$NVIM_CONFIG" | sed 's/.*= *"//' | sed 's/".*//'
}

# Get theme metadata (appearance and collection)
get_theme_metadata() {
    local theme="$1"
    jq -r ".themes.\"$theme\" | [.appearance, .collection] | @tsv" "$THEMES_JSON"
}

# Update Neovim configuration
update_nvim_theme() {
    local theme="$1"
    local appearance="$2"
    
    # Update the colorscheme for the matching appearance
    if [[ "$appearance" == "dark" ]]; then
        sed -i '' "s/colorscheme_dark = .*/colorscheme_dark = \"$theme\",/" "$NVIM_CONFIG"
    else
        sed -i '' "s/colorscheme_light = .*/colorscheme_light = \"$theme\",/" "$NVIM_CONFIG"
    fi
    
    # Update background mode
    sed -i '' "s/background = .*/background = \"$appearance\",/" "$NVIM_CONFIG"
}

# Update tmux configuration
update_tmux_theme() {
    local theme="$1"
    local collection="$2"
    
    local theme_path="~/repos/black-atom-industries/tmux/themes/$collection/${theme}.conf"
    
    # Replace any existing theme source line with new theme
    sed -i '' "s|source-file .*/black-atom-industries/tmux/themes/.*/.*\.conf|source-file $theme_path|" "$TMUX_CONFIG"
}

# Get current ghostty theme configuration
get_current_ghostty_themes() {
    grep "^theme = " "$GHOSTTY_CONFIG" | head -1 | sed 's/theme = //'
}

# Update Ghostty configuration
update_ghostty_theme() {
    local theme="$1"
    local appearance="$2"
    
    local current_config dark_theme light_theme
    current_config=$(get_current_ghostty_themes)
    
    # Parse current themes (handle both single and paired formats)
    if [[ "$current_config" == *","* ]]; then
        dark_theme=${current_config#*dark:}
        dark_theme=${dark_theme%%,*}
        dark_theme=${dark_theme%.conf}
        light_theme=${current_config#*light:}
        light_theme=${light_theme%.conf}
    else
        # Single theme - use current as fallback for the other mode
        local clean_current
        clean_current=${current_config%.conf}
        [[ "$appearance" == "dark" ]] && light_theme="$clean_current" || dark_theme="$clean_current"
    fi
    
    # Update the appropriate theme
    [[ "$appearance" == "dark" ]] && dark_theme="$theme" || light_theme="$theme"
    
    # Apply the configuration
    sed -i '' "s/^theme = .*/theme = dark:${dark_theme}.conf,light:${light_theme}.conf/" "$GHOSTTY_CONFIG"
}

# Update Git delta configuration
update_delta_theme() {
    local appearance="$1"
    
    if [[ "$appearance" == "dark" ]]; then
        sed -i '' 's/^  light = true/  ; light = true/' "$GIT_CONFIG"
        sed -i '' 's/^  ; dark = true/  dark = true/' "$GIT_CONFIG"
    else
        sed -i '' 's/^  dark = true/  ; dark = true/' "$GIT_CONFIG"
        sed -i '' 's/^  ; light = true/  light = true/' "$GIT_CONFIG"
    fi
}


# Reload tmux configuration if tmux is running
reload_tmux() {
    if command -v tmux >/dev/null 2>&1 && tmux list-sessions >/dev/null 2>&1; then
        tmux source-file "$TMUX_CONFIG" 2>/dev/null && echo "tmux configuration reloaded"
    fi
}

# Apply theme to all tools
apply_theme() {
    local theme="$1"
    
    # Get and validate theme metadata
    local metadata appearance collection
    metadata=$(get_theme_metadata "$theme")
    
    if [[ -z "$metadata" || "$metadata" == *"null"* ]]; then
        echo "Error: Theme '$theme' not found"
        return 1
    fi
    
    read -r appearance collection <<< "$metadata"
    
    echo "Applying theme: $theme ($appearance mode)"
    
    # Apply theme to all tools
    update_nvim_theme "$theme" "$appearance"
    update_tmux_theme "$theme" "$collection"
    update_ghostty_theme "$theme" "$appearance"
    update_delta_theme "$appearance"
    
    # Reload tmux if running
    reload_tmux
    
    echo "Theme applied successfully!"
    echo "Neovim: Updated $appearance theme to $theme"
    echo "New Ghostty windows will use updated theme"
}

# Validate dependencies and configuration files
validate_environment() {
    local errors=()
    
    # Check required commands
    local required_cmds=("jq" "fzf")
    for cmd in "${required_cmds[@]}"; do
        command -v "$cmd" >/dev/null 2>&1 || errors+=("$cmd is required but not installed")
    done
    
    # Check configuration files
    [[ -f "$THEMES_JSON" ]] || errors+=("Themes registry not found: $THEMES_JSON")
    [[ -f "$NVIM_CONFIG" ]] || errors+=("Neovim config not found: $NVIM_CONFIG")
    [[ -f "$TMUX_CONFIG" ]] || errors+=("tmux config not found: $TMUX_CONFIG")
    [[ -f "$GHOSTTY_CONFIG" ]] || errors+=("Ghostty config not found: $GHOSTTY_CONFIG")
    [[ -f "$GIT_CONFIG" ]] || errors+=("Git config not found: $GIT_CONFIG")
    
    if [[ ${#errors[@]} -gt 0 ]]; then
        echo "Environment errors:"
        printf "  - %s\n" "${errors[@]}"
        return 1
    fi
}

main() {
    # Validate environment
    validate_environment || exit 1
    
    # Get current state
    local current_theme current_mode
    current_theme=$(get_current_theme)
    current_mode=$(get_current_mode)
    
    # Get available themes with display names
    local themes_display
    themes_display=$(jq -r '.themes | to_entries[] | "\(.key):\(.value.display_name)"' "$THEMES_JSON")
    
    if [[ -z "$themes_display" ]]; then
        echo "No themes found in $THEMES_JSON"
        exit 1
    fi
    
    # Show current state
    echo "Current theme: $current_theme ($current_mode mode)"
    echo
    
    # Interactive selection with fzf
    local selected_line selected_theme
    selected_line=$(echo "$themes_display" | fzf \
        --border-label="┃ pick-theme ┃" \
        --prompt="Select theme: " \
        --header="Current: $current_theme | Mode: $current_mode" \
        --with-nth=2 \
        --delimiter=":")
    
    if [[ -n "$selected_line" ]]; then
        selected_theme=$(echo "$selected_line" | cut -d: -f1)
        
        if [[ "$selected_theme" == "$current_theme" ]]; then
            echo "Theme unchanged: $selected_theme"
        else
            apply_theme "$selected_theme"
        fi
    else
        echo "No theme selected"
    fi
}

main "$@"