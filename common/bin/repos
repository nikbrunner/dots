#!/usr/bin/env bash

# Configuration
REPOS_BASE_PATH="${REPOS_BASE_PATH:-$HOME/repos}"

# List of repositories to ensure are cloned
ENSURE_CLONED=(
    # Add repositories here, examples:
    # "git@github.com:username/repo.git"
    # "https://github.com/username/repo.git"
    # "git@github.com:organization/*"  # Clone all repos from organization
    "git@github.com:nikbrunner/dots"
    "git@github.com:nikbrunner/notes"
    "git@github.com:nikbrunner/dcd-notes"
    "git@github.com:black-atom-industries/*"
)

# Default parallel clone jobs
DEFAULT_PARALLEL_JOBS=4

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Helper functions
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Check if gum is available (only used for confirmations)
has_gum() {
    command -v gum &>/dev/null
}

# Dependency check
check_dependencies() {
    local missing_deps=()

    for cmd in git fzf tmux; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_deps+=("$cmd")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo "Please install the missing dependencies and try again."
        exit 1
    fi

    # Check if REPOS_BASE_PATH exists
    if [[ ! -d "$REPOS_BASE_PATH" ]]; then
        print_warning "Repository base path does not exist: $REPOS_BASE_PATH"
        echo -n "Create it? (y/N) "
        read -r create_dir
        if [[ "$create_dir" == "y" || "$create_dir" == "Y" ]]; then
            if ! mkdir -p "$REPOS_BASE_PATH"; then
                print_error "Failed to create directory: $REPOS_BASE_PATH"
                exit 1
            fi
            print_success "Created directory: $REPOS_BASE_PATH"
        else
            exit 1
        fi
    fi
}

# Confirm action with gum or fallback
confirm_action() {
    local prompt="$1"

    if has_gum; then
        gum confirm "$prompt"
    else
        echo -n "$prompt (y/N) "
        read -r confirm
        [[ "$confirm" == "y" || "$confirm" == "Y" ]]
    fi
}

# Select repository with styled fzf
select_repo() {
    local prompt="$1"
    local repos
    repos=$(list_repos)

    if [[ -z "$repos" ]]; then
        print_error "No repositories found"
        return 1
    fi

    echo "$repos" | styled_fzf "$prompt"
}

# Get tmux session name from repo path
get_session_name() {
    echo "$1" | tr '/:.' '-'
}

# Set FZF config file path
styled_fzf() {
    local prompt="${1:-Select: }"
    local preview_cmd="${2:-}"
    local additional_args=("${@:3}")

    local fzf_args=(--border-label="┃ repos ┃" --prompt="$prompt")

    # Add preview if provided
    if [[ -n "$preview_cmd" ]]; then
        fzf_args+=(--preview "$preview_cmd" --preview-window=down:50%:wrap)
    fi

    # Add any additional arguments
    fzf_args+=("${additional_args[@]}")

    fzf "${fzf_args[@]}"
}

# Parse git URL to extract username and repo name
parse_git_url() {
    local url="$1"
    local username repo_name

    # Remove .git suffix if present
    url="${url%.git}"

    if [[ "$url" =~ ^git@.*:(.+)/(.+)$ ]]; then
        # SSH URL format: git@github.com:username/repo
        username="${BASH_REMATCH[1]}"
        repo_name="${BASH_REMATCH[2]}"
    elif [[ "$url" =~ ^https?://.*github\.com/(.+)/(.+)$ ]]; then
        # HTTPS URL format: https://github.com/username/repo
        username="${BASH_REMATCH[1]}"
        repo_name="${BASH_REMATCH[2]}"
    else
        print_error "Invalid Git URL format"
        return 1
    fi

    echo "$username/$repo_name"
}

# Clone a single repository
clone_single_repo() {
    local git_url="$1"
    local show_progress="${2:-true}"

    local repo_path
    repo_path=$(parse_git_url "$git_url") || return 1

    local clone_path="$REPOS_BASE_PATH/$repo_path"

    if [[ -d "$clone_path" ]]; then
        echo "Skipping $repo_path (already exists)"
        return 2 # Already exists
    fi

    # Create parent directory
    if ! mkdir -p "$(dirname "$clone_path")"; then
        print_error "Failed to create directory for $repo_path"
        return 1
    fi

    echo "Cloning $repo_path..."

    if [[ "$show_progress" == "true" ]]; then
        if git clone "$git_url" "$clone_path"; then
            print_success "Cloned $repo_path"
            return 0
        else
            print_error "Failed to clone $repo_path"
            return 1
        fi
    else
        if git clone "$git_url" "$clone_path" >/dev/null 2>&1; then
            print_success "Cloned $repo_path"
            return 0
        else
            print_error "Failed to clone $repo_path"
            return 1
        fi
    fi
}

# Add a repository
add_repo() {
    local git_url="$1"

    if [[ -z "$git_url" ]]; then
        print_error "Please provide a git URL"
        echo "Usage: repos add <git-url>"
        exit 1
    fi

    clone_single_repo "$git_url" true
}

# List all repositories
list_repos() {
    if [[ ! -d "$REPOS_BASE_PATH" ]]; then
        return
    fi

    find "$REPOS_BASE_PATH" -mindepth 2 -maxdepth 2 -type d 2>/dev/null |
        sed "s|$REPOS_BASE_PATH/||" |
        sort
}

# Remove a repository
remove_repo() {
    local selected
    selected=$(select_repo "Select repository to remove: ")

    if [[ -z "$selected" ]]; then
        echo "No repository selected"
        exit 0
    fi

    local repo_path="$REPOS_BASE_PATH/$selected"

    # Kill tmux session if it exists
    local session_name
    session_name=$(get_session_name "$selected")
    tmux kill-session -t "$session_name" 2>/dev/null &&
        print_warning "Killed tmux session: $session_name"

    # Confirm removal
    if confirm_action "Are you sure you want to remove $selected?"; then
        if rm -rf "$repo_path"; then
            print_success "Repository removed: $selected"
        else
            print_error "Failed to remove repository: $selected"
            exit 1
        fi
    else
        echo "Removal cancelled"
    fi
}

# Open a repository in tmux
open_repo() {
    local selected
    selected=$(select_repo "Select repository to open: ")

    if [[ -z "$selected" ]]; then
        echo "No repository selected"
        exit 0
    fi

    local repo_path="$REPOS_BASE_PATH/$selected"
    local session_name
    session_name=$(get_session_name "$selected")

    # Check if session already exists
    if tmux has-session -t "$session_name" 2>/dev/null; then
        if [[ -n "$TMUX" ]]; then
            tmux switch-client -t "$session_name"
        else
            tmux attach-session -t "$session_name"
        fi
    else
        # Create new session and run tl-dev layout if available
        if [[ -n "$TMUX" ]]; then
            tmux new-session -d -s "$session_name" -c "$repo_path"
            tmux switch-client -t "$session_name"
            # Run tl-dev layout if available
            if command -v tl-dev &>/dev/null; then
                tl-dev
            fi
        else
            tmux new-session -s "$session_name" -c "$repo_path" \; run-shell "tl-dev 2>/dev/null || true"
        fi
    fi
}

# Guide user through dependency installation
install_deps() {
    echo "repos - Dependency Installation Guide"
    echo "===================================="
    echo

    # Check current status
    local missing_required=()
    local missing_optional=()

    # Check required dependencies
    for cmd in git fzf tmux; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_required+=("$cmd")
        else
            print_success "$cmd is installed"
        fi
    done

    # Check optional dependencies
    if ! command -v gum &>/dev/null; then
        missing_optional+=("gum")
    else
        print_success "gum is installed (optional - enhanced UX for confirmations)"
    fi

    if ! command -v gh &>/dev/null; then
        missing_optional+=("gh")
    else
        print_success "gh is installed (optional - wildcard repo cloning)"
        # Check if authenticated
        if ! gh auth status &>/dev/null; then
            print_warning "GitHub CLI is not authenticated"
            echo "  Run: gh auth login"
        else
            print_success "GitHub CLI is authenticated"
        fi
    fi

    echo

    # Installation instructions for missing dependencies
    if [[ ${#missing_required[@]} -gt 0 ]]; then
        echo "Required dependencies to install:"
        for dep in "${missing_required[@]}"; do
            print_error "$dep is missing"
        done
        echo

        # OS-specific installation instructions
        case "$(uname)" in
        Darwin)
            echo "macOS installation (using Homebrew):"
            echo "  brew install git fzf tmux"
            ;;
        Linux)
            # Detect Linux distribution
            if command -v apt &>/dev/null; then
                echo "Ubuntu/Debian installation:"
                echo "  sudo apt update && sudo apt install git fzf tmux"
            elif command -v yum &>/dev/null; then
                echo "CentOS/RHEL installation:"
                echo "  sudo yum install git fzf tmux"
            elif command -v pacman &>/dev/null; then
                echo "Arch Linux installation:"
                echo "  sudo pacman -S git fzf tmux"
            else
                echo "Linux installation (check your package manager):"
                echo "  Install: git fzf tmux"
            fi
            ;;
        *)
            echo "Please install the missing dependencies using your system's package manager"
            ;;
        esac
        echo
    fi

    if [[ ${#missing_optional[@]} -gt 0 ]]; then
        echo "Optional dependencies for enhanced experience:"
        for dep in "${missing_optional[@]}"; do
            print_warning "$dep is not installed (optional)"
        done
        echo

        # Installation instructions for optional deps
        case "$(uname)" in
        Darwin)
            echo "macOS installation (using Homebrew):"
            [[ " ${missing_optional[*]} " =~ " gum " ]] && echo "  brew install gum"
            [[ " ${missing_optional[*]} " =~ " gh " ]] && echo "  brew install gh"
            ;;
        Linux)
            if command -v apt &>/dev/null; then
                echo "Ubuntu/Debian installation:"
                [[ " ${missing_optional[*]} " =~ " gum " ]] && echo "  # gum: https://github.com/charmbracelet/gum#installation"
                [[ " ${missing_optional[*]} " =~ " gh " ]] && echo "  sudo apt install gh"
            elif command -v pacman &>/dev/null; then
                echo "Arch Linux installation:"
                [[ " ${missing_optional[*]} " =~ " gum " ]] && echo "  sudo pacman -S gum"
                [[ " ${missing_optional[*]} " =~ " gh " ]] && echo "  sudo pacman -S github-cli"
            else
                echo "Linux installation:"
                [[ " ${missing_optional[*]} " =~ " gum " ]] && echo "  gum: https://github.com/charmbracelet/gum#installation"
                [[ " ${missing_optional[*]} " =~ " gh " ]] && echo "  gh: https://cli.github.com/"
            fi
            ;;
        *)
            [[ " ${missing_optional[*]} " =~ " gum " ]] && echo "  gum: https://github.com/charmbracelet/gum#installation"
            [[ " ${missing_optional[*]} " =~ " gh " ]] && echo "  gh: https://cli.github.com/"
            ;;
        esac
        echo
    fi

    # GitHub CLI authentication note
    if command -v gh &>/dev/null && ! gh auth status &>/dev/null; then
        echo "📋 GitHub CLI Authentication:"
        echo "  After installing gh, authenticate with:"
        echo "  gh auth login"
        echo
        echo "  This is required for wildcard repository cloning (e.g., 'org/*' patterns)"
        echo
    fi

    # Summary
    if [[ ${#missing_required[@]} -eq 0 ]]; then
        print_success "All required dependencies are installed!"
        if [[ ${#missing_optional[@]} -eq 0 ]]; then
            print_success "All optional dependencies are also installed!"
            echo "You're ready to use all repos features! 🎉"
        else
            echo "You can use repos now, with enhanced features available after installing optional dependencies."
        fi
    else
        echo "Install the required dependencies above, then run 'repos install' again to verify."
        exit 1
    fi
}

# Show git status for all repos, grouped by owner
status_repos() {
    local repos
    repos=$(list_repos)

    if [[ -z "$repos" ]]; then
        print_error "No repositories found"
        exit 1
    fi

    local clean_only=false
    if [[ "$1" == "--clean" ]]; then
        clean_only=true
    fi

    echo "Checking status of all repositories..."
    echo

    # Group repositories by owner using associative arrays
    declare -A owner_repos
    declare -A owner_dirty_repos
    declare -A owner_non_git_repos
    local total_repos=0
    local total_dirty_repos=0
    local total_non_git=0

    while IFS= read -r repo; do
        [[ -z "$repo" ]] && continue
        ((total_repos++))

        local owner="${repo%%/*}"
        local repo_path="$REPOS_BASE_PATH/$repo"

        # Check if it's a git repository
        if [[ ! -d "$repo_path/.git" ]]; then
            owner_non_git_repos["$owner"]+="$repo "
            ((total_non_git++))
            continue
        fi

        # Get git status
        local status_output
        status_output=$(cd "$repo_path" && git status --porcelain 2>/dev/null)

        if [[ -n "$status_output" ]]; then
            owner_dirty_repos["$owner"]+="$repo "
            ((total_dirty_repos++))
        else
            owner_repos["$owner"]+="$repo "
        fi
    done <<<"$repos"

    # Show results grouped by owner
    local has_any_issues=false

    for owner in $(printf '%s\n' "${!owner_dirty_repos[@]}" "${!owner_non_git_repos[@]}" | sort -u); do
        local dirty_repos="${owner_dirty_repos[$owner]}"
        local non_git_repos="${owner_non_git_repos[$owner]}"

        if [[ -n "$dirty_repos" || -n "$non_git_repos" ]]; then
            has_any_issues=true
            echo -e "${YELLOW}=== $owner ===${NC}"

            # Show non-git directories first
            if [[ -n "$non_git_repos" ]]; then
                for repo in $non_git_repos; do
                    print_warning "$repo is not a git repository"
                done
                echo
            fi

            # Show dirty repositories
            if [[ -n "$dirty_repos" ]]; then
                for repo in $dirty_repos; do
                    local repo_path="$REPOS_BASE_PATH/$repo"
                    echo -e "${YELLOW}$repo${NC}"
                    (cd "$repo_path" && git status --short)
                    echo
                done
            fi
        fi
    done

    # Show clean repositories if not --clean flag
    if [[ "$clean_only" == false ]]; then
        local has_clean=false
        for owner in $(printf '%s\n' "${!owner_repos[@]}" | sort); do
            local clean_repos="${owner_repos[$owner]}"
            if [[ -n "$clean_repos" ]]; then
                if [[ "$has_clean" == false ]]; then
                    echo -e "${GREEN}=== Clean Repositories ===${NC}"
                    has_clean=true
                fi
                echo -e "${GREEN}$owner:${NC} $(echo $clean_repos | wc -w | tr -d ' ') repositories"
            fi
        done
        [[ "$has_clean" == true ]] && echo
    fi

    # Summary
    echo -e "${YELLOW}=== Summary ===${NC}"
    echo "Total repositories: $total_repos"
    if [[ $total_dirty_repos -gt 0 ]]; then
        echo -e "${YELLOW}Repositories with changes: $total_dirty_repos${NC}"
    else
        print_success "All git repositories are clean"
    fi
    if [[ $total_non_git -gt 0 ]]; then
        print_warning "Non-git directories: $total_non_git"
        for owner in $(printf '%s\n' "${!owner_non_git_repos[@]}" | sort); do
            local non_git_repos_list="${owner_non_git_repos[$owner]}"
            for repo in $non_git_repos_list; do
                echo "  • $repo"
            done
        done
    fi

    # Suggest cleanup if there are dirty repos
    if [[ $total_dirty_repos -gt 0 ]]; then
        echo
        echo "💡 Run 'repos cleanup' to interactively clean up repositories"
    fi
}

# Find and open files across all repositories
find_files() {
    local repos
    repos=$(list_repos)

    if [[ -z "$repos" ]]; then
        print_error "No repositories found"
        exit 1
    fi

    # Check if EDITOR is set
    if [[ -z "$EDITOR" ]]; then
        print_warning "EDITOR environment variable not set, using 'vim' as default"
        local editor="vim"
    else
        local editor="$EDITOR"
    fi

    echo "Searching files across all repositories..."

    # Build list of all git-tracked files with repo prefix
    local temp_file
    temp_file=$(mktemp)

    while IFS= read -r repo; do
        [[ -z "$repo" ]] && continue

        local repo_path="$REPOS_BASE_PATH/$repo"

        # Check if it's a git repository
        if [[ ! -d "$repo_path/.git" ]]; then
            continue
        fi

        # Get all git-tracked files and prefix with repo name
        (cd "$repo_path" && git ls-files 2>/dev/null | sed "s|^|$repo/|") >>"$temp_file"
    done <<<"$repos"

    # Check if any files were found
    if [[ ! -s "$temp_file" ]]; then
        rm -f "$temp_file"
        print_error "No git-tracked files found in any repository"
        exit 1
    fi

    # Use styled fzf to select file with preview and syntax highlighting
    local preview_cmd
    if command -v bat &>/dev/null; then
        preview_cmd="bat --color=always --style=numbers --line-range=:50 $REPOS_BASE_PATH/{}"
    elif command -v highlight &>/dev/null; then
        preview_cmd="highlight -O ansi --force $REPOS_BASE_PATH/{} 2>/dev/null | head -50"
    else
        preview_cmd="head -50 $REPOS_BASE_PATH/{}"
    fi

    local selected_file
    selected_file=$(cat "$temp_file" | styled_fzf "Search files: " "$preview_cmd")

    rm -f "$temp_file"

    if [[ -z "$selected_file" ]]; then
        echo "No file selected"
        exit 0
    fi

    local full_path="$REPOS_BASE_PATH/$selected_file"

    if [[ ! -f "$full_path" ]]; then
        print_error "File not found: $full_path"
        exit 1
    fi

    echo "Opening $selected_file with $editor..."
    "$editor" "$full_path"
}

# Open the repos script for editing
config_repos() {
    # Check if EDITOR is set
    if [[ -z "$EDITOR" ]]; then
        print_warning "EDITOR environment variable not set, using 'vim' as default"
        local editor="vim"
    else
        local editor="$EDITOR"
    fi

    # Get the path to this script
    local script_path
    script_path=$(realpath "${BASH_SOURCE[0]}")

    echo "Opening repos configuration with $editor..."
    "$editor" "$script_path"
}

# Check if gh CLI is installed and authenticated
check_gh_cli() {
    if ! command -v gh &>/dev/null; then
        print_error "GitHub CLI (gh) is not installed"
        echo "Install it from: https://cli.github.com/"
        return 1
    fi

    if ! gh auth status &>/dev/null; then
        print_error "GitHub CLI is not authenticated"
        echo "Run: gh auth login"
        return 1
    fi

    return 0
}

# Get all repositories for an organization/user using GitHub CLI
get_github_repos() {
    local org_user="$1"

    # Check gh CLI before proceeding
    check_gh_cli || return 1

    # Use gh to list repos (it handles both users and orgs automatically)
    local repos

    if has_gum; then
        repos=$(gum spin --spinner dot --title "Fetching repositories for $org_user..." -- \
            gh repo list "$org_user" --limit 1000 --json name --jq '.[].name' 2>/dev/null)
    else
        echo "Fetching repositories for $org_user..."
        repos=$(gh repo list "$org_user" --limit 1000 --json name --jq '.[].name' 2>/dev/null)
    fi

    if [[ -z "$repos" ]]; then
        # Try as user if org failed
        repos=$(gh api "users/$org_user/repos?per_page=100" --jq '.[].name' 2>/dev/null)
    fi

    echo "$repos"
}

# Parallel clone helper function
parallel_clone() {
    local git_url="$1"
    local repo_path
    repo_path=$(parse_git_url "$git_url") || return 1

    local clone_path="$REPOS_BASE_PATH/$repo_path"

    if [[ -d "$clone_path" ]]; then
        echo "SKIP:$repo_path"
        return 0
    fi

    mkdir -p "$(dirname "$clone_path")" 2>/dev/null

    if git clone "$git_url" "$clone_path" >/dev/null 2>&1; then
        echo "OK:$repo_path"
        return 0
    else
        echo "FAIL:$repo_path"
        return 1
    fi
}

export -f parallel_clone parse_git_url print_success print_error
export REPOS_BASE_PATH

# Setup repositories from ENSURE_CLONED list
setup_repos() {
    local parallel_jobs="${PARALLEL_JOBS:-$DEFAULT_PARALLEL_JOBS}"

    if [[ ${#ENSURE_CLONED[@]} -eq 0 ]]; then
        print_error "No repositories defined in ENSURE_CLONED variable"
        echo "Edit this script and add repositories to the ENSURE_CLONED array"
        exit 1
    fi

    # Check if any wildcard patterns exist that would need gh CLI
    local has_wildcards=false
    for pattern in "${ENSURE_CLONED[@]}"; do
        if [[ "$pattern" == *"/*" ]]; then
            has_wildcards=true
            break
        fi
    done

    if [[ "$has_wildcards" == true ]]; then
        check_gh_cli || exit 1
    fi

    local clone_urls=()

    # First, expand all patterns to get actual URLs
    for repo_pattern in "${ENSURE_CLONED[@]}"; do
        # Skip comments and empty lines
        [[ "$repo_pattern" =~ ^[[:space:]]*# ]] && continue
        [[ -z "$repo_pattern" ]] && continue

        # Check if it's a wildcard pattern
        if [[ "$repo_pattern" == *"/*" ]]; then
            # Extract organization/user from wildcard pattern
            local base_url="${repo_pattern%/*}"
            local org_user

            if [[ "$base_url" =~ git@.*:(.+)$ ]]; then
                org_user="${BASH_REMATCH[1]}"
            elif [[ "$base_url" =~ https?://.*github\.com/(.+)$ ]]; then
                org_user="${BASH_REMATCH[1]}"
            else
                print_error "Invalid wildcard pattern: $repo_pattern"
                continue
            fi

            local repos
            if ! repos=$(get_github_repos "$org_user"); then
                continue
            fi

            if [[ -z "$repos" ]]; then
                print_error "No repositories found for $org_user"
                continue
            fi

            # Add each repository URL
            while IFS= read -r repo_name; do
                [[ -z "$repo_name" ]] && continue
                clone_urls+=("${base_url}/${repo_name}.git")
            done <<<"$repos"
        else
            # Single repository
            clone_urls+=("$repo_pattern")
        fi
    done

    if [[ ${#clone_urls[@]} -eq 0 ]]; then
        print_error "No repositories to clone"
        exit 1
    fi

    echo "Found ${#clone_urls[@]} repositories to process"
    echo "Using $parallel_jobs parallel jobs"
    echo

    # Use parallel cloning
    local results
    if has_gum; then
        results=$(gum spin --spinner dot --title "Cloning repositories..." -- \
            bash -c 'printf "%s\n" '"$(printf '"%s" ' "${clone_urls[@]}")"' | xargs -P '"$parallel_jobs"' -I {} bash -c "parallel_clone \"{}\""')
    else
        echo "Cloning repositories (this may take a while)..."
        results=$(printf '%s\n' "${clone_urls[@]}" |
            xargs -P "$parallel_jobs" -I {} bash -c 'parallel_clone "{}"')
    fi

    # Process results
    local cloned=0
    local skipped=0
    local failed=0

    while IFS= read -r result; do
        [[ -z "$result" ]] && continue

        case "$result" in
        OK:*)
            ((cloned++))
            print_success "Cloned ${result#OK:}"
            ;;
        SKIP:*)
            ((skipped++))
            echo "Skipped ${result#SKIP:} (already exists)"
            ;;
        FAIL:*)
            ((failed++))
            print_error "Failed ${result#FAIL:}"
            ;;
        esac
    done <<<"$results"

    local total=$((cloned + skipped + failed))

    echo
    print_success "Setup complete: $total repositories processed"
    echo "  Cloned: $cloned"
    echo "  Skipped: $skipped"
    echo "  Failed: $failed"
}

# Interactive cleanup workflow using lazygit for repositories with changes
cleanup_repos() {
    # Check if lazygit is available
    if ! command -v lazygit &>/dev/null; then
        print_error "lazygit is not installed"
        echo "Install it from: https://github.com/jesseduffield/lazygit"
        case "$(uname)" in
        Darwin)
            echo "  brew install lazygit"
            ;;
        Linux)
            if command -v pacman &>/dev/null; then
                echo "  sudo pacman -S lazygit"
            elif command -v apt &>/dev/null; then
                echo "  # Follow installation guide at https://github.com/jesseduffield/lazygit"
            fi
            ;;
        esac
        exit 1
    fi

    local repos
    repos=$(list_repos)

    if [[ -z "$repos" ]]; then
        print_error "No repositories found"
        exit 1
    fi

    echo "Building cleanup queue..."

    # Build queue of dirty repositories and non-git directories
    local dirty_repos=()
    local non_git_repos=()
    while IFS= read -r repo; do
        [[ -z "$repo" ]] && continue

        local repo_path="$REPOS_BASE_PATH/$repo"

        # Check if it's a git repository
        if [[ ! -d "$repo_path/.git" ]]; then
            non_git_repos+=("$repo")
            continue
        fi

        # Get git status
        local status_output
        status_output=$(cd "$repo_path" && git status --porcelain 2>/dev/null)

        if [[ -n "$status_output" ]]; then
            dirty_repos+=("$repo")
        fi
    done <<<"$repos"

    # Check if there's anything to clean up
    if [[ ${#dirty_repos[@]} -eq 0 && ${#non_git_repos[@]} -eq 0 ]]; then
        print_success "All repositories are clean! Nothing to cleanup."
        return 0
    fi

    local total_items=$((${#dirty_repos[@]} + ${#non_git_repos[@]}))
    echo "Found ${#dirty_repos[@]} repositories with changes"
    if [[ ${#non_git_repos[@]} -gt 0 ]]; then
        echo "Found ${#non_git_repos[@]} non-git directories"
    fi
    echo

    # Process non-git directories first
    local current=1
    for repo in "${non_git_repos[@]}"; do
        local repo_path="$REPOS_BASE_PATH/$repo"
        local repo_name="${repo#*/}"

        echo -e "${YELLOW}Non-git directory: $repo${NC}"

        local actions=(
            "Initialize as Git|Run git init and make initial commit"
            "Remove Directory|Delete the entire directory"
            "Skip|Leave as-is and continue"
        )

        local selected_action
        selected_action=$(printf '%s\n' "${actions[@]}" | cut -d'|' -f1 | styled_fzf "Action for $repo_name: ")

        case "$selected_action" in
        "Initialize as Git")
            if (cd "$repo_path" && git init && git add -A && git commit -m "Initial commit"); then
                print_success "$repo_name: initialized as git repository"
            else
                print_error "$repo_name: git initialization failed"
            fi
            ;;
        "Remove Directory")
            if confirm_action "Really delete $repo_name directory?"; then
                if rm -rf "$repo_path"; then
                    print_success "$repo_name: directory removed"
                else
                    print_error "$repo_name: removal failed"
                fi
            fi
            ;;
        "Skip")
            echo "Skipping $repo_name"
            ;;
        esac

        # Show progress and prompt to continue
        echo
        echo "Progress: $current/$total_items items processed"

        # If this is the last item, don't prompt
        if [[ $current -eq $total_items ]]; then
            break
        fi

        # Use gum confirm if available, otherwise fallback
        if has_gum; then
            if ! gum confirm "Continue to next item?"; then
                echo "Cleanup stopped"
                break
            fi
        else
            echo -n "Continue to next item? (y/N) "
            read -r continue_input
            if [[ "$continue_input" != "y" && "$continue_input" != "Y" ]]; then
                echo "Cleanup stopped"
                break
            fi
        fi

        ((current++))
        echo
    done

    # Process each dirty repository with lazygit
    for repo in "${dirty_repos[@]}"; do
        local repo_path="$REPOS_BASE_PATH/$repo"

        echo -e "${YELLOW}Opening lazygit for: $repo${NC}"

        # Change to repository directory and run lazygit
        (cd "$repo_path" && lazygit)

        # Show progress and prompt to continue
        echo
        echo "Progress: $current/$total_items items processed"

        # If this is the last item, don't prompt
        if [[ $current -eq $total_items ]]; then
            break
        fi

        # Use gum confirm if available, otherwise fallback
        if has_gum; then
            if ! gum confirm "Continue to next repository?"; then
                echo "Cleanup stopped"
                break
            fi
        else
            echo -n "Continue to next repository? (y/N) "
            read -r continue_input
            if [[ "$continue_input" != "y" && "$continue_input" != "Y" ]]; then
                echo "Cleanup stopped"
                break
            fi
        fi

        ((current++))
        echo
    done

    print_success "Cleanup completed!"
}

# Show help
show_help() {
    # Check which tools are installed for dynamic status
    local git_status="$(command -v git &>/dev/null && echo "✓" || echo "✗")"
    local fzf_status="$(command -v fzf &>/dev/null && echo "✓" || echo "✗")"
    local tmux_status="$(command -v tmux &>/dev/null && echo "✓" || echo "✗")"
    local gum_status="$(command -v gum &>/dev/null && echo "✓" || echo "◦")"
    local gh_status="$(command -v gh &>/dev/null && echo "✓" || echo "◦")"

    # Color functions using gum when available, fallback to ANSI
    style_header() {
        if command -v gum >/dev/null 2>&1; then
            gum style --foreground=4 --bold "$1"
        else
            echo -e "\033[1;34m$1\033[0m"
        fi
    }

    style_command() {
        if command -v gum >/dev/null 2>&1; then
            gum style --foreground=2 "$1"
        else
            echo -e "\033[32m$1\033[0m"
        fi
    }

    style_option() {
        if command -v gum >/dev/null 2>&1; then
            gum style --foreground=3 "$1"
        else
            echo -e "\033[33m$1\033[0m"
        fi
    }

    style_path() {
        if command -v gum >/dev/null 2>&1; then
            gum style --foreground=6 "$1"
        else
            echo -e "\033[36m$1\033[0m"
        fi
    }

    echo " ╭────────────────────────────────────────╮ "
    echo " │                                        │ "
    echo " │  repos - Minimal repository manager    │ "
    echo " │                                        │ "
    echo " ╰────────────────────────────────────────╯ "
    echo "                                            "
    echo ""

    style_header "Usage: repos <command> [options]"
    echo ""
    style_header "Commands:"
    echo "  $(style_command "install")      - Guide through dependency installation"
    echo "  $(style_command "add")          - Clone a repository to organized path"
    echo "  $(style_command "remove")       - Remove a repository (interactive)"
    echo "  $(style_command "open")         - Open a repository in tmux (interactive)"
    echo "  $(style_command "find")         - Find and open files across all repositories"
    echo "  $(style_command "config")       - Edit the repos script configuration"
    if command -v gum >/dev/null 2>&1; then
        echo "  $(style_command "status")       - Show git status for all repositories [$(gum style --foreground=3 -- "--clean")]"
    else
        echo "  $(style_command "status")       - Show git status for all repositories [\033[33m--clean\033[0m]"
    fi
    echo "  $(style_command "cleanup")      - Interactive cleanup workflow for dirty repositories"
    echo "  $(style_command "setup")        - Clone all repositories from ENSURE_CLONED list"
    echo "  $(style_command "help")         - Show this help message"
    echo ""
    style_header "Environment Variables:"
    echo "  $(style_option "REPOS_BASE_PATH")  - Override repository base path (default: ~/repos)"
    echo "  $(style_option "PARALLEL_JOBS")    - Number of parallel clone jobs (default: 4)"
    echo ""
    style_header "Current Configuration:"
    echo "  Repository base path: $(style_path "$REPOS_BASE_PATH")"
    echo ""
    style_header "Examples:"
    echo "  repos install                                    # Check dependencies"
    echo "  repos add git@github.com:username/repo.git       # Clone a repository"
    echo "  repos setup                                      # Clone all ENSURE_CLONED repos"
    echo "  repos status --clean                             # Show only dirty repositories"
    echo "  PARALLEL_JOBS=8 repos setup                     # Clone with 8 parallel jobs"
    echo ""
    style_header "Setup Wildcard Support:"
    echo "  Edit the ENSURE_CLONED variable in this script to include:"
    echo "  - Individual repos: \"git@github.com:username/repo.git\""
    echo "  - All repos from user/org: \"git@github.com:organization/*\""
    echo ""
    style_header "Requirements:"
    echo "  $git_status git, $fzf_status fzf, $tmux_status tmux (required)"
    echo "  $gum_status gum (optional, for enhanced confirmations)"
    echo "  $gh_status GitHub CLI (gh) for wildcard patterns"
    echo "    Install: https://cli.github.com/"
    echo "    Authenticate: gh auth login"
}

# Initialize - check dependencies
check_dependencies

# Main command handler
case "${1:-}" in
install)
    install_deps
    ;;
add)
    add_repo "$2"
    ;;
remove)
    remove_repo
    ;;
open)
    open_repo
    ;;
find)
    find_files
    ;;
config)
    config_repos
    ;;
status)
    status_repos "$2"
    ;;
cleanup)
    cleanup_repos
    ;;
setup)
    setup_repos
    ;;
help | --help | -h)
    show_help
    ;;
*)
    if [[ -n "$1" ]]; then
        print_error "Unknown command: $1"
    fi
    show_help
    exit 1
    ;;
esac
