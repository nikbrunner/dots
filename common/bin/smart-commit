#!/bin/bash
# Generate commit message using Claude API and commit staged changes

# TODO: Consider implementing dynamic model fetching with caching
# - Could fetch available models from API and cache in ~/.cache/claude-models.json
# - Refresh cache if older than a week
# - Would ensure up-to-date model list without extra requests

# Configuration
MODEL_OPTIONS=(
    "claude-opus-4-20250514 (most capable and intelligent)"
    "claude-sonnet-4-20250514 (exceptional reasoning)"
    "claude-3-7-sonnet-20250219 (high-performance with extended thinking)"
    "claude-3-opus-20240229 (powerful for complex tasks)"
    "claude-3-5-sonnet-20241022 (previous intelligent model)"
    "claude-3-5-haiku-20241022 (fastest model)"
    "claude-3-haiku-20240307 (fast and compact)"
)
MODEL="claude-3-5-haiku-20241022"
MAX_TOKENS=1024
API_VERSION="2023-06-01"
HISTORY_COUNT=10
SUMMARY_LENGTH=72

# Parse command line arguments
YES_FLAG=false
PUSH_FLAG=false
FORCE_FLAG=false

while [[ $# -gt 0 ]]; do
    case $1 in
    -y | --yes)
        YES_FLAG=true
        shift
        ;;
    -p | --push)
        PUSH_FLAG=true
        shift
        ;;
    -f | --force)
        FORCE_FLAG=true
        shift
        ;;
    -yp | -py)
        YES_FLAG=true
        PUSH_FLAG=true
        shift
        ;;
    -yf | -fy)
        YES_FLAG=true
        FORCE_FLAG=true
        shift
        ;;
    -pf | -fp)
        PUSH_FLAG=true
        FORCE_FLAG=true
        shift
        ;;
    -ypf | -yfp | -pyf | -pfy | -fyp | -fpy)
        YES_FLAG=true
        PUSH_FLAG=true
        FORCE_FLAG=true
        shift
        ;;
    *)
        echo "Unknown option: $1"
        echo "Usage: $0 [-y|--yes] [-p|--push] [-f|--force]"
        exit 1
        ;;
    esac
done

# Check if ANTHROPIC_API_KEY is set
if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "ANTHROPIC_API_KEY is not set. Please set it to your Anthropic API key."
    exit 1
fi

# Check for staged changes
if [ -z "$(git diff --staged)" ]; then
    echo "No staged changes found."
    echo ""
    if gum confirm "Open lazygit to stage changes?"; then
        lazygit

        # Check again after lazygit exits
        if [ -z "$(git diff --staged)" ]; then
            echo ""
            echo "Still no staged changes. Exiting."
            exit 1
        fi
        # If we have staged changes now, continue with the script
        echo ""
        gum format -t emoji <<EOF
:white_check_mark: Staged changes detected!
EOF
    else
        echo "Please stage your changes first."
        exit 1
    fi
fi

# Function to generate commit message
generate_commit_message() {
    local selected_model=${1:-$MODEL}
    current_model="$selected_model"

    # Get staged diff
    local git_diff=$(git diff --staged)

    # Get current branch
    local current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

    # Get last commit messages from current branch
    local commit_messages=$(git log -n $HISTORY_COUNT --format='%s%n%b' HEAD 2>/dev/null)

    # Build the prompt
    local prompt="You are an expert at following the Conventional Commit specification. Given the git diff listed below, generate a succinct commit message.
- The summary line MUST NOT exceed $SUMMARY_LENGTH characters.
- In most cases, the summary alone is sufficient; ONLY add a body if the change is complex or non-obvious.
- If you do add a body, it should be concise and use bullet points.
- Wrap variable names or code elements in backticks.
- Consider changed file paths for scope.
- Omit explanations and return only the commit message text."

    # Add previous commits if available
    if [ -n "$commit_messages" ] && [[ ! "$commit_messages" =~ fatal ]]; then
        prompt="$prompt

Previous commits in this feature branch (most recent first):
\`\`\`
$commit_messages
\`\`\`
Ensure consistency with these commits. Adhere to the $SUMMARY_LENGTH-character summary rule."
    fi

    # Add staged changes
    prompt="$prompt

Changes to commit:
\`\`\`
$git_diff
\`\`\`"

    # Check for issue ID in branch name
    local issue_id=$(echo "$current_branch" | grep -oE '^bcd-([0-9]{4})' | sed 's/bcd-//')
    if [ -n "$issue_id" ]; then
        prompt="$prompt

Please prefix the summary line with the following issue ID: BCD-$issue_id

Example: BCD-$issue_id feat: some new feature"
    fi

    # Prepare the JSON payload
    local json_payload=$(jq -n \
        --arg prompt "$prompt" \
        --arg model "$selected_model" \
        --arg max_tokens "$MAX_TOKENS" \
        '{
            model: $model,
            max_tokens: ($max_tokens | tonumber),
            messages: [
                {
                    role: "user",
                    content: $prompt
                }
            ]
        }')

    # Call Claude API with spinner
    local response=$(gum spin --spinner dot --title "Generating commit message with $selected_model..." -- \
        curl -s -X POST "https://api.anthropic.com/v1/messages" \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: $API_VERSION" \
        -H "content-type: application/json" \
        -d "$json_payload")

    # Extract the commit message from the response
    commit_message=$(echo "$response" | jq -r '.content[0].text' 2>/dev/null | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    # Check if we got a valid response
    if [ -z "$commit_message" ] || [ "$commit_message" = "null" ]; then
        echo "Error: Failed to generate commit message"
        echo "Response: $response"
        return 1
    fi

    return 0
}

# Generate initial commit message
current_model="$MODEL"
if ! generate_commit_message; then
    exit 1
fi

# Display the generated message
echo ""
gum format -t template <<EOF
{{ Color "2" "" "Generated commit message" }} {{ Color "15" "9" " ó°£© $current_model " }}
EOF
echo ""
echo "----------------------------------------"
echo "$commit_message" | gum format
echo "----------------------------------------"
echo ""

# Handle user confirmation based on flags
if [ "$YES_FLAG" = true ]; then
    # Auto-confirm
    gum format -t emoji ':rocket: Auto-committing (--yes flag)...'
    git commit -m "$commit_message"
    echo ""
    gum format -t emoji ':sparkles: Changes committed successfully!'
else
    # Interactive loop for regeneration
    while true; do
        # Use gum for interactive confirmation
        action=$(gum choose "Commit" "Edit" "Regenerate" "Cancel")

        case "$action" in
        "Commit")
            echo ""
            gum format -t emoji ':floppy_disk: Committing changes...'
            git commit -m "$commit_message"
            echo ""
            gum format -t emoji ':sparkles: Changes committed successfully!'
            break
            ;;
        "Edit")
            # Create temp file with commit message
            TEMP_FILE=$(mktemp)
            echo "$commit_message" >"$TEMP_FILE"

            # Open in nvim for editing
            nvim "$TEMP_FILE"

            # Check if file still exists and has content
            if [ -s "$TEMP_FILE" ]; then
                edited_message=$(cat "$TEMP_FILE")
                rm -f "$TEMP_FILE"

                echo ""
                gum format -t emoji ':memo: Committing with edited message...'
                git commit -m "$edited_message"
                echo ""
                gum format -t emoji ':sparkles: Changes committed successfully!'
                break
            else
                rm -f "$TEMP_FILE"
                echo "Commit cancelled (empty message)."
                exit 1
            fi
            ;;
        "Regenerate")
            echo ""
            echo "Select model for regeneration:"
            selected_model=$(printf '%s\n' "${MODEL_OPTIONS[@]}" | gum choose | awk '{print $1}')

            if generate_commit_message "$selected_model"; then
                # Display the new message
                echo ""
                gum format -t template <<EOF
{{ Color "2" "" "Generated commit message" }} {{ Color "15" "4" " $current_model " }}
EOF
                echo ""
                echo "----------------------------------------"
                echo "$commit_message" | gum format
                echo "----------------------------------------"
                echo ""
            else
                echo "Failed to regenerate. Using previous message."
            fi
            ;;
        "Cancel")
            echo "Commit cancelled."
            exit 1
            ;;
        esac
    done
fi

# Handle push - either from flag or ask after commit
if [ "$PUSH_FLAG" = true ]; then
    echo ""
    gum format -t emoji ':outbox_tray: Pushing to remote...'

    if [ "$FORCE_FLAG" = true ]; then
        # Force push directly
        git push --force-with-lease
        echo ""
        gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ‰ All done!") }} {{ Color "7" "" "Changes committed and pushed successfully!" }}
EOF
        echo ""
    else
        # Try regular push
        if ! git push 2>&1; then
            echo ""
            echo "Push failed. Would you like to force push?"
            if gum confirm "Force push with --force-with-lease?"; then
                git push --force-with-lease
                echo ""
                gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ‰ All done!") }} {{ Color "7" "" "Changes committed and pushed successfully!" }}
EOF
                echo ""
            else
                echo "Push cancelled."
                exit 1
            fi
        else
            echo ""
            gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ‰ All done!") }} {{ Color "7" "" "Changes committed and pushed successfully!" }}
EOF
            echo ""
        fi
    fi
else
    # Ask to push after commit (unless -y flag was used alone)
    echo ""
    if gum confirm "Push to remote?"; then
        # Try regular push
        if ! git push 2>&1; then
            echo ""
            echo "Push failed. Would you like to force push?"
            if gum confirm "Force push with --force-with-lease?"; then
                git push --force-with-lease
                echo ""
                gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ‰ All done!") }} {{ Color "7" "" "Changes committed and pushed successfully!" }}
EOF
                echo ""
            else
                echo "Push cancelled."
                exit 1
            fi
        else
            echo ""
            gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ‰ All done!") }} {{ Color "7" "" "Changes committed and pushed successfully!" }}
EOF
            echo ""
        fi
    else
        echo ""
        gum format -t template <<EOF
{{ Bold (Color "2" "" "ðŸŽ† All done!") }} {{ Color "7" "" "Changes committed successfully!" }}
EOF
        echo ""
    fi
fi
