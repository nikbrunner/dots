#!/usr/bin/env bash
# New dots command for symlink-based dotfiles management

set -e

# Get the dots directory
DOTS_DIR="${DOTS_DIR:-$HOME/repos/nikbrunner/dots}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Change to dots directory for git operations
cd "$DOTS_DIR"

# Function to show usage
show_usage() {
    echo -e "${BLUE}dots - Dotfiles management command${NC}"
    echo ""
    echo "Usage: dots <command> [options]"
    echo ""
    echo "Commands:"
    echo "  install      - Initial setup with symlinks and submodules"
    echo "               Options: --dry-run"
    echo "  link         - Re-run symlink creation"
    echo "               Options: --force, --dry-run"
    echo "  sync         - Git pull + submodule updates"
    echo "  push         - Git add, commit, push"
    echo "  clean        - Remove broken symlinks"
    echo "               Options: --dry-run"
    echo "  sub-update   - Update all submodules"
    echo "  sub-add      - Add new submodule"
    echo "  status       - Show git and symlink status"
    echo "  log          - Show git log"
}

# Install command
cmd_install() {
    echo -e "${YELLOW}→${NC} Running installation..."
    "$DOTS_DIR/install.sh" "$@"
}

# Link command
cmd_link() {
    echo -e "${YELLOW}→${NC} Creating symlinks..."
    "$DOTS_DIR/scripts/link.sh" "$@"
}

# Sync command
cmd_sync() {
    echo -e "${YELLOW}→${NC} Syncing repository..."
    git pull origin main || git pull origin master
    
    if [[ -f .gitmodules ]]; then
        echo -e "${YELLOW}→${NC} Updating submodules..."
        "$DOTS_DIR/scripts/submodules.sh" update
    fi
    
    echo -e "${GREEN}✓${NC} Sync complete"
}

# Push command
cmd_push() {
    local message="${1:-Updates}"
    
    echo -e "${YELLOW}→${NC} Pushing changes..."
    
    # Check if there are changes
    if [[ -z $(git status --porcelain) ]]; then
        echo -e "${GREEN}✓${NC} No changes to commit"
        return 0
    fi
    
    git add -A
    git commit -m "$message"
    git push origin main || git push origin master
    
    echo -e "${GREEN}✓${NC} Changes pushed"
}

# Clean command
cmd_clean() {
    local dry_run=false
    if [[ "$1" == "--dry-run" ]]; then
        dry_run=true
        echo -e "${YELLOW}DRY RUN MODE - No changes will be made${NC}"
        echo ""
    fi
    
    echo -e "${YELLOW}→${NC} Cleaning broken dotfiles symlinks..."
    
    local count=0
    
    # Function to check if a symlink points to our dots directory
    is_dots_symlink() {
        local link="$1"
        local target=$(readlink "$link" 2>/dev/null)
        [[ "$target" == "$DOTS_DIR"* ]]
    }
    
    # Check specific locations where we create symlinks
    local check_locations=(
        "$HOME/bin"
        "$HOME/.config"
        "$HOME/.claude"
        "$HOME/.local/bin/dots"
        "$HOME"
    )
    
    for location in "${check_locations[@]}"; do
        if [[ ! -e "$location" ]]; then
            continue
        fi
        
        # Find symlinks in this location
        while IFS= read -r -d '' link; do
            # Only process if it's a dots-related symlink
            if is_dots_symlink "$link"; then
                # Check if the symlink is broken
                if [[ ! -e "$link" ]]; then
                    if [[ "$dry_run" == true ]]; then
                        echo -e "${RED}✗${NC} [DRY] Would remove broken symlink: $link"
                    else
                        echo -e "${RED}✗${NC} Removing broken symlink: $link"
                        rm "$link"
                    fi
                    ((count++))
                fi
            fi
        done < <(find "$location" -maxdepth 2 -type l -print0 2>/dev/null)
    done
    
    # Also check root dotfiles in home directory
    for dotfile in "$HOME"/.* ; do
        if [[ -L "$dotfile" ]] && is_dots_symlink "$dotfile" && [[ ! -e "$dotfile" ]]; then
            if [[ "$dry_run" == true ]]; then
                echo -e "${RED}✗${NC} [DRY] Would remove broken symlink: $dotfile"
            else
                echo -e "${RED}✗${NC} Removing broken symlink: $dotfile"
                rm "$dotfile"
            fi
            ((count++))
        fi
    done
    
    if [[ $count -eq 0 ]]; then
        echo -e "${GREEN}✓${NC} No broken dotfiles symlinks found"
    else
        if [[ "$dry_run" == true ]]; then
            echo -e "${GREEN}✓${NC} Would remove $count broken dotfiles symlinks"
        else
            echo -e "${GREEN}✓${NC} Removed $count broken dotfiles symlinks"
        fi
    fi
}

# Submodule update command
cmd_sub_update() {
    "$DOTS_DIR/scripts/submodules.sh" update
}

# Submodule add command
cmd_sub_add() {
    if [[ $# -lt 2 ]]; then
        echo -e "${RED}✗${NC} Usage: dots sub-add <repo_url> <path>"
        return 1
    fi
    "$DOTS_DIR/scripts/submodules.sh" add "$@"
}

# Status command - enhanced with symlink status
cmd_status() {
    echo -e "${BLUE}=== Git Repository Status ===${NC}"
    git status --short
    
    echo ""
    echo -e "${BLUE}=== Symlink Status ===${NC}"
    
    local total_links=0
    local valid_links=0
    local broken_links=0
    local missing_links=0
    
    # Function to check a symlink
    check_symlink() {
        local link_path="$1"
        local expected_target="$2"
        ((total_links++))
        
        if [[ -L "$link_path" ]]; then
            # It's a symlink, check if it's valid
            local actual_target=$(readlink "$link_path")
            if [[ "$actual_target" == "$expected_target" ]]; then
                ((valid_links++))
            else
                echo -e "${YELLOW}⚠${NC}  Wrong target: $link_path → $actual_target"
                echo -e "    Expected: $expected_target"
            fi
            
            # Check if target exists
            if [[ ! -e "$link_path" ]]; then
                ((broken_links++))
                echo -e "${RED}✗${NC} Broken link: $link_path"
            fi
        elif [[ -e "$link_path" ]]; then
            # File/directory exists but is not a symlink
            echo -e "${RED}✗${NC} Not a symlink: $link_path"
            echo -e "    Run 'dots link --force' to fix"
        else
            # Neither symlink nor file exists
            ((missing_links++))
            echo -e "${YELLOW}→${NC} Missing link: $link_path"
        fi
    }
    
    # Check main symlinks we expect
    echo "Checking main configuration symlinks..."
    
    # Check root dotfiles
    check_symlink "$HOME/.zshrc" "$DOTS_DIR/common/.zshrc"
    check_symlink "$HOME/.gitconfig" "$DOTS_DIR/common/.gitconfig" 
    check_symlink "$HOME/.gitignore" "$DOTS_DIR/common/.gitignore"
    check_symlink "$HOME/.vimrc" "$DOTS_DIR/common/.vimrc"
    check_symlink "$HOME/.ideavimrc" "$DOTS_DIR/common/.ideavimrc"
    check_symlink "$HOME/.hushlogin" "$DOTS_DIR/common/.hushlogin"
    
    # Check config directories (symlinked as whole directories)
    check_symlink "$HOME/.config/yazi" "$DOTS_DIR/common/.config/yazi"
    check_symlink "$HOME/.config/lazygit" "$DOTS_DIR/common/.config/lazygit"
    check_symlink "$HOME/.config/bat" "$DOTS_DIR/common/.config/bat"
    check_symlink "$HOME/.config/tmux" "$DOTS_DIR/common/.config/tmux"
    check_symlink "$HOME/.config/kitty" "$DOTS_DIR/common/.config/kitty"
    check_symlink "$HOME/.config/ghostty" "$DOTS_DIR/common/.config/ghostty"
    check_symlink "$HOME/.config/oh-my-posh" "$DOTS_DIR/common/.config/oh-my-posh"
    check_symlink "$HOME/.config/gallery-dl" "$DOTS_DIR/common/.config/gallery-dl"
    
    # Check individual script files in bin directory
    for script in "$DOTS_DIR/common/bin"/*; do
        [[ -f "$script" ]] || continue
        local script_name=$(basename "$script")
        check_symlink "$HOME/bin/$script_name" "$script"
    done
    
    # Check git completion files
    check_symlink "$HOME/.config/.zsh/_git" "$DOTS_DIR/common/.config/.zsh/_git"
    check_symlink "$HOME/.config/.zsh/git-completion.bash" "$DOTS_DIR/common/.config/.zsh/git-completion.bash"
    
    # Check OS-specific files
    if [[ "$OSTYPE" == darwin* ]]; then
        echo "Checking macOS-specific symlinks..."
        check_symlink "$HOME/.config/karabiner" "$DOTS_DIR/macos/.config/karabiner"
        check_symlink "$HOME/Library/Application Support/Claude/claude_desktop_config.json" "$DOTS_DIR/macos/Library/Application Support/Claude/claude_desktop_config.json"
        check_symlink "$HOME/Brewfile" "$DOTS_DIR/macos/Brewfile"
    fi
    
    # Summary
    echo ""
    echo -e "${BLUE}Summary:${NC}"
    echo -e "  Total expected links: $total_links"
    echo -e "  ${GREEN}✓${NC} Valid links: $valid_links"
    if [[ $broken_links -gt 0 ]]; then
        echo -e "  ${RED}✗${NC} Broken links: $broken_links"
    fi
    if [[ $missing_links -gt 0 ]]; then
        echo -e "  ${YELLOW}→${NC} Missing links: $missing_links"
    fi
    
}

# Log command
cmd_log() {
    echo -e "${YELLOW}→${NC} Recent commits:"
    git log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate -10
}

# Main command dispatcher
case "${1:-}" in
    install)
        shift
        cmd_install "$@"
        ;;
    link)
        shift
        cmd_link "$@"
        ;;
    sync)
        cmd_sync
        ;;
    push)
        shift
        cmd_push "$@"
        ;;
    clean)
        shift
        cmd_clean "$@"
        ;;
    sub-update)
        cmd_sub_update
        ;;
    sub-add)
        shift
        cmd_sub_add "$@"
        ;;
    status)
        cmd_status
        ;;
    log)
        cmd_log
        ;;
    *)
        show_usage
        ;;
esac