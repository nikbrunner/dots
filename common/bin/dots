#!/usr/bin/env bash
# New dots command for symlink-based dotfiles management

set -e

# Get the dots directory
DOTS_DIR="${DOTS_DIR:-$HOME/repos/nikbrunner/dots}"

# Capture the original working directory before changing to dots dir
ORIGINAL_PWD="$(pwd)"

# Colors disabled for compatibility
RED=''
GREEN=''
YELLOW=''
BLUE=''
NC='' # No Color

# Change to dots directory for git operations
cd "$DOTS_DIR"

# Check for gum and provide helpful message if missing
check_gum() {
    if ! command -v gum >/dev/null 2>&1; then
        echo "⚠ gum not found - install for enhanced UI:"
        echo "  macOS: brew install gum"
        echo "  Linux: See https://github.com/charmbracelet/gum#installation"
        echo ""
        return 1
    fi
    return 0
}

# Enhanced output functions using gum when available
log_section() {
    if command -v gum >/dev/null 2>&1; then
        gum style --foreground=4 --bold "$1"
    else
        echo "$1"
    fi
}

log_success() {
    if command -v gum >/dev/null 2>&1; then
        gum style --foreground=2 "✓ $1"
    else
        echo "✓ $1"
    fi
}

log_warning() {
    if command -v gum >/dev/null 2>&1; then
        gum style --foreground=3 "⚠ $1"
    else
        echo "⚠ $1"
    fi
}

log_error() {
    if command -v gum >/dev/null 2>&1; then
        gum style --foreground=1 "✗ $1"
    else
        echo "✗ $1"
    fi
}

log_info() {
    if command -v gum >/dev/null 2>&1; then
        gum style --foreground=6 "→ $1"
    else
        echo "→ $1"
    fi
}

# Function to show usage
show_usage() {
    if command -v gum >/dev/null 2>&1; then
        gum style --border="rounded" --padding="1 2" --margin="1" \
            --foreground=4 --bold "dots - Dotfiles management command"
        echo ""
        gum style "Usage: dots <command> [options]"
        echo ""
        gum style --foreground=4 --bold "Commands:"
        gum style --foreground=2 "  install      - Initial setup with symlinks and submodules [--dry-run]"
        gum style --foreground=2 "  add          - Add file to dots repository and replace with symlink"
        gum style --foreground=2 "  link         - Update all symlinks (clean broken + create new) [--dry-run] [--no-backup] [--verbose]"
        gum style --foreground=2 "  sync         - Git pull + submodule updates"
        gum style --foreground=2 "  commit       - Open LazyGit for interactive committing"
        gum style --foreground=2 "  push         - Push commits to remote [--force]"
        gum style --foreground=2 "  sub-update   - Update all submodules"
        gum style --foreground=2 "  sub-add      - Add new submodule"
        gum style --foreground=2 "  sub-commit   - Commit submodule hash updates"
        gum style --foreground=2 "  sub-status   - Show status of all submodules"
        gum style --foreground=2 "  status       - Show git and symlink status"
        gum style --foreground=2 "  test         - Run comprehensive system tests"
        gum style --foreground=2 "  format       - Format repository files with prettier and shfmt [--check]"
        gum style --foreground=2 "  log          - Show git log"
        gum style --foreground=2 "  open         - Open dots directory with \$EDITOR"
        gum style --foreground=2 "  remove       - Remove path from git tracking (keep files locally)"
        gum style --foreground=2 "  theme        - Interactive theme selector for all development tools [--debug]"
        gum style --foreground=2 "  font         - Interactive font selector for terminal applications"
        echo ""
    else
        echo "dots - Dotfiles management command"
        echo ""
        echo "Usage: dots <command> [options]"
        echo ""
        echo "Commands:"
        echo "  install      - Initial setup with symlinks and submodules [--dry-run]"
        echo "  add          - Add file to dots repository and replace with symlink"
        echo "  link         - Update all symlinks (clean broken + create new) [--dry-run] [--no-backup] [--verbose]"
        echo "  sync         - Git pull + submodule updates"
        echo "  commit       - Open LazyGit for interactive committing"
        echo "  push         - Push commits to remote [--force]"
        echo "  sub-update   - Update all submodules"
        echo "  sub-add      - Add new submodule"
        echo "  sub-commit   - Commit submodule hash updates"
        echo "  sub-status   - Show status of all submodules"
        echo "  status       - Show git and symlink status"
        echo "  test         - Run comprehensive system tests"
        echo "  format       - Format repository files with prettier and shfmt [--check]"
        echo "  log          - Show git log"
        echo "  open         - Open dots directory with \$EDITOR"
        echo "  remove       - Remove path from git tracking (keep files locally)"
        echo "  theme        - Interactive theme selector for all development tools [--debug]"
        echo "  font         - Interactive font selector for terminal applications"
        echo ""
    fi
}

# Install command
cmd_install() {
    echo "→ Running installation..."
    "$DOTS_DIR/install.sh" "$@"
}

# Link command
cmd_link() {
    echo "→ Creating symlinks..."
    "$DOTS_DIR/scripts/link.sh" "$@"
}

# Sync command
cmd_sync() {
    log_info "Checking for local changes..."
    
    # Check if there are uncommitted changes
    if ! git diff-index --quiet HEAD --; then
        log_error "Local changes detected! Please commit or stash changes before syncing."
        echo ""
        log_info "Run 'dots status' to see changes or 'dots commit' to commit them"
        return 1
    fi
    
    # Check for untracked files
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        log_warning "Untracked files detected:"
        git ls-files --others --exclude-standard | sed 's/^/  /'
        echo ""
        if command -v gum >/dev/null 2>&1; then
            if ! gum confirm "Continue syncing anyway?"; then
                log_info "Sync cancelled"
                return 1
            fi
        else
            echo -n "Continue syncing anyway? (y/N) "
            read -r continue_sync
            if [[ "$continue_sync" != "y" && "$continue_sync" != "Y" ]]; then
                log_info "Sync cancelled"
                return 1
            fi
        fi
        echo ""
    fi

    log_info "Syncing repository..."
    
    # Try to pull from remote
    if command -v gum >/dev/null 2>&1; then
        if ! gum spin --spinner="dot" --title="Pulling from remote..." -- git pull origin main 2>/dev/null; then
            if ! gum spin --spinner="dot" --title="Trying master branch..." -- git pull origin master 2>/dev/null; then
                log_error "Failed to pull from remote"
                return 1
            fi
        fi
    else
        if ! git pull origin main 2>/dev/null; then
            if ! git pull origin master 2>/dev/null; then
                log_error "Failed to pull from remote"
                return 1
            fi
        fi
    fi

    # Update submodules if they exist
    if [[ -f .gitmodules ]]; then
        log_info "Updating submodules..."
        if command -v gum >/dev/null 2>&1; then
            gum spin --spinner="dot" --title="Updating submodules..." -- "$DOTS_DIR/scripts/submodules.sh" update
        else
            "$DOTS_DIR/scripts/submodules.sh" update
        fi
    fi

    log_success "Sync complete"
    
    # Offer to update symlinks
    echo ""
    if command -v gum >/dev/null 2>&1; then
        if gum confirm "Update symlinks to reflect any new changes?"; then
            echo ""
            cmd_link
        fi
    else
        echo -n "Update symlinks to reflect any new changes? (y/N) "
        read -r update_links
        if [[ "$update_links" == "y" || "$update_links" == "Y" ]]; then
            echo ""
            cmd_link
        fi
    fi
}

# Shared push function
do_push() {
    local force_flag="${1:-false}"

    log_info "Pushing to remote..."

    if [[ "$force_flag" == "true" ]]; then
        # Force push directly
        if command -v gum >/dev/null 2>&1; then
            gum spin --spinner="dot" --title="Force pushing..." -- git push --force-with-lease
        else
            git push --force-with-lease
        fi
        log_success "Changes force pushed"
    else
        # Try regular push
        if command -v gum >/dev/null 2>&1; then
            # Capture output to show error message
            local push_output
            if push_output=$(gum spin --spinner="dot" --title="Pushing..." -- git push 2>&1); then
                log_success "Changes pushed"
            else
                log_warning "Push failed:"
                echo "$push_output"
                echo ""
                if gum confirm "Force push with --force-with-lease?"; then
                    gum spin --spinner="dot" --title="Force pushing..." -- git push --force-with-lease
                    log_success "Changes force pushed"
                else
                    log_error "Push cancelled"
                    return 1
                fi
            fi
        else
            # Capture output to show error message
            local push_output
            if push_output=$(git push 2>&1); then
                log_success "Changes pushed"
            else
                log_warning "Push failed:"
                echo "$push_output"
                echo "Try: git push --force-with-lease"
                return 1
            fi
        fi
    fi
}

# Commit command - opens LazyGit for interactive committing
cmd_commit() {
    log_info "Opening LazyGit for commits..."

    if command -v lazygit >/dev/null 2>&1; then
        lazygit
    else
        log_error "LazyGit not found. Install with: brew install lazygit"
        return 1
    fi
}

# Push command - only pushes, no committing
cmd_push() {
    local force_flag=false
    if [[ "$1" == "--force" || "$1" == "-f" ]]; then
        force_flag=true
    fi

    # Check if there are any commits to push
    if [[ -z $(git log @{u}.. 2>/dev/null) ]]; then
        log_success "No commits to push"
        return 0
    fi

    do_push "$force_flag"
}

# Submodule update command
cmd_sub_update() {
    "$DOTS_DIR/scripts/submodules.sh" update
}

# Submodule add command
cmd_sub_add() {
    if [[ $# -lt 2 ]]; then
        echo "✗ Usage: dots sub-add <repo_url> <path>"
        return 1
    fi
    "$DOTS_DIR/scripts/submodules.sh" add "$@"
}

# Submodule status command - shows status of all submodules
cmd_sub_status() {
    # Check if we have any submodules
    if [[ ! -f .gitmodules ]]; then
        log_warning "No submodules found in this repository"
        return 0
    fi
    
    # Get list of submodule paths
    local submodule_paths
    submodule_paths=($(git submodule status 2>/dev/null | awk '{print $2}'))
    
    # Check for submodule changes only
    local submodule_changes=()
    for path in "${submodule_paths[@]}"; do
        if git status --porcelain | grep -q "^.M $path$"; then
            submodule_changes+=("$path")
        fi
    done
    
    log_section "=== Submodule Status ==="
    
    if [[ ${#submodule_changes[@]} -gt 0 ]]; then
        echo "Changes detected in submodules:"
        for path in "${submodule_changes[@]}"; do
            local name=$(basename "$path")
            echo "  - $name"
        done
    else
        log_success "All submodules are up to date"
    fi
    
    echo ""
    log_section "=== Detailed Submodule Info ==="
    git submodule status
    
    # Offer to commit if there are changes
    if [[ ${#submodule_changes[@]} -gt 0 ]]; then
        echo ""
        if command -v gum >/dev/null 2>&1; then
            if gum confirm "Commit submodule changes?"; then
                cmd_sub_commit
            fi
        else
            log_info "Run 'dots sub-commit' to commit these changes"
        fi
    fi
}

# Submodule commit command - commits submodule hash updates
cmd_sub_commit() {
    log_info "Checking for submodule changes..."
    
    # Get list of submodule paths
    local submodule_paths
    submodule_paths=($(git submodule status 2>/dev/null | awk '{print $2}'))
    
    # Find submodules with changes
    local submodule_changes=()
    for path in "${submodule_paths[@]}"; do
        if git status --porcelain | grep -q "^.M $path$"; then
            submodule_changes+=("$path")
        fi
    done
    
    if [[ ${#submodule_changes[@]} -eq 0 ]]; then
        log_success "All submodules are up to date"
        return 0
    fi
    
    # Show and add only submodule changes
    log_info "Found submodule changes:"
    for path in "${submodule_changes[@]}"; do
        echo "  $path"
        git add "$path"
    done
    echo ""
    
    # Create commit message with submodule names
    local commit_msg="chore: update submodule commit hashes"
    if [[ ${#submodule_changes[@]} -eq 1 ]]; then
        local name=$(basename "${submodule_changes[0]}")
        commit_msg="chore: update $name submodule"
    fi
    
    if command -v gum >/dev/null 2>&1; then
        gum spin --spinner="dot" --title="Committing submodule updates..." -- \
            git commit -m "$commit_msg"
    else
        git commit -m "$commit_msg"
    fi
    
    # Show which submodules were committed
    if [[ ${#submodule_changes[@]} -eq 1 ]]; then
        local name=$(basename "${submodule_changes[0]}")
        log_success "Submodule changes committed for $name"
    else
        log_success "Submodule changes committed for ${#submodule_changes[@]} submodules"
    fi
}

# Status command - delegate to external script
cmd_status() {
    log_section "=== Git Repository Status ==="
    git status --short

    echo ""
    log_section "=== Symlink Status ==="

    echo "Checking symlinks..."
    
    # Run the symlinks library as standalone script and capture output
    local output
    output=$("$DOTS_DIR/scripts/lib/symlinks.sh")
    
    # Split output into lines array
    local lines=()
    while IFS= read -r line; do
        lines+=("$line")
    done <<< "$output"
    
    # Show all lines except the last one
    local num_lines=${#lines[@]}
    if [[ $num_lines -gt 1 ]]; then
        for ((i=0; i<num_lines-1; i++)); do
            echo "${lines[i]}"
        done
    fi
    
    # Parse the stats from the last line
    local stats_line="${lines[-1]}"
    
    if [[ "$stats_line" =~ ^STATS:([0-9]+):([0-9]+):([0-9]+):([0-9]+):([0-9]+)$ ]]; then
        local total_links="${BASH_REMATCH[1]}"
        local valid_links="${BASH_REMATCH[2]}"
        local broken_links="${BASH_REMATCH[3]}"
        local missing_links="${BASH_REMATCH[4]}"
        local wrong_target_links="${BASH_REMATCH[5]}"
        
        # Summary
        echo ""
        log_section "Summary:"

        echo "  Total expected links: $total_links"
        log_success "Valid links: $valid_links"
        if [[ $wrong_target_links -gt 0 ]]; then
            log_warning "Wrong targets: $wrong_target_links"
        fi
        if [[ $broken_links -gt 0 ]]; then
            log_error "Broken links: $broken_links"
        fi
        if [[ $missing_links -gt 0 ]]; then
            log_info "Missing links: $missing_links"
        fi
    else
        log_error "Failed to parse symlink check results"
    fi
}

# Test command - comprehensive system checks
cmd_test() {
    echo "=== Dotfiles System Test ==="
    echo ""

    local tests_passed=0
    local tests_failed=0

    # Test 1: Check if we're in the right directory
    echo "→ Testing repository structure..."
    if [[ -f "CLAUDE.md" && -d "scripts" && -d "common" ]]; then
        echo "✓ Repository structure OK"
        ((tests_passed++))
    else
        echo "✗ Repository structure missing"
        ((tests_failed++))
    fi

    # Test 2: Check OS detection
    echo "→ Testing OS detection..."
    source "$DOTS_DIR/scripts/detect-os.sh"
    local detected_os=$(get_os)
    if [[ -n "$detected_os" && ("$detected_os" == "macos" || "$detected_os" == "linux") ]]; then
        echo "✓ OS detection OK: $detected_os"
        ((tests_passed++))
    else
        echo "✗ OS detection failed: $detected_os"
        ((tests_failed++))
    fi

    # Test 3: Check directory structure
    echo "→ Testing directory structure..."
    local expected_dirs=("$DOTS_DIR/common" "$DOTS_DIR/$detected_os" "$DOTS_DIR/scripts")
    local missing_dirs=0
    for dir in "${expected_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            ((missing_dirs++))
        fi
    done
    if [[ $missing_dirs -eq 0 ]]; then
        echo "✓ Directory structure OK"
        ((tests_passed++))
    else
        echo "✗ Directory structure incomplete ($missing_dirs missing)"
        ((tests_failed++))
    fi

    # Test 4: Check symlink creation (dry run)
    echo "→ Testing symlink creation (dry run)..."
    if "$DOTS_DIR/scripts/link.sh" --dry-run >/dev/null 2>&1; then
        echo "✓ Symlink creation test OK"
        ((tests_passed++))
    else
        echo "✗ Symlink creation test failed"
        ((tests_failed++))
    fi

    # Test 5: Check critical symlinks exist and are correct
    echo "→ Testing critical symlinks..."
    local critical_links=("$HOME/.zshrc" "$HOME/.gitconfig" "$HOME/bin/dots")
    local valid_symlinks=0

    for link in "${critical_links[@]}"; do
        if [[ -L "$link" && -e "$link" ]]; then
            ((valid_symlinks++))
        fi
    done

    if [[ $valid_symlinks -eq ${#critical_links[@]} ]]; then
        echo "✓ Critical symlinks OK ($valid_symlinks/${#critical_links[@]})"
        ((tests_passed++))
    else
        echo "⚠ Some critical symlinks missing ($valid_symlinks/${#critical_links[@]})"
        # Don't fail the test - symlinks might not be set up yet
        ((tests_passed++))
    fi

    # Test 6: Check git repository status
    echo "→ Testing git repository..."
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo "✓ Git repository OK"
        ((tests_passed++))
    else
        echo "✗ Git repository not found"
        ((tests_failed++))
    fi

    # Test 7: Lint shell scripts with shellcheck
    echo "→ Linting shell scripts..."
    if command -v shellcheck >/dev/null 2>&1; then
        local shell_files=()
        local lint_errors=0

        # Find all shell files
        while IFS= read -r -d '' file; do
            shell_files+=("$file")
        done < <(find . -name "*.sh" -not -path "./.git/*" -print0 2>/dev/null)

        # Add executable scripts with shell shebangs
        while IFS= read -r -d '' file; do
            if [[ -x "$file" && -f "$file" ]]; then
                local first_line=$(head -n1 "$file" 2>/dev/null)
                if [[ "$first_line" =~ ^#!.*/(bash|sh|zsh) ]]; then
                    shell_files+=("$file")
                fi
            fi
        done < <(find . -type f -not -path "./.git/*" -not -name "*.sh" -print0 2>/dev/null)

        if [[ ${#shell_files[@]} -gt 0 ]]; then
            local files_with_issues=()
            for file in "${shell_files[@]}"; do
                if ! shellcheck "$file" >/dev/null 2>&1; then
                    ((lint_errors++))
                    files_with_issues+=("$file")
                fi
            done

            if [[ $lint_errors -eq 0 ]]; then
                echo "✓ Shell scripts lint OK (${#shell_files[@]} files)"
                ((tests_passed++))
            else
                echo "⚠ Shell scripts have lint issues ($lint_errors/${#shell_files[@]} files):"
                for file in "${files_with_issues[@]}"; do
                    echo ""
                    log_warning "Issues in $file:"
                    # Run shellcheck and indent the output
                    shellcheck "$file" 2>&1 | sed 's/^/      /'
                done
                # Don't fail the test - just warn about lint issues
                ((tests_passed++))
            fi
        else
            echo "✓ No shell scripts found"
            ((tests_passed++))
        fi
    else
        echo "⚠ shellcheck not available, skipping shell script linting"
        echo "    Install with: brew install shellcheck"
        ((tests_passed++))
    fi

    # Summary
    echo ""
    echo "=== Test Summary ==="
    local total_tests=$((tests_passed + tests_failed))
    echo "  Total tests: $total_tests"
    echo "  ✓ Passed: $tests_passed"

    if [[ $tests_failed -gt 0 ]]; then
        echo "  ✗ Failed: $tests_failed"
        echo ""
        echo "❌ System tests FAILED"
        return 1
    else
        echo ""
        echo "🎉 All system tests PASSED"
        return 0
    fi
}


# Format command
cmd_format() {
    echo "→ Formatting repository files..."
    "$DOTS_DIR/scripts/format.sh" "$@"
}

# Log command
cmd_log() {
    echo "→ Recent commits:"
    git log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate -10
}

# Open command - open dots directory with $EDITOR
cmd_open() {
    # Check if EDITOR is set
    if [[ -z "$EDITOR" ]]; then
        echo "⚠ EDITOR environment variable not set, using 'vim' as default"
        local editor="vim"
    else
        local editor="$EDITOR"
    fi
    
    echo "→ Opening dots directory with $editor..."
    "$editor" "$DOTS_DIR"
}

# Add command - add files to dots repository and replace with symlinks
cmd_add() {
    if [[ $# -lt 2 ]]; then
        log_error "Usage: dots add <scope> <file_path>"
        echo "       Adds file to dots repository and replaces with symlink"
        echo "       Scope must be: common, macos, or linux"
        return 1
    fi

    local scope="$1"
    local source_path="$2"

    # Validate scope
    if [[ "$scope" != "common" && "$scope" != "macos" && "$scope" != "linux" ]]; then
        log_error "Invalid scope: $scope"
        echo "       Scope must be: common, macos, or linux"
        return 1
    fi

    # Expand tilde in source path
    if [[ "$source_path" =~ ^~ ]]; then
        source_path="${source_path/#\~/$HOME}"
    fi

    # Convert to absolute path
    if [[ ! "$source_path" = /* ]]; then
        source_path="$(pwd)/$source_path"
    fi

    # Check if source file exists
    if [[ ! -e "$source_path" ]]; then
        log_error "Source file does not exist: $source_path"
        return 1
    fi

    # Check if source file is already a symlink
    if [[ -L "$source_path" ]]; then
        log_error "Source file is already a symlink: $source_path"
        return 1
    fi

    # Calculate relative path from home directory
    local relative_path
    if [[ "$source_path" == "$HOME"/* ]]; then
        relative_path="${source_path#$HOME/}"
        # Add leading dot for dotfiles
        if [[ ! "$relative_path" =~ ^\..*$ && ! "$relative_path" =~ ^bin/.*$ && ! "$relative_path" =~ ^Library/.*$ ]]; then
            relative_path=".$relative_path"
        fi
    else
        log_error "File must be within home directory: $source_path"
        return 1
    fi

    # Calculate destination path
    local dest_path="$DOTS_DIR/$scope/$relative_path"
    local dest_dir="$(dirname "$dest_path")"

    log_info "Adding file to dots repository..."
    echo "  Source: $source_path"
    echo "  Destination: $dest_path"
    echo "  Scope: $scope"
    echo ""

    # Create parent directories if needed
    if [[ ! -d "$dest_dir" ]]; then
        log_info "Creating parent directories: $dest_dir"
        if ! mkdir -p "$dest_dir"; then
            log_error "Failed to create parent directories"
            return 1
        fi
    fi

    # Check if destination already exists
    if [[ -e "$dest_path" ]]; then
        log_error "Destination already exists: $dest_path"
        return 1
    fi

    # Copy the file
    log_info "Copying file to dots repository..."
    if ! cp "$source_path" "$dest_path"; then
        log_error "Failed to copy file"
        return 1
    fi

    # Remove original and create symlink
    log_info "Replacing original with symlink..."
    if ! rm "$source_path"; then
        log_error "Failed to remove original file"
        # Clean up: remove the copied file
        rm -f "$dest_path"
        return 1
    fi

    # Create symlink
    if ! ln -s "$dest_path" "$source_path"; then
        log_error "Failed to create symlink"
        # Try to restore original file
        cp "$dest_path" "$source_path" 2>/dev/null || true
        rm -f "$dest_path"
        return 1
    fi

    log_success "File successfully added to dots repository"
    log_success "Symlink created: $source_path → $dest_path"

    # Show git status
    echo ""
    log_section "Git status:"
    git status --short | grep -E "^\\?\\?" | head -5

    echo ""
    log_info "Run 'dots commit' to commit this change"
}

# Remove command - remove files from git tracking but keep them locally
cmd_remove() {
    if [[ $# -lt 1 ]]; then
        log_error "Usage: dots remove <path>"
        echo "       Removes path from git tracking and adds to .gitignore"
        return 1
    fi

    local path="$1"
    
    # Make path relative to dots directory
    if [[ "$path" = /* ]]; then
        path="${path#$DOTS_DIR/}"
    fi
    
    # Check if path exists
    if [[ ! -e "$path" ]]; then
        log_error "Path does not exist: $path"
        return 1
    fi
    
    log_info "Removing from git tracking: $path"
    
    # Check if the path is currently tracked
    if git ls-files --error-unmatch "$path" >/dev/null 2>&1; then
        # Remove from git tracking
        if [[ -d "$path" ]]; then
            if ! git rm --cached -r "$path" 2>/dev/null; then
                log_error "Failed to remove directory from git tracking"
                return 1
            fi
        else
            if ! git rm --cached "$path" 2>/dev/null; then
                log_error "Failed to remove file from git tracking"
                return 1
            fi
        fi
        log_success "Removed from git tracking"
    else
        log_warning "Path is not tracked by git"
    fi
    
    # Add to .gitignore
    log_info "Adding to .gitignore..."
    
    # Ensure path ends with / for directories
    local gitignore_entry="$path"
    if [[ -d "$path" ]] && [[ ! "$gitignore_entry" = */ ]]; then
        gitignore_entry="${gitignore_entry}/"
    fi
    
    # Check if already in .gitignore
    if grep -Fxq "$gitignore_entry" .gitignore 2>/dev/null; then
        log_info "Already in .gitignore"
    else
        # Add to .gitignore
        if [[ -f .gitignore ]]; then
            # Ensure .gitignore ends with newline
            if [[ -n "$(tail -c 1 .gitignore 2>/dev/null)" ]]; then
                echo "" >> .gitignore
            fi
        fi
        echo "$gitignore_entry" >> .gitignore
        log_success "Added to .gitignore"
    fi
    
    # Stage .gitignore changes
    git add .gitignore
    
    # Show status
    echo ""
    log_section "Changes ready to commit:"
    git status --short | grep -E "^(M|D|A)" | head -10
    
    echo ""
    log_info "Files still exist locally at: $DOTS_DIR/$path"
    
    if command -v gum >/dev/null 2>&1; then
        echo ""
        if gum confirm "Commit these changes now?"; then
            local commit_msg="chore: remove $path from git tracking"
            git commit -m "$commit_msg"
            log_success "Changes committed"
        else
            log_info "Run 'dots commit' when ready to commit"
        fi
    else
        echo ""
        log_info "Run 'dots commit' to commit these changes"
    fi
}

# Main command dispatcher
case "${1:-}" in
install)
    shift
    cmd_install "$@"
    ;;
add)
    shift
    cmd_add "$@"
    ;;
link)
    shift
    cmd_link "$@"
    ;;
sync)
    cmd_sync
    ;;
commit)
    shift
    cmd_commit "$@"
    ;;
push)
    shift
    cmd_push "$@"
    ;;
sub-update)
    cmd_sub_update
    ;;
sub-add)
    shift
    cmd_sub_add "$@"
    ;;
sub-commit)
    cmd_sub_commit
    ;;
sub-status)
    cmd_sub_status
    ;;
status)
    cmd_status
    ;;
test)
    cmd_test
    ;;
format)
    shift
    cmd_format "$@"
    ;;
log)
    cmd_log
    ;;
open)
    cmd_open
    ;;
remove)
    shift
    cmd_remove "$@"
    ;;
theme)
    # Return to original directory before running pick-theme
    cd "$ORIGINAL_PWD"
    exec pick-theme "$@"
    ;;
font)
    # Return to original directory before running pick-font
    cd "$ORIGINAL_PWD"
    exec pick-font "$@"
    ;;
*)
    show_usage
    ;;
esac
