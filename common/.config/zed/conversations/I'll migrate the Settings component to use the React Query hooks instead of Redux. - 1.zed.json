{
  "id": "413ae67d-8469-41d2-9619-b4ec7c4d5769",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\n```tsx bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx\nimport React from \"react\";\nimport { push } from \"connected-react-router\";\nimport qs from \"qs\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { ConnectedProps } from \"react-redux\";\nimport { matchPath, RouteChildrenProps, useLocation } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { getCustomerGroupConfig } from \"../../../../commons/libs/config\";\nimport { DeviceType } from \"../../../../commons/types/env\";\nimport { ExternalToolKey, ToolKey } from \"../../../../commons/types/tool\";\nimport * as icons from \"../../../../resources/icons\";\nimport actions from \"../../../commons/actions\";\nimport Badge from \"../../../commons/components/Badge/Badge\";\nimport Icon from \"../../../commons/components/Icon/Icon\";\nimport IconLink from \"../../../commons/components/IconLink/IconLink\";\nimport SettingsPageLayout from \"../../../commons/components/SettingsPageLayout/SettingsPageLayout\";\nimport SidebarNavigation from \"../../../commons/components/SidebarNavigation/SidebarNavigation\";\nimport SidebarNavigationGroup from \"../../../commons/components/SidebarNavigation/SidebarNavigationGroup\";\nimport SidebarNavigationLink from \"../../../commons/components/SidebarNavigation/SidebarNavigationLink\";\nimport Tooltip, { TooltipPosition } from \"../../../commons/components/Tooltip/Tooltip\";\nimport config from \"../../../commons/config\";\nimport { connect } from \"../../../commons/container/utils/loop\";\nimport useOnUnmount from \"../../../commons/libs/hooks/use-on-unmount\";\nimport { overwriteQueryInPath } from \"../../../commons/libs/path\";\nimport { useActiveBrands } from \"../../../commons/libs/queries/use-active-brands\";\nimport { countChildrenWithFragments } from \"../../../commons/libs/react-utils\";\nimport { ROUTES } from \"../../../commons/routes\";\nimport { isExternalToolAvailable } from \"../../libs/external-tools\";\nimport useRedirectOnIdle from \"../../libs/hooks/use-redirect-on-idle\";\nimport { selectInitializedEnv, selectInitializedSettings, selectIsToolAvailable } from \"../../libs/selectors\";\nimport { State } from \"../../reducers\";\nimport externalTools from \"../../tools\";\n\nimport AdacPage from \"./AdacPage\";\nimport AlteosPage from \"./AlteosPage\";\nimport AlteosRegisterPage from \"./AlteosRegisterPage\";\nimport AssortmentEditPage from \"./Assortment/AssortmentEditPage\";\nimport AssortmentIndexPage from \"./Assortment/AssortmentIndexPage\";\nimport AuthPage from \"./AuthPage\";\nimport BcRemoteShopPage from \"./BcRemoteShopPage\";\nimport BicoShopPage from \"./BicoShopPage\";\nimport BikeFinancialCalculatorPage from \"./BikeFinancialCalculatorPage\";\nimport BikeFrameSizeCalculatorPage from \"./BikeFrameSizeCalculatorPage\";\nimport BikeLeasingPage from \"./BikeLeasingPage\";\nimport BikepriceCalculatorPage from \"./BikepriceCalculatorPage\";\nimport BikmoPage from \"./BikmoPage\";\nimport BikmoRegisterPage from \"./BikmoRegisterPage\";\nimport BodyScanningPage from \"./BodyScanningPage\";\nimport BodySizingPage from \"./BodySizingPage\";\nimport BoschPartsAdviserPage from \"./BoschPartsAdviserPage\";\nimport SetupBrandsPage from \"./BrandActivationPage\";\nimport BusinessBikePage from \"./BusinessBikePage\";\nimport CustomerWorldPage from \"./CustomerWorldPage\";\nimport CustomizationPage from \"./CustomizationPage\";\nimport DeutscheDienstradPage from \"./DeutscheDienstradPage\";\nimport EasyBikeLeasingPage from \"./EasyBikeLeasingPage\";\nimport EnraPage from \"./EnraPage\";\nimport EuroRadPage from \"./EuroRadPage\";\nimport FirmenRadlPage from \"./FirmenRadlPage\";\nimport GasGasBookATestRidePage from \"./GasGasBookATestRidePage\";\nimport GasGasConfiguratorPage from \"./GasGasConfiguratorPage\";\nimport GasGasPartsPage from \"./GasGasPartsPage\";\nimport GasGasWearPage from \"./GasGasWearPage\";\nimport HusqvarnaBookATestRidePage from \"./HusqvarnaBookATestRidePage\";\nimport HusqvarnaConfiguratorPage from \"./HusqvarnaConfiguratorPage\";\nimport HusqvarnaPartsPage from \"./HusqvarnaPartsPage\";\nimport HusqvarnaWearPage from \"./HusqvarnaWearPage\";\nimport JobRadPage from \"./JobRadPage\";\nimport KazenMaierPage from \"./KazenMaierPage\";\nimport KtmBookATestRidePage from \"./KtmBookATestRidePage\";\nimport KtmConfiguratorPage from \"./KtmConfiguratorPage\";\nimport KtmPartsPage from \"./KtmPartsPage\";\nimport KtmWearPage from \"./KtmWearPage\";\nimport LeaseABikePage from \"./LeaseABikePage\";\nimport LeaseMyBikePage from \"./LeaseMyBikePage\";\nimport LocalePage from \"./LocalePage\";\nimport MailPage from \"./MailPage\";\nimport MeinDienstradPage from \"./MeinDienstradPage\";\nimport MobileLicenseManager from \"./Mobile/MobileLicenseManager\";\nimport MobilePromotion from \"./Mobile/MobilePromotion\";\nimport Network from \"./Network/Network\";\nimport NewsPage from \"./NewsPage\";\nimport SetupPersonalCodePage from \"./PersonalCodePage\";\nimport Printer from \"./Printer/Printer\";\nimport SchwalbePartsAdviserPage from \"./SchwalbePartsAdviserPage\";\nimport ScreenBrightnessPage from \"./ScreenBrightnessPage\";\nimport SettingsNotFound from \"./SettingsNotFound\";\nimport SqLabProfilerPage from \"./SqLabProfilerPage\";\nimport SqLabProfilerRegisterPage from \"./SqLabProfilerRegisterPage\";\nimport StartupTimesPage from \"./StartupTimesPage\";\nimport SupportPage from \"./SupportPage\";\nimport UserOptionsPage from \"./UserOptionsPage\";\nimport VeloconnectPage from \"./VeloconnectPage\";\nimport VideoConferencePage from \"./VideoConferencePage\";\nimport VolumePage from \"./VolumePage\";\nimport Wawi from \"./Wawi/Wawi\";\nimport WertgarantiePage from \"./WertgarantiePage\";\nimport WertgarantieRegisterPage from \"./WertgarantieRegisterPage\";\nimport WilldienstradPage from \"./WilldienstradPage\";\nimport WuerthBikeLeasePage from \"./WuerthBikeLeasePage\";\nimport ZegPlusGarantiePage from \"./ZegPlusGarantiePage\";\n\nexport interface SettingsPageProps {\n  headerLeft?: React.ReactNode;\n  showHelp?: () => void;\n  hideHelp?: () => void;\n  isHelpVisible?: boolean;\n  parentPathName?: string; // e.g. \"settings\"\n  parentLabel?: string; // e.g. \"HÃ¤ndlerbereich\"\n}\n\nconst mapStateToProps = (state: State) => {\n  const env = selectInitializedEnv(state);\n  const settings = selectInitializedSettings(state);\n  const customerGroup = getCustomerGroupConfig(env.customerGroup);\n\n  return {\n    env,\n    features: settings.features,\n    featuresMeta: settings.featuresMeta,\n    customerGroup,\n    toastAlignment: state.toasts.toastAlignment,\n    isToolBikeFinancialCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikeFinancialCalculator, env.locale),\n    isToolBikeFrameSizeCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikeFrameSizeCalculator, env.locale),\n    isToolBikepriceCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikepriceCalculator, env.locale)\n  };\n};\n\nconst mapDispatchToProps = {\n  onPush: push,\n  setDealerAuthorized: actions.auth.setDealerAuthorized,\n  setToastAlignment: actions.toasts.setToastAlignment\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector> & SettingsPageProps;\n\ninterface RouteDefinition {\n  path: string;\n  component: React.ComponentType<any>;\n  exact?: boolean;\n  withoutSettingsLayout?: boolean;\n}\n\nconst routes: RouteDefinition[] = [\n  {\n    path: ROUTES.SETTINGS.INDEX,\n    component: NewsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.NETWORK_INDEX,\n    component: Network,\n    exact: false\n  },\n  {\n    path: ROUTES.SETTINGS.STARTUP_TIMES,\n    component: StartupTimesPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.BRAND_ACTIVATION,\n    component: SetupBrandsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.CUSTOMER_WORLD,\n    component: CustomerWorldPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.CUSTOMIZATION,\n    component: CustomizationPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.SUPPORT,\n    component: SupportPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.MOBILE_LICENSE_MANAGER,\n    component: MobileLicenseManager,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.MOBILE_PROMOTION,\n    component: MobilePromotion,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.VOLUME,\n    component: VolumePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.CODE,\n    component: SetupPersonalCodePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.SCREEN_BRIGHTNESS,\n    component: ScreenBrightnessPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.VELOCONNECT,\n    component: VeloconnectPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.MAIL,\n    component: MailPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.PRINTER_INDEX,\n    component: Printer,\n    exact: false\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_ENRA,\n    component: EnraPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_EURORAD,\n    component: EuroRadPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_ADAC,\n    component: AdacPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_ALTEOS,\n    component: AlteosPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BIKMO,\n    component: BikmoPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_JOBRAD,\n    component: JobRadPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_WUERTH_BIKE_LEASE,\n    component: WuerthBikeLeasePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BC_REMOTE_SHOP,\n    component: BcRemoteShopPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BICOSHOP,\n    component: BicoShopPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BODY_SCANNING,\n    component: BodyScanningPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_WERTGARANTIE,\n    component: WertgarantiePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_WERTGARANTIE_REGISTER,\n    component: WertgarantieRegisterPage,\n    exact: true,\n    withoutSettingsLayout: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_ZEG_PLUS_GARANTIE,\n    component: ZegPlusGarantiePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_LEASE_A_BIKE,\n    component: LeaseABikePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BUSINESSBIKE,\n    component: BusinessBikePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_EASY_BIKE_LEASING,\n    component: EasyBikeLeasingPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BIKELEASING,\n    component: BikeLeasingPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_LEASE_MY_BIKE,\n    component: LeaseMyBikePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_WILLDIENSTRAD,\n    component: WilldienstradPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_DEUTSCHE_DIENSTRAD,\n    component: DeutscheDienstradPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_KAZEN_MAIER,\n    component: KazenMaierPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_MEIN_DIENSTRAD,\n    component: MeinDienstradPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_FIRMENRADL,\n    component: FirmenRadlPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BODYSIZING,\n    component: BodySizingPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_SQLAB_PROFILER,\n    component: SqLabProfilerPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_SQLAB_PROFILER_REGISTER,\n    component: SqLabProfilerRegisterPage,\n    exact: true,\n    withoutSettingsLayout: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_KTM_CONFIGURATOR,\n    component: KtmConfiguratorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_KTM_PARTS,\n    component: KtmPartsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_KTM_WEAR,\n    component: KtmWearPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_KTM_BOOK_A_TESTRIDE,\n    component: KtmBookATestRidePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_CONFIGURATOR,\n    component: HusqvarnaConfiguratorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_BOOK_A_TESTRIDE,\n    component: HusqvarnaBookATestRidePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_PARTS,\n    component: HusqvarnaPartsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_WEAR,\n    component: HusqvarnaWearPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_GASGAS_BOOK_A_TESTRIDE,\n    component: GasGasBookATestRidePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_GASGAS_CONFIGURATOR,\n    component: GasGasConfiguratorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_GASGAS_PARTS,\n    component: GasGasPartsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_GASGAS_WEAR,\n    component: GasGasWearPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BOSCH_PARTS_ADVISER,\n    component: BoschPartsAdviserPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_SCHWALBE_PARTS_ADVISER,\n    component: SchwalbePartsAdviserPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.TOOL_BIKEPRICE_CALCULATOR,\n    component: BikepriceCalculatorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.TOOL_BIKE_FINANCIAL_CALCULATOR,\n    component: BikeFinancialCalculatorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.TOOL_BIKE_FRAME_SIZE_CALCULATOR,\n    component: BikeFrameSizeCalculatorPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.WAWI_INDEX,\n    component: Wawi,\n    exact: false\n  },\n  {\n    path: ROUTES.SETTINGS.USER_OPTIONS,\n    component: UserOptionsPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_ALTEOS_REGISTER,\n    component: AlteosRegisterPage,\n    exact: true,\n    withoutSettingsLayout: true\n  },\n  {\n    path: ROUTES.SETTINGS.THIRD_PARTY_BIKMO_REGISTER,\n    component: BikmoRegisterPage,\n    exact: true,\n    withoutSettingsLayout: true\n  },\n  {\n    path: ROUTES.SETTINGS.VIDEO_CONFERENCE,\n    component: VideoConferencePage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.ASSORTMENT_INDEX,\n    component: AssortmentIndexPage,\n    exact: true\n  },\n  {\n    path: ROUTES.SETTINGS.ASSORTMENT_EDIT,\n    component: AssortmentEditPage,\n    exact: true,\n    withoutSettingsLayout: true\n  },\n  {\n    path: ROUTES.SETTINGS.LOCALE,\n    component: LocalePage,\n    exact: true\n  }\n];\n\nconst findMatchingRouteDefinition = (pathname: string) =>\n  routes.find((route: RouteDefinition) => {\n    const match = matchPath(pathname, route);\n    return !!match;\n  });\n\nconst Settings = ({\n  onPush,\n  toastAlignment,\n  setToastAlignment,\n  setDealerAuthorized,\n  env,\n  features,\n  featuresMeta,\n  customerGroup,\n  isToolBikeFinancialCalculatorAvailable,\n  isToolBikeFrameSizeCalculatorAvailable,\n  isToolBikepriceCalculatorAvailable\n}: Props) => {\n  const activeBrands = useActiveBrands();\n  const { t } = useTranslation([\"kiosk\"]);\n  const [isAuthorized, setAuthorization] = React.useState(false);\n  const activeRef = React.useRef<HTMLAnchorElement>(null);\n\n  const location = useLocation();\n  const isHelpVisible = qs.parse(location.search, { ignoreQueryPrefix: true }).help === \"true\";\n\n  const { deviceType } = env;\n\n  const isVideoConferenceVisible = featuresMeta.videoConference.visible;\n  const isMailVisible = featuresMeta.mail.visible;\n  const isCustomAssortmentVisible = featuresMeta.customAssortment.visible;\n  const isWawiVisible = featuresMeta.wawi.visible;\n  const isMobileVisible = featuresMeta.mobile.visible;\n\n  const featuresVisible = {\n    videoConference: features.videoConferenceEnabled || isVideoConferenceVisible,\n    mail: features.mailEnabled || isMailVisible,\n    customAssortment: features.customAssortmentEnabled || isCustomAssortmentVisible,\n    wawi: features.wawiEnabled || isWawiVisible,\n    mobile: features.mobileEnabled || isMobileVisible\n  };\n\n  const externalToolsAvailable = externalTools.reduce(\n    (aggr, toolConfig) => ({\n      ...aggr,\n      [toolConfig.key]: isExternalToolAvailable(toolConfig, env, customerGroup, features, activeBrands.brandKeys)\n    }),\n    {} as Record<ExternalToolKey, boolean>\n  );\n\n  const updateToastLayout = React.useCallback(() => {\n    let nextToastAlignment = toastAlignment;\n    // Find matching route definition to set correct ToastLayout\n    const matchingRouteDefinition = findMatchingRouteDefinition(location.pathname);\n\n    if (!isAuthorized || matchingRouteDefinition?.withoutSettingsLayout) {\n      nextToastAlignment = \"center\";\n    } else if (isHelpVisible) {\n      nextToastAlignment = \"sidebar-right\";\n    } else {\n      nextToastAlignment = \"sidebar-left\";\n    }\n\n    if (nextToastAlignment !== toastAlignment) {\n      setToastAlignment(nextToastAlignment);\n    }\n  }, [location.pathname, isAuthorized, isHelpVisible, setToastAlignment, toastAlignment]);\n\n  React.useEffect(() => {\n    // Called on mount and whenever dependencies of updateToastLayout change\n    updateToastLayout();\n  }, [updateToastLayout]);\n\n  useOnUnmount(() => {\n    setDealerAuthorized(false);\n    setToastAlignment(\"center\");\n  });\n\n  useRedirectOnIdle(ROUTES.NAVIGATION.INDEX, {\n    timeout: config.kiosk.timeoutInMsBeforeRedirectFromIdleSettings,\n    toastOptions: {\n      title: t(\"kiosk:settings.redirectedToMainMenuShortlyTitle\"),\n      actionLabel: t(\"kiosk:settings.cancelRedirectButton\"),\n      kind: \"default\",\n      icon: icons.IconSmallHome\n    }\n  });\n\n  if (!isAuthorized) {\n    return <AuthPage setAuthorization={setAuthorization} allowMasterPin />;\n  }\n\n  const showHelp = () => {\n    onPush(overwriteQueryInPath(location, { help: \"true\" }));\n  };\n\n  const hideHelp = () => {\n    onPush(overwriteQueryInPath(location, { help: \"false\" }));\n  };\n\n  const handleLinkClick = (event: React.MouseEvent<HTMLElement>, href: string) => {\n    onPush(href);\n  };\n\n  const areToolsAvailable =\n    isToolBikepriceCalculatorAvailable ||\n    isToolBikeFinancialCalculatorAvailable ||\n    isToolBikeFinancialCalculatorAvailable;\n\n  const renderExternalTools = (): React.ReactNode => {\n    const navigationItems = (\n      <>\n        {externalToolsAvailable[ExternalToolKey.Adac] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_ADAC}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_ADAC}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                ADAC Fahrradversicherung\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Alteos] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_ALTEOS}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_ALTEOS}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Alteos E-Bike-Versicherung\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.BcRemoteShop] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BC_REMOTE_SHOP}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BC_REMOTE_SHOP}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                bc remote B2B Shop\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.BicoB2bShop] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BICOSHOP}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BICOSHOP}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                BIKE&amp;CO B2B Shop (Teile &amp; ZubehÃ¶r)\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Bikmo] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BIKMO}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BIKMO}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Bikmo\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Enra] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_ENRA}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_ENRA}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                ENRA\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.BodyScanningCrm] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BODY_SCANNING}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BODY_SCANNING}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Body Scanning CRM\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Smartfit] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BODYSIZING}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BODYSIZING}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Bikesizing by Smartfit&nbsp;&nbsp;\n                <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.addOn\")} />\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.SqlabProfiler] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_SQLAB_PROFILER}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_SQLAB_PROFILER}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                SQlab Profiler\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Wertgarantie] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_WERTGARANTIE}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_WERTGARANTIE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                linexo by Wertgarantie\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.ZegPlusGarantie] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_ZEG_PLUS_GARANTIE}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_ZEG_PLUS_GARANTIE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                ZEG Plus Garantie\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </>\n    );\n\n    return (\n      countChildrenWithFragments(navigationItems) > 0 && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.servicesAndPartners.groupLabel\")}>\n          {navigationItems}\n        </SidebarNavigationGroup>\n      )\n    );\n  };\n\n  const renderLeasingTools = (): React.ReactNode => {\n    const navigationItems = (\n      <>\n        {externalToolsAvailable[ExternalToolKey.BikeLeasing] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BIKELEASING}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BIKELEASING}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Bikeleasing\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.BusinessBike] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_BUSINESSBIKE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_BUSINESSBIKE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                BusinessBike\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.EasyBikeLeasing] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_EASY_BIKE_LEASING}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_EASY_BIKE_LEASING}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                easy-bike-leasing\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.DeutscheDienstrad] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_DEUTSCHE_DIENSTRAD}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_DEUTSCHE_DIENSTRAD}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Deutsche Dienstrad\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.EuroRad] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_EURORAD}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_EURORAD}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                eurorad\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.FirmenRadl] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_FIRMENRADL}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_FIRMENRADL}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                FirmenRadl\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.JobRad] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_JOBRAD}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_JOBRAD}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                JobRad\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.KazenMaier] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_KAZEN_MAIER}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_KAZEN_MAIER}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                KazenMaier\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.LeaseABike] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_LEASE_A_BIKE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_LEASE_A_BIKE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                Lease a Bike\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.LeaseMyBike] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_LEASE_MY_BIKE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_LEASE_MY_BIKE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                LeaseMyBike\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.Willdienstrad] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_WILLDIENSTRAD}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_WILLDIENSTRAD}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                willdienstrad.at\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.MeinDienstrad] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_MEIN_DIENSTRAD}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_MEIN_DIENSTRAD}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                mein-dienstrad.de\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.WuerthBikeLease] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_WUERTH_BIKE_LEASE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_WUERTH_BIKE_LEASE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                WÃ¼rth Bike Lease\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </>\n    );\n\n    return (\n      countChildrenWithFragments(navigationItems) > 0 && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.leasing.groupLabel\")}>\n          {navigationItems}\n        </SidebarNavigationGroup>\n      )\n    );\n  };\n\n  const renderConfiguratorTools = (): React.ReactNode => {\n    const navigationItems = (\n      <>\n        {externalToolsAvailable[ExternalToolKey.KtmConfigurator] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_KTM_CONFIGURATOR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_KTM_CONFIGURATOR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.configurators.ktmConfiguratorSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.HusqvarnaConfigurator] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_CONFIGURATOR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_CONFIGURATOR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.configurators.husqvarnaConfiguratorSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.GasGasConfigurator] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_CONFIGURATOR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_CONFIGURATOR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.configurators.gasGasConfiguratorSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </>\n    );\n\n    return (\n      countChildrenWithFragments(navigationItems) > 0 && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.configurators.groupLabel\")}>\n          {navigationItems}\n        </SidebarNavigationGroup>\n      )\n    );\n  };\n\n  const renderTestRideTools = (): React.ReactNode => {\n    const navigationItems = (\n      <>\n        {externalToolsAvailable[ExternalToolKey.KtmBookATestride] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_KTM_BOOK_A_TESTRIDE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_KTM_BOOK_A_TESTRIDE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.testRides.ktmBookATestRideSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.HusqvarnaBookATestride] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_BOOK_A_TESTRIDE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_BOOK_A_TESTRIDE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.testRides.husqvarnaBookATestRideSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.GasgasBookATestride] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_BOOK_A_TESTRIDE}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_BOOK_A_TESTRIDE}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.testRides.gasGasBookATestRideSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </>\n    );\n\n    return (\n      countChildrenWithFragments(navigationItems) > 0 && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.testRides.groupLabel\")}>\n          {navigationItems}\n        </SidebarNavigationGroup>\n      )\n    );\n  };\n\n  const renderPartsAndWearTools = (): React.ReactNode => {\n    const navigationItems = (\n      <>\n        {externalToolsAvailable[ExternalToolKey.KtmParts] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_KTM_PARTS}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_KTM_PARTS}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.ktmPartsSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.KtmWear] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_KTM_WEAR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_KTM_WEAR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.ktmWearSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.HusqvarnaParts] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_PARTS}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_PARTS}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.husqvarnaPartsSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.HusqvarnaWear] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_WEAR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_HUSQVARNA_WEAR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.husqvarnaWearSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n        {externalToolsAvailable[ExternalToolKey.GasGasParts] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_PARTS}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_PARTS}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.gasGasPartsSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n\n        {externalToolsAvailable[ExternalToolKey.GasGasWear] && (\n          <Route\n            path={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_WEAR}\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.THIRD_PARTY_GASGAS_WEAR}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.partsAndWear.gasGasWearSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </>\n    );\n\n    return (\n      countChildrenWithFragments(navigationItems) > 0 && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.partsAndWear.groupLabel\")}>\n          {navigationItems}\n        </SidebarNavigationGroup>\n      )\n    );\n  };\n\n  const navigation = (\n    <SidebarNavigation\n      header={\n        <IconLink\n          href={ROUTES.NAVIGATION.INDEX}\n          onClick={handleLinkClick}\n          icon={<Icon source={icons.IconSmallArrowLeft} />}\n          size=\"l\"\n        >\n          {t(\"kiosk:settings.exitDealerAreaButton\")}\n        </IconLink>\n      }\n      activeRef={activeRef}\n    >\n      <SidebarNavigationGroup title={t(\"kiosk:settings.groups.general.groupLabel\")}>\n        <Route\n          path={ROUTES.SETTINGS.INDEX}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.INDEX}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.general.startAndNewsSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.SUPPORT}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.SUPPORT}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.general.contactSupportSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n      </SidebarNavigationGroup>\n      <SidebarNavigationGroup title={t(\"kiosk:settings.groups.myDevice.groupLabel\")}>\n        {featuresVisible.videoConference && (\n          <Route\n            path={ROUTES.SETTINGS.VIDEO_CONFERENCE}\n            children={({ match }: RouteChildrenProps) => (\n              <Tooltip\n                isCloseable\n                preferredPosition={TooltipPosition.Top}\n                content={\n                  <Trans\n                    t={t}\n                    i18nKey=\"kiosk:settings.featureNotAvailableInLicense\"\n                    components={{ linebreak: <br /> }}\n                  />\n                }\n              >\n                {({ open: openTooltip }) => (\n                  <SidebarNavigationLink\n                    href={ROUTES.SETTINGS.VIDEO_CONFERENCE}\n                    onClick={features.videoConferenceEnabled ? handleLinkClick : openTooltip}\n                    active={!!match}\n                    activeRef={!!match ? activeRef : undefined}\n                  >\n                    {t(\"kiosk:settings.groups.myDevice.liveVideoAdviceSettingsPageLink\")}&nbsp;&nbsp;\n                    <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.plus\")} />\n                  </SidebarNavigationLink>\n                )}\n              </Tooltip>\n            )}\n          />\n        )}\n        <Route\n          path={ROUTES.SETTINGS.BRAND_ACTIVATION}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.BRAND_ACTIVATION}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.brandsAndModelYearsSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        {featuresVisible.customAssortment && (\n          <Route\n            path={ROUTES.SETTINGS.ASSORTMENT_INDEX}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <Tooltip\n                isCloseable\n                preferredPosition={TooltipPosition.Top}\n                content={\n                  <Trans\n                    t={t}\n                    i18nKey=\"kiosk:settings.featureNotAvailableInLicense\"\n                    components={{ linebreak: <br /> }}\n                  />\n                }\n              >\n                {({ open: openTooltip }) => (\n                  <SidebarNavigationLink\n                    href={ROUTES.SETTINGS.ASSORTMENT_INDEX}\n                    onClick={features.customAssortmentEnabled ? handleLinkClick : openTooltip}\n                    active={!!match}\n                    activeRef={!!match ? activeRef : undefined}\n                  >\n                    {t(\"kiosk:settings.groups.myDevice.assortmentSettingsPageLink\")}&nbsp;&nbsp;\n                    <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.plus\")} />\n                  </SidebarNavigationLink>\n                )}\n              </Tooltip>\n            )}\n          />\n        )}\n        <Route\n          path={ROUTES.SETTINGS.CUSTOMIZATION}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.CUSTOMIZATION}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.customizationSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.VELOCONNECT}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.VELOCONNECT}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.productAvailabilitiesSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        {featuresVisible.wawi && (\n          <Route\n            path={ROUTES.SETTINGS.WAWI_INDEX}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <Tooltip\n                isCloseable\n                preferredPosition={TooltipPosition.Top}\n                content={\n                  <Trans\n                    t={t}\n                    i18nKey=\"kiosk:settings.featureNotAvailableInLicense\"\n                    components={{ linebreak: <br /> }}\n                  />\n                }\n              >\n                {({ open: openTooltip }) => (\n                  <SidebarNavigationLink\n                    href={ROUTES.SETTINGS.WAWI_INDEX}\n                    onClick={features.wawiEnabled ? handleLinkClick : openTooltip}\n                    active={!!match}\n                    activeRef={!!match ? activeRef : undefined}\n                  >\n                    {t(\"kiosk:settings.groups.myDevice.erpSettingsPageLink\")}&nbsp;&nbsp;\n                    <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.plus\")} />\n                  </SidebarNavigationLink>\n                )}\n              </Tooltip>\n            )}\n          />\n        )}\n        <Route\n          path={ROUTES.SETTINGS.CODE}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.CODE}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.personalCodeSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.USER_OPTIONS}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.USER_OPTIONS}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.displayControlOptionsSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.CUSTOMER_WORLD}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.CUSTOMER_WORLD}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.myDevice.customerWorldSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n      </SidebarNavigationGroup>\n\n      {featuresVisible.mobile && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.mobile.groupLabel\")}>\n          <Route\n            path={features.mobileEnabled ? ROUTES.SETTINGS.MOBILE_LICENSE_MANAGER : ROUTES.SETTINGS.MOBILE_PROMOTION}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={\n                  features.mobileEnabled ? ROUTES.SETTINGS.MOBILE_LICENSE_MANAGER : ROUTES.SETTINGS.MOBILE_PROMOTION\n                }\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.mobile.licenseManagementSettingsPageLink\")}&nbsp;&nbsp;\n                <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.addOn\")} />\n              </SidebarNavigationLink>\n            )}\n          />\n        </SidebarNavigationGroup>\n      )}\n\n      <SidebarNavigationGroup title={t(\"kiosk:settings.groups.system.groupLabel\")}>\n        <Route\n          path={ROUTES.SETTINGS.LOCALE}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.LOCALE}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.system.regionAndLanguageSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.NETWORK_INDEX}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.NETWORK_INDEX}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.system.internetConnectionSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        {featuresVisible.mail && (\n          <Route\n            path={ROUTES.SETTINGS.MAIL}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <Tooltip\n                isCloseable\n                preferredPosition={TooltipPosition.Top}\n                content={\n                  <Trans\n                    t={t}\n                    i18nKey=\"kiosk:settings.featureNotAvailableInLicense\"\n                    components={{ linebreak: <br /> }}\n                  />\n                }\n              >\n                {({ open: openTooltip }) => (\n                  <SidebarNavigationLink\n                    href={ROUTES.SETTINGS.MAIL}\n                    onClick={features.mailEnabled ? handleLinkClick : openTooltip}\n                    active={!!match}\n                    activeRef={!!match ? activeRef : undefined}\n                  >\n                    {t(\"kiosk:settings.groups.system.eMailDispatchSettingsPageLink\")}&nbsp;&nbsp;\n                    <Badge size=\"s\" variant={!match ? \"accent\" : \"primary\"} label={t(\"kiosk:defaults.plus\")} />\n                  </SidebarNavigationLink>\n                )}\n              </Tooltip>\n            )}\n          />\n        )}\n        <Route\n          path={ROUTES.SETTINGS.PRINTER_INDEX}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.PRINTER_INDEX}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.system.printerSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.STARTUP_TIMES}\n          exact\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.STARTUP_TIMES}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.system.startupTimesSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        <Route\n          path={ROUTES.SETTINGS.VOLUME}\n          children={({ match }: RouteChildrenProps) => (\n            <SidebarNavigationLink\n              href={ROUTES.SETTINGS.VOLUME}\n              onClick={handleLinkClick}\n              active={!!match}\n              activeRef={!!match ? activeRef : undefined}\n            >\n              {t(\"kiosk:settings.groups.system.volumeSettingsPageLink\")}\n            </SidebarNavigationLink>\n          )}\n        />\n        {deviceType === DeviceType.OptiPlex7450 && (\n          <Route\n            path={ROUTES.SETTINGS.SCREEN_BRIGHTNESS}\n            exact\n            children={({ match }: RouteChildrenProps) => (\n              <SidebarNavigationLink\n                href={ROUTES.SETTINGS.SCREEN_BRIGHTNESS}\n                onClick={handleLinkClick}\n                active={!!match}\n                activeRef={!!match ? activeRef : undefined}\n              >\n                {t(\"kiosk:settings.groups.system.screenBrightnessSettingsPageLink\")}\n              </SidebarNavigationLink>\n            )}\n          />\n        )}\n      </SidebarNavigationGroup>\n      {areToolsAvailable && (\n        <SidebarNavigationGroup title={t(\"kiosk:settings.groups.tools.groupLabel\")}>\n          {isToolBikepriceCalculatorAvailable && (\n            <Route\n              path={ROUTES.SETTINGS.TOOL_BIKEPRICE_CALCULATOR}\n              children={({ match }: RouteChildrenProps) => (\n                <SidebarNavigationLink\n                  href={ROUTES.SETTINGS.TOOL_BIKEPRICE_CALCULATOR}\n                  onClick={handleLinkClick}\n                  active={!!match}\n                  activeRef={!!match ? activeRef : undefined}\n                >\n                  {t(\"kiosk:settings.groups.tools.usedEBikePriceCalculatorSettingsPageLink\")}\n                </SidebarNavigationLink>\n              )}\n            />\n          )}\n          {isToolBikeFinancialCalculatorAvailable && (\n            <Route\n              path={ROUTES.SETTINGS.TOOL_BIKE_FINANCIAL_CALCULATOR}\n              children={({ match }: RouteChildrenProps) => (\n                <SidebarNavigationLink\n                  href={ROUTES.SETTINGS.TOOL_BIKE_FINANCIAL_CALCULATOR}\n                  onClick={handleLinkClick}\n                  active={!!match}\n                  activeRef={!!match ? activeRef : undefined}\n                >\n                  {t(\"kiosk:settings.groups.tools.financialCalculatorSettingsPageLink\")}\n                </SidebarNavigationLink>\n              )}\n            />\n          )}\n          {isToolBikeFrameSizeCalculatorAvailable && (\n            <Route\n              path={ROUTES.SETTINGS.TOOL_BIKE_FRAME_SIZE_CALCULATOR}\n              children={({ match }: RouteChildrenProps) => (\n                <SidebarNavigationLink\n                  href={ROUTES.SETTINGS.TOOL_BIKE_FRAME_SIZE_CALCULATOR}\n                  onClick={handleLinkClick}\n                  active={!!match}\n                  activeRef={!!match ? activeRef : undefined}\n                >\n                  {t(\"kiosk:settings.groups.tools.frameSizeCalculatorSettingsPageLink\")}\n                </SidebarNavigationLink>\n              )}\n            />\n          )}\n          {externalToolsAvailable[ExternalToolKey.BoschPartsAdviser] && (\n            <Route\n              path={ROUTES.SETTINGS.THIRD_PARTY_BOSCH_PARTS_ADVISER}\n              children={({ match }: RouteChildrenProps) => (\n                <SidebarNavigationLink\n                  href={ROUTES.SETTINGS.THIRD_PARTY_BOSCH_PARTS_ADVISER}\n                  onClick={handleLinkClick}\n                  active={!!match}\n                  activeRef={!!match ? activeRef : undefined}\n                >\n                  {t(\"kiosk:settings.groups.tools.boschPartsAdviserSettingsPageLink\")}\n                </SidebarNavigationLink>\n              )}\n            />\n          )}\n          {externalToolsAvailable[ExternalToolKey.SchwalbePartsAdviser] && (\n            <Route\n              path={ROUTES.SETTINGS.THIRD_PARTY_SCHWALBE_PARTS_ADVISER}\n              children={({ match }: RouteChildrenProps) => (\n                <SidebarNavigationLink\n                  href={ROUTES.SETTINGS.THIRD_PARTY_SCHWALBE_PARTS_ADVISER}\n                  onClick={handleLinkClick}\n                  active={!!match}\n                  activeRef={!!match ? activeRef : undefined}\n                >\n                  {t(\"kiosk:settings.groups.tools.schwalbePartsAdviserSettingsPageLink\")}\n                </SidebarNavigationLink>\n              )}\n            />\n          )}\n        </SidebarNavigationGroup>\n      )}\n      {renderLeasingTools()}\n      {renderExternalTools()}\n      {renderConfiguratorTools()}\n      {renderTestRideTools()}\n      {renderPartsAndWearTools()}\n    </SidebarNavigation>\n  );\n\n  const headerLeft = isHelpVisible && (\n    <IconLink onClick={hideHelp} icon={<Icon source={icons.IconSmallBurger} />} size=\"l\">\n      {t(\"kiosk:settings.showMenuButton\")}\n    </IconLink>\n  );\n\n  const renderRoutes = (withLayout: boolean) => {\n    const switchRoutes = routes.filter(route =>\n      withLayout ? !route.withoutSettingsLayout : route.withoutSettingsLayout\n    );\n    return switchRoutes.map(route => (\n      <Route\n        key={route.path}\n        path={route.path}\n        exact={route.exact}\n        render={props => {\n          const Component = route.component;\n          const page = (\n            <Component\n              {...props}\n              headerLeft={headerLeft}\n              showHelp={showHelp}\n              hideHelp={hideHelp}\n              isHelpVisible={isHelpVisible}\n              parentPathName=\"settings\"\n              parentLabel={t(\"kiosk:settings.dealerAreaLabel\")}\n            />\n          );\n\n          return page;\n        }}\n      />\n    ));\n  };\n\n  return (\n    <Switch>\n      {renderRoutes(false)}\n      <Route\n        render={() => (\n          <SettingsPageLayout navigation={navigation} showNavigation={!isHelpVisible}>\n            <Switch>\n              {renderRoutes(true)}\n              <Route component={SettingsNotFound} />\n            </Switch>\n          </SettingsPageLayout>\n        )}\n      />\n    </Switch>\n  );\n};\n\nexport default connector(Settings);\n```\n\n```ts bc-desktop-client/src/client/commons/libs/queries/use-settings.ts\nimport { useCallback, useState } from \"react\";\nimport { useMutation, UseMutationOptions, useQueryClient } from \"@tanstack/react-query\";\nimport { FormikErrors, FormikHelpers, useFormik } from \"formik\";\nimport { isEqual } from \"lodash\";\n\nimport {\n  getSettings as getSettingsLib,\n  storeSetting as storeSettingLib\n} from \"../../../../commons/libs/settings-service\";\nimport { Bookmarks } from \"../../../../commons/types/bookmarks\";\nimport { Settings, ToolSetting } from \"../../../../commons/types/settings\";\nimport { ExternalToolKey } from \"../../../../commons/types/tool\";\nimport actions from \"../../actions\";\nimport sharedConfig from \"../../config/shared\";\nimport { hash } from \"../externals/hash\";\nimport useDispatch from \"../hooks/use-dispatch\";\nimport useOnMount from \"../hooks/use-on-mount\";\nimport useQuery, { UseQueryOptions } from \"../hooks/use-query\";\nimport useSelector from \"../hooks/use-selector\";\nimport useThrottle from \"../hooks/use-throttle\";\n\nimport * as select from \"./use-settings.selectors\";\n\nconst settingsQueryKey = [\"settings\"] as const;\nconst setSettingsMutationKey = [\"setSettings\"] as const;\n\ntype SettingsQueryOptions = Omit<Partial<UseQueryOptions<Settings>>, \"queryKey\" | \"queryFn\">;\n\ntype SetSettingsMutationVariables = {\n  path: Parameters<typeof storeSettingLib>[0];\n  value: Parameters<typeof storeSettingLib>[1];\n};\n\ntype SetSettingsMutationOptions = Omit<\n  Partial<UseMutationOptions<Settings, Error, SetSettingsMutationVariables>>,\n  \"mutationKey\" | \"mutationFn\"\n>;\n\nexport const useSettings = (options: SettingsQueryOptions = {}) => {\n  const queryClient = useQueryClient();\n  const dispatch = useDispatch();\n\n  // eslint-disable-next-line no-restricted-syntax -- This selector can be used during initialization while settings have already been fetched but `isInitialized` is still false\n  const reduxSettings = useSelector(state => state.settings.settings);\n\n  const query = useQuery({\n    ...options,\n    queryKey: settingsQueryKey,\n    queryFn: getSettingsLib,\n    staleTime: Infinity, // Keep the cache data, until we mutate the settings via `useSetSettings`.\n    onData: settings => {\n      options.onData?.(settings);\n\n      /**\n       * @todo BCD-7672 Replace `state.settings.settings` with `useSettings`\n       *\n       * During the migration from the redux settings store to the query settings store,\n       * we want to prevent unnecessary dispatching of `settings.received` actions, so\n       * we only dispatch it if the settings have changed.\n       * This allows us to use the `useSettings` hook in components and containers,\n       * without dispatching `settings.received` actions all the time.\n       */\n      if (!isEqual(reduxSettings, settings)) {\n        dispatch(actions.settings.received(settings));\n      }\n    },\n    onError: error => {\n      dispatch(actions.error.set(error));\n    }\n  });\n\n  const settings = query.data;\n  const assortmentPriceSettings = select.assortmentPriceSettings(settings);\n\n  const invalidateCache = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: settingsQueryKey });\n  }, [queryClient]);\n\n  return {\n    query,\n    assortmentPriceSettings,\n    invalidateCache\n  };\n};\n\nexport const useSetSettings = (options: SetSettingsMutationOptions = {}) => {\n  const queryClient = useQueryClient();\n  const dispatch = useDispatch();\n\n  const mutation = useMutation({\n    ...options,\n    mutationKey: setSettingsMutationKey,\n    mutationFn: ({ path, value }: SetSettingsMutationVariables) => storeSettingLib(path, value),\n    onSuccess: (data, variables, context) => {\n      queryClient.invalidateQueries({ queryKey: settingsQueryKey });\n      options.onSuccess?.(data, variables, context);\n    },\n    onError: error => {\n      dispatch(actions.error.set(error));\n    }\n  });\n\n  const mutate = mutation.mutate;\n\n  const setPersonalCode = useCallback(\n    (personalCode: string) => {\n      return mutate({ path: [\"personalCode\"], value: hash(personalCode) });\n    },\n    [mutate]\n  );\n\n  const setToolSettings = useCallback(\n    <T extends ToolSetting>(toolKey: ExternalToolKey) =>\n      (toolSettings: T) => {\n        return mutate({ path: [\"toolSettings\", toolKey], value: toolSettings });\n      },\n    [mutate]\n  );\n\n  const setBookmarks = useCallback(\n    (bookmarks: Bookmarks) => {\n      return mutate({ path: [\"bookmarks\"], value: bookmarks });\n    },\n    [mutate]\n  );\n\n  return {\n    mutation,\n    setPersonalCode,\n    setToolSettings,\n    setBookmarks\n  };\n};\n\ninterface UseToolSettingsOptions<TS> {\n  formik?: {\n    initialValues?: (toolSettings: TS) => TS;\n    onSubmit?: ({\n      values,\n      helpers,\n      setToolSettings\n    }: {\n      /** The current formik values. */\n      values: TS;\n      /** The original formik helpers */\n      helpers: FormikHelpers<TS>;\n      /** The function to set the tool settings with typed tool settings. */\n      setToolSettings: (toolSettings: TS) => void;\n    }) => Promise<void> | void;\n    validate?: ({\n      values,\n      errors\n    }: {\n      /** The current formik values. */\n      values: TS;\n      /** Initial empty, but typed error object to which the errors need to be appended to. */\n      errors: FormikErrors<TS>;\n    }) => FormikErrors<TS>;\n  };\n  query?: {\n    settings?: SettingsQueryOptions;\n    setSettings?: SetSettingsMutationOptions;\n  };\n}\n\n/** Time to throttle quickly changing loading states to avoid flickering for elements that depend on the loading states. */\nconst LOADING_STATE_THROTTLE_TIME = sharedConfig.shared.minLoadingTimeout;\n\n// BCD-7381 Improve Tool Config Type Association\nexport const useToolSettings = <TS extends ToolSetting = ToolSetting>(\n  toolKey: ExternalToolKey,\n  options: UseToolSettingsOptions<TS> = {}\n) => {\n  const settings = useSettings(options.query?.settings);\n  const setSettings = useSetSettings(options.query?.setSettings);\n\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n\n  const fallbackToolSettings = { meta: {} };\n  const currentToolSettings = settings.query.data?.toolSettings[toolKey] as TS;\n  const toolSettings = currentToolSettings ?? fallbackToolSettings;\n  const setToolSettings = setSettings.setToolSettings<TS>(toolKey);\n\n  const formik = useFormik<TS>({\n    enableReinitialize: true,\n    initialValues: options.formik?.initialValues?.(toolSettings) ?? toolSettings,\n    validate: (values: TS) => {\n      if (options.formik?.validate) {\n        const errors: FormikErrors<TS> = {};\n        return options.formik.validate({ values, errors });\n      } else {\n        return {};\n      }\n    },\n    onSubmit: async (values, helpers) => {\n      helpers.setSubmitting(true);\n\n      if (options.formik?.onSubmit) {\n        await options.formik.onSubmit({ values, helpers, setToolSettings });\n      } else {\n        setToolSettings({\n          ...values,\n          meta: {\n            ...values.meta,\n            touchedSettings: true\n          }\n        });\n      }\n\n      helpers.setSubmitting(false);\n      setHasSubmitted(true);\n    }\n  });\n\n  const isFetching = useThrottle(\n    settings.query.isFetching || setSettings.mutation.isPending || formik.isSubmitting,\n    LOADING_STATE_THROTTLE_TIME\n  );\n\n  const isSuccess = useThrottle(\n    setSettings.mutation.isSuccess || settings.query.isSuccess || hasSubmitted,\n    LOADING_STATE_THROTTLE_TIME\n  );\n\n  // Mark the tool as viewed if we visit the page.\n  useOnMount(() => {\n    if (!toolSettings.meta.viewedSettings) {\n      setToolSettings({\n        ...toolSettings,\n        meta: {\n          ...toolSettings.meta,\n          viewedSettings: true\n        }\n      });\n    }\n  });\n\n  return {\n    /** The raw query return object of `useSettings`. */\n    settingsQuery: settings,\n    /** The raw mutation return object of `useSetSettings`. */\n    setSettingsMutation: setSettings,\n    /** The current tool settings for the provided tool key. */\n    toolSettings,\n    /** The mutation function for setting the tool settings. */\n    setToolSettings,\n    /** The formik object for the tool settings form. */\n    formik,\n    /** Has the user tried to submit the form? */\n    hasSubmitted,\n    /** Convience property for checking whether the settings, the mutation is currently fetching or formik is submitting. */\n    isFetching,\n    /** Convience property for checking whether the settings or the mutation was successful. */\n    isSuccess\n  };\n};\n```\n\n```ts bc-desktop-client/src/client/commons/libs/queries/use-env.ts\nimport { getCustomerGroupConfig } from \"../../../../commons/libs/config\";\nimport { getEnv } from \"../../../../commons/libs/env-service\";\nimport { Env } from \"../../../../commons/types/env\";\nimport actions from \"../../actions\";\nimport useDispatch from \"../hooks/use-dispatch\";\nimport useQuery, { UseQueryOptions } from \"../hooks/use-query\";\n\nconst queryKey = [\"env\"] as const;\n\ntype Options = Omit<Partial<UseQueryOptions<Env>>, \"queryKey\" | \"queryFn\">;\n\nconst useEnv = (options: Options = {}) => {\n  const dispatch = useDispatch();\n\n  const query = useQuery({\n    ...options,\n    queryKey,\n    queryFn: getEnv,\n    // This does not change during normal user runtime, except for manipulations from technical support.\n    staleTime: 60 * 1000,\n    onSuccess: env => {\n      // TODO: BCD-7671 Replace `state.core.env` with `useEnv`\n      dispatch(actions.core.envReceived(env));\n      options.onSuccess?.(env);\n    }\n  });\n\n  const env = query.data;\n\n  const customerGroupConfig = env ? getCustomerGroupConfig(env.customerGroup) : undefined;\n\n  return {\n    query,\n    customerGroupConfig\n  };\n};\n\nexport default useEnv;\n```\n\n\nCan you please migrate the Settings.tsx page from the redux store to use the `useEnv` and `useSettings` hooks? \n\nYou can take an example from these conversions:\n\n```tsx bc-desktop-client/src/client/commons/container/ProductDetails/SpecificationsOverlay.tsx\nimport React from \"react\";\nimport { replace } from \"connected-react-router\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"react-router\";\n\nimport { byDefinedKeys } from \"../../../../commons/libs/filter-guards\";\nimport { getSpecFormatter } from \"../../../../commons/libs/formatters\";\nimport { filterSpecGroups } from \"../../../../commons/libs/specs\";\nimport { getSpecConfig } from \"../../../../commons/specs\";\nimport { Product, ProductKey, ProductType, SpecGroupKeyMap } from \"../../../../commons/specs/product\";\nimport * as icons from \"../../../../resources/icons\";\nimport Icon from \"../../components/Icon/Icon\";\nimport IconLink from \"../../components/IconLink/IconLink\";\nimport SpecsItem from \"../../components/SpecsList/SpecsItem\";\nimport SpecsList from \"../../components/SpecsList/SpecsList\";\nimport SpecsListLayout from \"../../components/SpecsListLayout/SpecsListLayout\";\nimport TabBarOverlay from \"../../components/TabBarOverlay/TabBarOverlay\";\nimport useDispatch from \"../../libs/hooks/use-dispatch\";\nimport { useMediaQuery } from \"../../libs/hooks/use-media-query\";\nimport useOnMount from \"../../libs/hooks/use-on-mount\";\nimport { buildPath } from \"../../libs/path\";\nimport { useSettings } from \"../../libs/queries/use-settings\";\nimport { ROUTES } from \"../../routes\";\nimport ProductTitlePartial from \"../partials/ProductTitlePartial\";\nimport { useTrackingContext } from \"../utils/tracking-context\";\n\ninterface Props {\n  product: Product;\n}\n\nconst SpecificationsOverlay = ({ product }: Props) => {\n  const { t, i18n } = useTranslation([\"commons\"]);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const breakpoints = useMediaQuery();\n  const isMobile = !breakpoints.l;\n  const { mixpanel } = useTrackingContext();\n  const settings = useSettings();\n\n  useOnMount(() => {\n    mixpanel?.trackProductSpecificationsOpened(product);\n\n    return () => {\n      mixpanel?.trackProductSpecificationsClosed(product);\n    };\n  });\n\n  const handleLinkClick = (_event: React.MouseEvent<HTMLElement>, href: string) => {\n    dispatch(replace(href, location?.state));\n  };\n\n  const productType = product[ProductKey.ProductType];\n  const specConfig = getSpecConfig(productType);\n\n  const specFormatter = settings.query.data?.customization\n    ? getSpecFormatter(productType, specConfig.specDefinitions, i18n, settings.query.data.customization)\n    : undefined;\n\n  const filteredSpecGroups = filterSpecGroups(\n    specConfig.specGroups,\n    settings.query.data?.customization.showPrices || settings.query.data?.customization.showPricesFeaturesOnly\n  );\n\n  return (\n    <TabBarOverlay\n      headerLeft={\n        <IconLink\n          size={isMobile ? \"s\" : \"base\"}\n          href={buildPath(ROUTES.PRODUCT_DETAILS.INDEX, { id: product[ProductKey.ProductId] })}\n          icon={<Icon source={icons.IconSmallAngleDown} />}\n          onClick={handleLinkClick}\n          classNames={[\"u-extended-click-area\"]}\n        >\n          {isMobile\n            ? t(\"commons:specificationsOverlayProductDetails.closeButton\")\n            : t(\"commons:specificationsOverlayProductDetails.closeHeadlineButton\", {\n                headline: t(\"commons:specificationsOverlayProductDetails.headline\")\n              })}\n        </IconLink>\n      }\n      headerCenter={\n        <ProductTitlePartial\n          product={product}\n          minFontSize={isMobile ? 16 : undefined}\n          maxFontSize={isMobile ? 20 : undefined}\n        />\n      }\n    >\n      <SpecsListLayout>\n        {filteredSpecGroups\n          .map(specGroup => {\n            // Limitation of TypeScript:\n            // https://github.com/microsoft/TypeScript/issues/57388\n            const tKey = `commons:specs.${productType}.specGroups.${specGroup.key}` as keyof {\n              [T in ProductType as `commons:specs.${T}.specGroups.${SpecGroupKeyMap[T]}`]: null;\n            };\n            return (\n              <SpecsList headline={t(tKey)} key={specGroup.key}>\n                {specGroup.specKeys\n                  .map(specKey => ({\n                    specKey,\n                    label: specFormatter?.formatLabel(specKey),\n                    value: specFormatter?.formatProductValue(specKey, product)\n                  }))\n                  .filter(byDefinedKeys(\"value\", \"label\"))\n                  .map(({ specKey, label, value }) => (\n                    <SpecsItem key={String(specKey)} label={label}>\n                      {value}\n                    </SpecsItem>\n                  ))}\n              </SpecsList>\n            );\n          })\n          .filter(element => element.props.children.length > 0)}\n      </SpecsListLayout>\n    </TabBarOverlay>\n  );\n};\n\nexport default SpecificationsOverlay;\n```\n\n```tsx bc-desktop-client/src/client/commons/container/ProductFinder/FilterModalPartial.tsx\nimport React from \"react\";\nimport { ceil, floor, isEqual, partition } from \"lodash\";\nimport * as R from \"ramda\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { formatConcealedModelYear } from \"../../../../commons/libs/formatters\";\nimport { getBrandLogoUrl } from \"../../../../commons/libs/resource-paths\";\nimport { getSpecConfig } from \"../../../../commons/specs\";\nimport { BicycleSpecKey, CustomBicycleFilterKey } from \"../../../../commons/specs/bicycle\";\nimport {\n  ActiveFilters,\n  FilterConfigConstKeys,\n  FilterConfigItem,\n  FilterKey,\n  FilterValue,\n  ProductFilterValues,\n  RangeFilterValue\n} from \"../../../../commons/specs/filters\";\nimport { MotorcycleSpecKey } from \"../../../../commons/specs/motorcycle\";\nimport {\n  CategoryGroupDefinition,\n  CategoryGroupKeyMap,\n  CategoryMap,\n  ProductSpecKey,\n  ProductType\n} from \"../../../../commons/specs/product\";\nimport * as icons from \"../../../../resources/icons\";\nimport smartfitLogoImage from \"../../../../resources/images/body-sizing/smartfit-logo.svg\";\nimport useSelector from \"../../../kiosk/libs/hooks/use-selector\";\nimport Badge from \"../../components/Badge/Badge\";\nimport CheckboxListItem from \"../../components/CheckboxListItem/CheckboxListItem\";\nimport CheckboxListItemWithIcon from \"../../components/CheckboxListItemWithIcon/CheckboxListItemWithIcon\";\nimport CheckboxListItemWithImage from \"../../components/CheckboxListItemWithImage/CheckboxListItemWithImage\";\nimport FilterModal from \"../../components/FilterModal/FilterModal\";\nimport FilterModalCustomContent from \"../../components/FilterModal/FilterModalCustomContent\";\nimport FilterModalModelYearValues from \"../../components/FilterModal/FilterModalModelYearValues\";\nimport FilterModalValues from \"../../components/FilterModal/FilterModalValues\";\nimport Icon from \"../../components/Icon/Icon\";\nimport Image from \"../../components/Image/Image\";\nimport LoadingIndicator from \"../../components/LoadingIndicator/LoadingIndicator\";\nimport RadioListItem from \"../../components/RadioListItem/RadioListItem\";\nimport TileIconButton from \"../../components/TileIconButton/TileIconButton\";\nimport config from \"../../config\";\nimport {\n  addActiveFilterValue,\n  clearActiveFilter,\n  getActiveFilterValues,\n  isActiveFilter,\n  isFilterItemActive,\n  removeActiveFilterValue,\n  setActiveFilter\n} from \"../../libs/filters\";\nimport { useSettings } from \"../../libs/queries/use-settings\";\nimport * as selectors from \"../../libs/selectors\";\n\nimport AvailabilityFilterModalPartial from \"./AvailabilityFilterModalPartial\";\nimport BodySizingFilterModalPartial from \"./BodySizingFilterModalPartial\";\nimport ColorFilterModalPartial from \"./ColorFilterModalPartial\";\nimport ForkSuspensionTravelFilterModalPartial from \"./ForkSuspensionTravelFilterModalPartial\";\nimport PriceFilterModalPartial from \"./PriceFilterModalPartial\";\nimport RangeFilterModalPartial from \"./RangeFilterModalPartial\";\n\ntype Props<Type extends ProductType = ProductType> = {\n  productType: Type;\n  isProductLoading: boolean;\n  isOpen: boolean;\n  activeFilters: ActiveFilters<Type>;\n  onFilterChange: (activeFilters: ActiveFilters<Type>) => void;\n  clearFilter?: (filterKey: FilterKey<ProductType>) => void;\n  filterValues: ProductFilterValues<Type, FilterKey<Type>>;\n  filterKey: FilterKey<Type>;\n  filterConfig: FilterConfigItem<Type, FilterKey<Type>>;\n  onClose: () => void;\n  alignRight?: boolean;\n  variantsLength: number;\n  onOpenChange: (isOpen: boolean) => void;\n  highlightedBrandKeys: string[];\n};\n\nconst FilterModalPartial = <Type extends ProductType>({\n  isProductLoading,\n  productType,\n  isOpen = false,\n  onOpenChange,\n  activeFilters,\n  onFilterChange,\n  clearFilter,\n  filterKey,\n  filterValues: productFilterValues,\n  filterConfig,\n  onClose,\n  alignRight = false,\n  variantsLength,\n  highlightedBrandKeys\n}: Props<Type>) => {\n  const { t, i18n } = useTranslation([\"commons\"]);\n  const settings = useSettings();\n\n  const bodySizingEnabled = useSelector(selectors.selectIsBodySizingEnabled);\n  const bodySizingBodyValues = useSelector(state => state.session.bodyValues);\n\n  React.useEffect(() => {\n    onOpenChange(isOpen);\n  }, [isOpen, onOpenChange]);\n\n  const filterKeyString = filterKey.toString();\n  const filterValues = productFilterValues[filterKey] ?? [];\n\n  const getTitleKey = (filterKey: FilterKey<ProductType>) => {\n    return `commons:productFilterConfig.${productType}.productFilter.${filterKey}.title` as keyof {\n      [T in ProductType as `commons:productFilterConfig.${T}.productFilter.${FilterConfigConstKeys<T>}.title`]: null;\n    };\n  };\n\n  const getTitle = (filterKey: FilterKey<Type>) => {\n    if (filterKey === ProductSpecKey.ModelYear) {\n      const modelYearBaseKey =\n        `commons:productFilterConfig.${productType}.productFilter.${ProductSpecKey.ModelYear}` as const;\n      const modelYearTitleKey = `${modelYearBaseKey}.title` as const;\n      const releaseYearTitleKey = `${modelYearBaseKey}.releaseYearTitle` as const;\n\n      return settings.query.data?.customization?.modelYearDisplay.term === \"modelYear\"\n        ? t(modelYearTitleKey)\n        : t(releaseYearTitleKey);\n    }\n\n    return t(getTitleKey(filterKey as FilterKey<ProductType>));\n  };\n\n  const descriptionKey =\n    `commons:productFilterConfig.${productType}.productFilter.${filterKeyString}.description` as keyof {\n      [T in ProductType as `commons:productFilterConfig.${T}.productFilter.${FilterConfigConstKeys<T>}.description`]: null;\n    };\n\n  const title = getTitle(filterKey);\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- Description is optional\n  // @ts-ignore\n  const description: string = i18n.exists(descriptionKey) ? t(descriptionKey) : \"\";\n\n  switch (filterConfig.type) {\n    case \"default\":\n      switch (filterKey) {\n        case ProductSpecKey.BrandKey: {\n          const [highlightedBrands, nonHighlightedBrands] = partition(filterValues, filterValue => {\n            return highlightedBrandKeys.includes(filterValue.value);\n          });\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues justifyContent=\"start\">\n                {[...highlightedBrands, ...nonHighlightedBrands].map(({ value: brandKey }) => {\n                  const isActive = isActiveFilter(activeFilters, filterKey, brandKey);\n\n                  const handleClick = () =>\n                    onFilterChange(\n                      isActive\n                        ? removeActiveFilterValue(activeFilters, filterKey, brandKey)\n                        : addActiveFilterValue(activeFilters, filterKey, brandKey)\n                    );\n\n                  return (\n                    <CheckboxListItemWithImage\n                      key={`${filterKeyString}-${brandKey}`}\n                      imageUrl={getBrandLogoUrl(brandKey)}\n                      imageWidth=\"m\"\n                      imageAspectRatio={21 / 9}\n                      outline\n                      active={isActive}\n                      badge={\n                        highlightedBrandKeys.includes(brandKey) ? <Icon source={icons.IconSmallHighlight} /> : undefined\n                      }\n                      onClick={handleClick}\n                    />\n                  );\n                })}\n              </FilterModalValues>\n            </FilterModal>\n          );\n        }\n\n        case BicycleSpecKey.PrimaryColor: {\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <ColorFilterModalPartial\n                onFilterChange={onFilterChange as (activeFilters: ActiveFilters<ProductType.Bicycle>) => void}\n                activeFilters={activeFilters as ActiveFilters<ProductType.Bicycle>}\n                filterValues={filterValues}\n              />\n            </FilterModal>\n          );\n        }\n\n        case ProductSpecKey.ModelYear:\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalModelYearValues\n                defaultValue={\n                  <RadioListItem\n                    outline\n                    label={t(\"commons:filterModalPartialProductFinder.modelYear.latestLabel\")}\n                    active={R.either(R.isNil, R.isEmpty)(getActiveFilterValues(activeFilters, filterKey))}\n                    onClick={() => onFilterChange(clearActiveFilter(activeFilters, filterKey))}\n                  />\n                }\n              >\n                {filterValues.map(filterValue => {\n                  const active = isActiveFilter(activeFilters, filterKey, filterValue.value);\n                  return (\n                    <CheckboxListItem\n                      key={`${filterKeyString}-${filterValue.value}`}\n                      outline\n                      label={\n                        settings.query.data?.customization?.modelYearDisplay.concealed\n                          ? formatConcealedModelYear(\n                              filterValue.value,\n                              settings.query.data?.customization?.modelYearDisplay.term\n                            )\n                          : filterValue.label\n                      }\n                      active={active}\n                      onClick={() =>\n                        onFilterChange(\n                          active\n                            ? removeActiveFilterValue(activeFilters, filterKey, filterValue.value)\n                            : addActiveFilterValue(activeFilters, filterKey, filterValue.value)\n                        )\n                      }\n                    />\n                  );\n                })}\n              </FilterModalModelYearValues>\n            </FilterModal>\n          );\n\n        case ProductSpecKey.CategoryKey: {\n          const specConfig = getSpecConfig(productType);\n\n          const categoryGroupsWithFilterModalValues: CategoryGroupDefinition[] = specConfig.categoryGroups\n            .map(({ categories, ...categoryGroupRest }) => ({\n              ...categoryGroupRest,\n              categories: categories.filter(category => filterValues.find(({ value }) => value === category))\n            }))\n            .filter(({ categories }) => categories.length > 0);\n\n          const onClick = (isActive: boolean, value: FilterValue<Type, ProductSpecKey.CategoryKey>) => {\n            const nextFilters = isActive\n              ? removeActiveFilterValue(activeFilters, ProductSpecKey.CategoryKey, value)\n              : addActiveFilterValue(activeFilters, ProductSpecKey.CategoryKey, value);\n\n            onFilterChange(nextFilters as ActiveFilters<Type>);\n          };\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              {categoryGroupsWithFilterModalValues.map(({ key, categories, productType: groupProductType }) => {\n                return (\n                  <FilterModalValues\n                    key={key}\n                    title={t(\n                      `commons:specs.${groupProductType}.categoryGroup.${key}` as keyof {\n                        [T in ProductType as `commons:specs.${T}.categoryGroup.${CategoryGroupKeyMap[T]}`]: null;\n                      }\n                    )}\n                    justifyContent=\"start\"\n                  >\n                    {(categories as FilterValue<Type, ProductSpecKey.CategoryKey>[]).map(category => {\n                      const isActive = isActiveFilter(activeFilters, ProductSpecKey.CategoryKey, category);\n\n                      return (\n                        <CheckboxListItem\n                          key={`${filterKeyString}-${category}`}\n                          outline\n                          label={t(\n                            `commons:specs.${groupProductType}.categories.${category}.default` as keyof {\n                              [T in ProductType as `commons:specs.${T}.categories.${CategoryMap[T]}.default`]: null;\n                            }\n                          )}\n                          active={isActive}\n                          onClick={() => onClick(isActive, category)}\n                        />\n                      );\n                    })}\n                  </FilterModalValues>\n                );\n              })}\n            </FilterModal>\n          );\n        }\n\n        case ProductSpecKey.AutomaticAssortment: {\n          const veloconnectAssortmentFilterValues = productFilterValues[ProductSpecKey.VeloconnectAssortment] ?? [];\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              loadingIndicator={isProductLoading ? <LoadingIndicator size=\"s\" /> : undefined}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <AvailabilityFilterModalPartial\n                activeFilters={activeFilters}\n                automaticAssortmentFilterValues={filterValues}\n                veloconnectAssortmentFilterValues={veloconnectAssortmentFilterValues}\n                onFilterChange={onFilterChange}\n                clearFilter={clearFilter}\n              />\n            </FilterModal>\n          );\n        }\n\n        case BicycleSpecKey.FrameTypeKey: {\n          const frameTypeFilters = [\n            {\n              key: \"diamond\",\n              icon: icons.IconFilterFrameTypeDiamond,\n              value: \"DIAMANT\"\n            },\n            {\n              key: \"trapeze\",\n              icon: icons.IconFilterFrameTypeTrapezoid,\n              value: \"TRAPEZ\"\n            },\n            {\n              key: \"wave\",\n              icon: icons.IconFilterFrameTypeWave,\n              value: \"WAVE\"\n            }\n          ];\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues>\n                {frameTypeFilters.map(({ key, icon, value }) => {\n                  const filterValueKey = `commons:productFilterConfig.${productType}.productFilter.${filterKeyString}.filter.${key}.title`;\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  const filterValueLabel: string = i18n.exists(filterValueKey) ? t(filterValueKey) : \"\";\n\n                  // TODO: This partial should be rebuilt to be more generic\n                  // `as` is used to cast the type to ProductType.Bicycle, because the current implementation is only used for bicycles\n                  const active = isActiveFilter<ProductType.Bicycle, BicycleSpecKey.FrameTypeKey>(\n                    activeFilters as ActiveFilters<ProductType.Bicycle>,\n                    filterKey,\n                    value\n                  );\n\n                  return (\n                    <CheckboxListItemWithIcon\n                      key={`${filterKeyString}-${key}`}\n                      icon={icon}\n                      outline\n                      label={filterValueLabel}\n                      active={active}\n                      onClick={() =>\n                        onFilterChange(\n                          (active\n                            ? removeActiveFilterValue<ProductType.Bicycle, BicycleSpecKey.FrameTypeKey>(\n                                activeFilters as ActiveFilters<ProductType.Bicycle>,\n                                filterKey,\n                                value\n                              )\n                            : addActiveFilterValue<ProductType.Bicycle, BicycleSpecKey.FrameTypeKey>(\n                                activeFilters as ActiveFilters<ProductType.Bicycle>,\n                                filterKey,\n                                value\n                              )) as ActiveFilters<Type>\n                        )\n                      }\n                    />\n                  );\n                })}\n              </FilterModalValues>\n            </FilterModal>\n          );\n        }\n\n        // TODO Future: This should be a default filter with boolean-like labeled values from labeledValues content service api\n        case ProductSpecKey.ConfiguratorUrl:\n        case MotorcycleSpecKey.Abs: {\n          const value = \"true\" as FilterValue<typeof productType, typeof filterKey>;\n          const filterValueKey = `commons:productFilterConfig.${productType}.productFilter.${filterKeyString}.filter.${value}.title`;\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const filterValueLabel: string = i18n.exists(filterValueKey) ? t(filterValueKey) : \"\";\n          const active = isActiveFilter(activeFilters, filterKey, value);\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues>\n                <CheckboxListItem\n                  key={`${filterKeyString}-${value}`}\n                  outline\n                  label={filterValueLabel}\n                  active={active}\n                  onClick={() =>\n                    onFilterChange(\n                      active\n                        ? removeActiveFilterValue(activeFilters, filterKey, value)\n                        : addActiveFilterValue(activeFilters, filterKey, value)\n                    )\n                  }\n                />\n              </FilterModalValues>\n            </FilterModal>\n          );\n        }\n\n        default:\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues>\n                {filterValues.map(filterValue => {\n                  const active = isActiveFilter(activeFilters, filterKey, filterValue.value);\n\n                  return (\n                    <CheckboxListItem\n                      key={`${filterKeyString}-${filterValue.value}`}\n                      outline\n                      label={filterValue.label}\n                      active={active}\n                      onClick={() =>\n                        onFilterChange(\n                          active\n                            ? removeActiveFilterValue(activeFilters, filterKey, filterValue.value)\n                            : addActiveFilterValue(activeFilters, filterKey, filterValue.value)\n                        )\n                      }\n                    />\n                  );\n                })}\n              </FilterModalValues>\n            </FilterModal>\n          );\n      }\n\n    case \"range\": {\n      type RangeValue = FilterValue<Type, typeof filterKey>[] & RangeFilterValue;\n      const rangeValue = getActiveFilterValues(activeFilters, filterKey) as RangeValue;\n\n      switch (filterKey) {\n        case ProductSpecKey.Price: {\n          const roundedFromLimit = floor(filterValues[0].value, -1);\n          const roundedToLimit = ceil(filterValues[filterValues.length - 1].value, -1);\n\n          const handleOnChange = (priceRange: RangeFilterValue): void => {\n            const initialPriceRange: RangeFilterValue = [roundedFromLimit, roundedToLimit];\n\n            const priceRangeIsInitialValue: boolean = isEqual(priceRange, initialPriceRange);\n\n            if (priceRangeIsInitialValue) {\n              // to remove the active badge on the price filter FilterListItem\n              onFilterChange(clearActiveFilter(activeFilters, filterKey));\n            } else {\n              onFilterChange(setActiveFilter(activeFilters, filterKey, priceRange as RangeValue));\n            }\n          };\n\n          const filterValuesToRender: RangeFilterValue =\n            rangeValue?.length === 2 ? rangeValue : [roundedFromLimit, roundedToLimit];\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues>\n                {settings.query.data?.currency && (\n                  <PriceFilterModalPartial\n                    rangeLimitFrom={roundedFromLimit}\n                    rangeLimitTo={roundedToLimit}\n                    priceActiveFilters={filterValuesToRender}\n                    onChange={handleOnChange}\n                    currency={settings.query.data.currency}\n                  />\n                )}\n              </FilterModalValues>\n            </FilterModal>\n          );\n        }\n\n        case BicycleSpecKey.ForkSuspensionTravel: {\n          {\n            const rangeFrom: number = 1;\n            const rangeTo: number = 10_000;\n\n            const forkSuspensionRangeValue: RangeFilterValue =\n              rangeValue?.length === 2 ? (rangeValue as RangeFilterValue) : [rangeFrom, rangeTo];\n\n            const handleRangeChange = (range: RangeFilterValue): void => {\n              if (isEqual(range, [rangeFrom, rangeTo])) {\n                onFilterChange(clearActiveFilter(activeFilters, filterKey));\n              } else {\n                onFilterChange(setActiveFilter(activeFilters, filterKey, range as RangeValue));\n              }\n            };\n\n            if (productType === ProductType.Bicycle) {\n              return (\n                <FilterModal\n                  alignRight={alignRight}\n                  title={title}\n                  description={description}\n                  closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n                >\n                  <ForkSuspensionTravelFilterModalPartial\n                    rangeFrom={rangeFrom}\n                    rangeTo={rangeTo}\n                    forkSuspensionRangeValue={forkSuspensionRangeValue}\n                    onChange={handleRangeChange}\n                  />\n                </FilterModal>\n              );\n            }\n          }\n        }\n\n        // eslint-disable-next-line no-fallthrough -- Allow fallthrough of ForkSuspensionTravel if not a bicycle\n        default: {\n          let rangeMin = Math.floor(filterValues[0].value);\n          let rangeMax = Math.ceil(filterValues[filterValues.length - 1].value);\n\n          // If rangeMin and rangeMax is the same for now lets just add a bit of range on both sides to keep the RangeField interactive.\n          if (rangeMin === rangeMax) {\n            rangeMin = Math.floor(0.9 * rangeMin);\n            rangeMax = Math.ceil(1.1 * rangeMax);\n          }\n\n          const value: number[] = rangeValue?.length === 2 ? (rangeValue as number[]) : [rangeMin, rangeMax];\n\n          const disableRangeValue = [0, 0];\n          const isDisableRangeValue = !!filterConfig.canDisable && isEqual(value, disableRangeValue);\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalValues>\n                <RangeFilterModalPartial\n                  disabled={isDisableRangeValue}\n                  min={isDisableRangeValue ? 0 : rangeMin}\n                  max={rangeMax}\n                  values={[value[0], value[1]]}\n                  onChange={values => onFilterChange(setActiveFilter(activeFilters, filterKey, values as RangeValue))}\n                />\n              </FilterModalValues>\n              {filterConfig.canDisable && (\n                <CheckboxListItem\n                  outline\n                  label={t(\"commons:filterModalPartialProductFinder.range.withoutFilterButton\", {\n                    filterName: title\n                  })}\n                  active={isDisableRangeValue}\n                  onClick={\n                    isDisableRangeValue\n                      ? () =>\n                          onFilterChange(setActiveFilter(activeFilters, filterKey, [rangeMin, rangeMax] as RangeValue))\n                      : () => onFilterChange(setActiveFilter(activeFilters, filterKey, disableRangeValue as RangeValue))\n                  }\n                />\n              )}\n            </FilterModal>\n          );\n        }\n      }\n    }\n\n    case \"custom\": {\n      switch (filterKey) {\n        case CustomBicycleFilterKey.Carrier: {\n          const carrierFilters = [\n            {\n              key: BicycleSpecKey.FrontCarrier,\n              filters: [\n                {\n                  key: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  key: \"no\",\n                  value: \"false\"\n                }\n              ]\n            },\n            {\n              key: BicycleSpecKey.Carrier,\n              filters: [\n                {\n                  key: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  key: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ] as const;\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              limitHeight\n              title={title}\n              description={description}\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              {carrierFilters.map(({ filters, key }) => {\n                // TODO: This partial should be rebuilt to be more generic\n                // `as` is used to cast the type to ProductType.Bicycle, because the current implementation is only used for bicycles\n                const [[activeFilterValue], otherFilterValues] = partition(\n                  getActiveFilterValues<ProductType.Bicycle, CustomBicycleFilterKey.Carrier>(\n                    activeFilters as ActiveFilters<ProductType.Bicycle>,\n                    filterKey\n                  ),\n                  value => value.startsWith(key)\n                );\n\n                const unsetValue = !activeFilterValue;\n\n                const filterGroupTitle = t(\n                  `commons:productFilterConfig.${ProductType.Bicycle}.productFilter.${CustomBicycleFilterKey.Carrier}.filter.${key}.title`\n                );\n\n                return (\n                  <FilterModalValues key={key} title={filterGroupTitle}>\n                    <RadioListItem\n                      key={`${key}-item`}\n                      outline\n                      label={t(\"commons:filterModalPartialProductFinder.carrier.noMatterLabel\")}\n                      active={unsetValue}\n                      onClick={() =>\n                        onFilterChange(\n                          removeActiveFilterValue<ProductType.Bicycle, CustomBicycleFilterKey.Carrier>(\n                            activeFilters as ActiveFilters<ProductType.Bicycle>,\n                            filterKey,\n                            activeFilterValue\n                          ) as ActiveFilters<Type>\n                        )\n                      }\n                    />\n                    {filters.map(({ key: filterItemKey, value: filterItemValue }) => {\n                      const value = `${key}-${filterItemValue}`;\n\n                      const active = isActiveFilter<ProductType.Bicycle, CustomBicycleFilterKey.Carrier>(\n                        activeFilters as ActiveFilters<ProductType.Bicycle>,\n                        filterKey,\n                        value\n                      );\n\n                      const filterValueLabel = t(\n                        `commons:productFilterConfig.${ProductType.Bicycle}.productFilter.${CustomBicycleFilterKey.Carrier}.filter.${key}.filter.${filterItemKey}`\n                      );\n\n                      return (\n                        <RadioListItem\n                          key={`${key}-${filterItemKey}`}\n                          outline\n                          label={filterValueLabel}\n                          active={active}\n                          onClick={() =>\n                            onFilterChange(\n                              setActiveFilter<ProductType.Bicycle, CustomBicycleFilterKey.Carrier>(\n                                activeFilters as ActiveFilters<ProductType.Bicycle>,\n                                filterKey,\n                                [value, ...otherFilterValues]\n                              ) as ActiveFilters<Type>\n                            )\n                          }\n                        />\n                      );\n                    })}\n                  </FilterModalValues>\n                );\n              })}\n            </FilterModal>\n          );\n        }\n\n        case CustomBicycleFilterKey.Sizing: {\n          // TODO: This partial should be rebuilt to be more generic\n          // `as` is used to cast the type to ProductType.Bicycle, because the current implementation is only used for bicycles\n          const isFilterActive = !!isFilterItemActive<ProductType.Bicycle, CustomBicycleFilterKey.Sizing>(\n            CustomBicycleFilterKey.Sizing,\n            filterConfig as FilterConfigItem<ProductType.Bicycle, CustomBicycleFilterKey.Sizing>,\n            activeFilters as ActiveFilters<ProductType.Bicycle>\n          );\n          const isLimitReached = variantsLength > config.shared.filter.sizingLimit;\n\n          const showSizingWarning = isFilterActive && isLimitReached;\n          const showSetFilterButton =\n            !!bodySizingBodyValues &&\n            !isActiveFilter<ProductType.Bicycle, CustomBicycleFilterKey.Sizing>(\n              activeFilters as ActiveFilters<ProductType.Bicycle>,\n              CustomBicycleFilterKey.Sizing\n            );\n\n          return (\n            <FilterModal\n              alignRight={alignRight}\n              title={title}\n              badge={\n                !bodySizingEnabled ? <Badge size=\"s\" variant=\"accent\" label={t(\"commons:defaults.addOn\")} /> : undefined\n              }\n              description={\n                <>\n                  <Image originalSize src={smartfitLogoImage} classNames={[\"u-space-top-s\"]} />\n                  {description && (\n                    <>\n                      <br />\n                      {description}\n                    </>\n                  )}\n                </>\n              }\n              closeButton={<TileIconButton icon={<Icon source={icons.IconSmallCross} />} onClick={onClose} />}\n            >\n              <FilterModalCustomContent>\n                <BodySizingFilterModalPartial\n                  onClose={onClose}\n                  activeFilters={activeFilters as ActiveFilters<ProductType.Bicycle>}\n                  showSizingWarning={showSizingWarning}\n                  showSetFilterButton={showSetFilterButton}\n                />\n              </FilterModalCustomContent>\n            </FilterModal>\n          );\n        }\n\n        default:\n          return null;\n      }\n    }\n\n    default:\n      return null;\n  }\n};\n\nexport default FilterModalPartial;\n```\n\n\nI'll migrate the Settings component from using Redux to using the `useEnv` and `useSettings` hooks. Here's the implementation:\n\n<patch>\n<title>Migrate Settings from Redux to useEnv and useSettings hooks</title>\n<edit>\n<path>bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx</path>\n<description>Replace mapStateToProps and connector with hooks-based implementation</description>\n<operation>update</operation>\n<old_text>import { ConnectedProps } from \"react-redux\";\nimport { matchPath, RouteChildrenProps, useLocation } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { getCustomerGroupConfig } from \"../../../../commons/libs/config\";\nimport { DeviceType } from \"../../../../commons/types/env\";\nimport { ExternalToolKey, ToolKey } from \"../../../../commons/types/tool\";\nimport * as icons from \"../../../../resources/icons\";\nimport actions from \"../../../commons/actions\";\nimport Badge from \"../../../commons/components/Badge/Badge\";\nimport Icon from \"../../../commons/components/Icon/Icon\";\nimport IconLink from \"../../../commons/components/IconLink/IconLink\";\nimport SettingsPageLayout from \"../../../commons/components/SettingsPageLayout/SettingsPageLayout\";\nimport SidebarNavigation from \"../../../commons/components/SidebarNavigation/SidebarNavigation\";\nimport SidebarNavigationGroup from \"../../../commons/components/SidebarNavigation/SidebarNavigationGroup\";\nimport SidebarNavigationLink from \"../../../commons/components/SidebarNavigation/SidebarNavigationLink\";\nimport Tooltip, { TooltipPosition } from \"../../../commons/components/Tooltip/Tooltip\";\nimport config from \"../../../commons/config\";\nimport { connect } from \"../../../commons/container/utils/loop\";\nimport useOnUnmount from \"../../../commons/libs/hooks/use-on-unmount\";\nimport { overwriteQueryInPath } from \"../../../commons/libs/path\";\nimport { useActiveBrands } from \"../../../commons/libs/queries/use-active-brands\";\nimport { countChildrenWithFragments } from \"../../../commons/libs/react-utils\";\nimport { ROUTES } from \"../../../commons/routes\";\nimport { isExternalToolAvailable } from \"../../libs/external-tools\";\nimport useRedirectOnIdle from \"../../libs/hooks/use-redirect-on-idle\";\nimport { selectInitializedEnv, selectInitializedSettings, selectIsToolAvailable } from \"../../libs/selectors\";\nimport { State } from \"../../reducers\";\nimport externalTools from \"../../tools\";</old_text>\n<new_text>import { matchPath, RouteChildrenProps, useLocation } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { getCustomerGroupConfig } from \"../../../../commons/libs/config\";\nimport { DeviceType } from \"../../../../commons/types/env\";\nimport { ExternalToolKey, ToolKey } from \"../../../../commons/types/tool\";\nimport * as icons from \"../../../../resources/icons\";\nimport actions from \"../../../commons/actions\";\nimport Badge from \"../../../commons/components/Badge/Badge\";\nimport Icon from \"../../../commons/components/Icon/Icon\";\nimport IconLink from \"../../../commons/components/IconLink/IconLink\";\nimport SettingsPageLayout from \"../../../commons/components/SettingsPageLayout/SettingsPageLayout\";\nimport SidebarNavigation from \"../../../commons/components/SidebarNavigation/SidebarNavigation\";\nimport SidebarNavigationGroup from \"../../../commons/components/SidebarNavigation/SidebarNavigationGroup\";\nimport SidebarNavigationLink from \"../../../commons/components/SidebarNavigation/SidebarNavigationLink\";\nimport Tooltip, { TooltipPosition } from \"../../../commons/components/Tooltip/Tooltip\";\nimport config from \"../../../commons/config\";\nimport useDispatch from \"../../../commons/libs/hooks/use-dispatch\";\nimport useOnUnmount from \"../../../commons/libs/hooks/use-on-unmount\";\nimport { overwriteQueryInPath } from \"../../../commons/libs/path\";\nimport { useActiveBrands } from \"../../../commons/libs/queries/use-active-brands\";\nimport useEnv from \"../../../commons/libs/queries/use-env\";\nimport { useSettings } from \"../../../commons/libs/queries/use-settings\";\nimport { countChildrenWithFragments } from \"../../../commons/libs/react-utils\";\nimport { ROUTES } from \"../../../commons/routes\";\nimport { isExternalToolAvailable } from \"../../libs/external-tools\";\nimport useRedirectOnIdle from \"../../libs/hooks/use-redirect-on-idle\";\nimport { selectIsToolAvailable } from \"../../libs/selectors\";\nimport useSelector from \"../../libs/hooks/use-selector\";\nimport externalTools from \"../../tools\";</new_text>\n</edit>\n\n<edit>\n<path>bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx</path>\n<description>Replace mapStateToProps and mapDispatchToProps with hooks</description>\n<operation>update</operation>\n<old_text>const mapStateToProps = (state: State) => {\n  const env = selectInitializedEnv(state);\n  const settings = selectInitializedSettings(state);\n  const customerGroup = getCustomerGroupConfig(env.customerGroup);\n\n  return {\n    env,\n    features: settings.features,\n    featuresMeta: settings.featuresMeta,\n    customerGroup,\n    toastAlignment: state.toasts.toastAlignment,\n    isToolBikeFinancialCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikeFinancialCalculator, env.locale),\n    isToolBikeFrameSizeCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikeFrameSizeCalculator, env.locale),\n    isToolBikepriceCalculatorAvailable: selectIsToolAvailable(state, ToolKey.BikepriceCalculator, env.locale)\n  };\n};\n\nconst mapDispatchToProps = {\n  onPush: push,\n  setDealerAuthorized: actions.auth.setDealerAuthorized,\n  setToastAlignment: actions.toasts.setToastAlignment\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector> & SettingsPageProps;</old_text>\n<new_text>type Props = SettingsPageProps;</new_text>\n</edit>\n\n<edit>\n<path>bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx</path>\n<description>Update Settings component implementation to use hooks</description>\n<operation>update</operation>\n<old_text>const Settings = ({\n  onPush,\n  toastAlignment,\n  setToastAlignment,\n  setDealerAuthorized,\n  env,\n  features,\n  featuresMeta,\n  customerGroup,\n  isToolBikeFinancialCalculatorAvailable,\n  isToolBikeFrameSizeCalculatorAvailable,\n  isToolBikepriceCalculatorAvailable\n}: Props) => {</old_text>\n<new_text>const Settings = (props: Props) => {\n  const dispatch = useDispatch();\n  const envData = useEnv();\n  const settingsData = useSettings();\n  const toastAlignment = useSelector(state => state.toasts.toastAlignment);\n  \n  const env = envData.query.data!;\n  const customerGroup = envData.customerGroupConfig!;\n  const settings = settingsData.query.data!;\n  const features = settings.features;\n  const featuresMeta = settings.featuresMeta;\n  \n  const isToolBikeFinancialCalculatorAvailable = useSelector(state => \n    selectIsToolAvailable(state, ToolKey.BikeFinancialCalculator, env.locale));\n  const isToolBikeFrameSizeCalculatorAvailable = useSelector(state => \n    selectIsToolAvailable(state, ToolKey.BikeFrameSizeCalculator, env.locale));\n  const isToolBikepriceCalculatorAvailable = useSelector(state => \n    selectIsToolAvailable(state, ToolKey.BikepriceCalculator, env.locale));\n    \n  const onPush = (path: string) => dispatch(push(path));\n  const setToastAlignment = (alignment: string) => dispatch(actions.toasts.setToastAlignment(alignment));\n  const setDealerAuthorized = (value: boolean) => dispatch(actions.auth.setDealerAuthorized(value));</new_text>\n</edit>\n\n<edit>\n<path>bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx</path>\n<description>Update the export to no longer use connector</description>\n<operation>update</operation>\n<old_text>export default connector(Settings);</old_text>\n<new_text>export default Settings;</new_text>\n</edit>\n\n</patch>\n",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 151 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 108 },
      "start": 106801,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 152 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 109 },
      "start": 114556,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 153 }
      }
    }
  ],
  "summary": "I'll migrate the Settings component to use the React Query hooks instead of Redux.",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 3, "end": 59893 },
      "icon": "File",
      "label": "bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx",
      "metadata": {
        "path": "bc-desktop-client/src/client/kiosk/container/Settings/Settings.tsx"
      }
    },
    {
      "range": { "start": 59894, "end": 68288 },
      "icon": "File",
      "label": "bc-desktop-client/src/client/commons/libs/queries/use-settings.ts",
      "metadata": {
        "path": "bc-desktop-client/src/client/commons/libs/queries/use-settings.ts"
      }
    },
    {
      "range": { "start": 68289, "end": 69478 },
      "icon": "File",
      "label": "bc-desktop-client/src/client/commons/libs/queries/use-env.ts",
      "metadata": {
        "path": "bc-desktop-client/src/client/commons/libs/queries/use-env.ts"
      }
    },
    {
      "range": { "start": 69642, "end": 74440 },
      "icon": "File",
      "label": "bc-desktop-client/src/client/commons/container/ProductDetails/SpecificationsOverlay.tsx",
      "metadata": {
        "path": "bc-desktop-client/src/client/commons/container/ProductDetails/SpecificationsOverlay.tsx"
      }
    },
    {
      "range": { "start": 74441, "end": 106799 },
      "icon": "File",
      "label": "bc-desktop-client/src/client/commons/container/ProductFinder/FilterModalPartial.tsx",
      "metadata": {
        "path": "bc-desktop-client/src/client/commons/container/ProductFinder/FilterModalPartial.tsx"
      }
    }
  ]
}
