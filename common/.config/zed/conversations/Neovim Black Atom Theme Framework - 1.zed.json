{
  "id": "def4d99b-6e93-4659-9a57-dc381bda066c",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\nnvim/lua\nblack-atom\n```lua nvim/lua/black-atom/api.lua\n---@class BlackAtom.API\nlocal API = {}\n\n---@param collection_key? BlackAtom.Theme.Collection.Key\n---@param theme_key? BlackAtom.Theme.Key\n---@return BlackAtom.Theme.Definition\nlocal function load_theme_definition(collection_key, theme_key)\n    local Config = require(\"black-atom.config\"):get()\n\n    theme_key = theme_key or Config.theme\n    collection_key = collection_key or Config.collection\n\n    local found, theme = pcall(require, \"black-atom.themes.\" .. collection_key .. \".\" .. theme_key)\n    if not found then\n        error(\"Could not find theme: \" .. collection_key .. \".\" .. theme_key .. \". Please check your arguments.\")\n    else\n        return theme\n    end\nend\n\n---Returns the currently set theme meta.\n---If no arguments are provided, the currently set theme will be used.\n---@param collection_key? BlackAtom.Theme.Collection.Key\n---@param theme_key? BlackAtom.Theme.Key\n---@return BlackAtom.Theme.Meta\nfunction API:get_meta(collection_key, theme_key)\n    return load_theme_definition(collection_key, theme_key).meta\nend\n\n---Returns the colors for the currently set theme and variant.\n---If no arguments are provided, the currently set theme will be used.\n---@param collection_key? BlackAtom.Theme.Collection.Key\n---@param theme_key? BlackAtom.Theme.Key\n---@return BlackAtom.Theme.Colors\nfunction API:get_colors(collection_key, theme_key)\n    return load_theme_definition(collection_key, theme_key).colors\nend\n\n---Returns the currently set theme.\n---If no arguments are provided, the currently set theme will be used.\n---@param collection_key? BlackAtom.Theme.Collection.Key\n---@param theme_key? BlackAtom.Theme.Key\n---@return BlackAtom.Theme.Definition\nfunction API:get_theme(collection_key, theme_key)\n    return load_theme_definition(collection_key, theme_key)\nend\n\nreturn API\n```\n\n```lua nvim/lua/black-atom/commands.lua\nlocal M = {}\n\nfunction M.print_config()\n    vim.api.nvim_create_user_command(\"BlackAtomPrintConfig\", function()\n        local Config = require(\"black-atom.config\"):get()\n        require(\"black-atom.lib.windows\").open_tmp_vertical_window(Config)\n    end, {})\nend\n\nfunction M.register()\n    M.print_config()\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/config.lua\nlocal M = {}\n\n---@type BlackAtom.Config\nlocal default_config = {\n    debug = false,\n    theme = \"black-atom-engineering\",\n    collection = \"default\",\n    term_colors = true,\n    styles = {\n        ending_tildes = false,\n        cmp_kind_color_mode = \"bg\",\n        dark_sidebars = true,\n        transparency = \"none\",\n        diagnostics = {\n            undercurl = false,\n            background = false,\n        },\n        syntax = {\n            comments = {\n                italic = true,\n            },\n            keywords = {\n                bold = true,\n                italic = true,\n            },\n            functions = {},\n            strings = {\n                italic = true,\n            },\n            variables = {},\n            messages = {\n                bold = true,\n            },\n        },\n    },\n}\n\n---Sets options for the BlackAtom.Config during runtime\n---@param options BlackAtom.Config\n---@return nil\nfunction M.set(options)\n    local validate = require(\"black-atom.lib.validate\")\n\n    local current_config = vim.g.black_atom_core_config or {}\n\n    ---@type BlackAtom.Config\n    local merged_config = vim.tbl_deep_extend(\"force\", default_config, current_config, options)\n    validate.config(merged_config)\n\n    vim.g.black_atom_core_config = merged_config\nend\n\n---Returns the current BlackAtom.Config\n---@return BlackAtom.Config | any\nfunction M.get()\n    return vim.g.black_atom_core_config\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/constants.lua\n---@class BlackAtom.Constants\nreturn {\n    plugin_name = \"black%-atom\", -- Escaped plugin name. Used to find its own installation path.\n    highlights_path = \"lua/black-atom/highlights\",\n}\n```\n\nhighlights\n```lua nvim/lua/black-atom/highlights/lsp.lua\n---@type BlackAtom.HighlightsSpec\nlocal highlight_map_extension = {\n    map = function(colors, config)\n        local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n        local darken = require(\"black-atom.lib.color\").darken\n        local styles = config.styles or {}\n\n        local diagnostics_error_color = colors.palette.red\n        local diagnostics_warn_color = colors.palette.yellow\n        local diagnostics_hint_color = colors.palette.blue\n        local diagnostics_info_color = colors.palette.green\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            LspCxxHlGroupEnumConstant = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupMemberVariable = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupNamespace = { fg = colors.palette.blue },\n            LspCxxhighlightskippedRegion = { fg = colors.palette.gray },\n            LspCxxhighlightskippedRegionBeginEnd = { fg = colors.palette.red },\n\n            DiagnosticError = { fg = colors.palette.red },\n            DiagnosticHint = { fg = colors.palette.blue },\n            DiagnosticInfo = { fg = colors.palette.cyan },\n            DiagnosticWarn = { fg = colors.palette.yellow },\n\n            DiagnosticVirtualTextError = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_error_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_error_color,\n            },\n            DiagnosticVirtualTextWarn = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_warn_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_warn_color,\n            },\n            DiagnosticVirtualTextInfo = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_info_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_info_color,\n            },\n            DiagnosticVirtualTextHint = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_hint_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_hint_color,\n            },\n\n            DiagnosticUnderlineError = {\n                sp = colors.palette.red,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineHint = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineInfo = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineWarn = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.yellow,\n            },\n\n            LspReferenceText = { underline = true },\n            LspReferenceWrite = { underline = true },\n            LspReferenceRead = { underline = true },\n\n            LspCodeLens = { fg = colors.palette.gray },\n            LspCodeLensSeparator = { fg = colors.palette.gray },\n\n            LspDiagnosticsDefaultError = { link = \"DiagnosticError\" },\n            LspDiagnosticsDefaultHint = { link = \"DiagnosticHint\" },\n            LspDiagnosticsDefaultInformation = { link = \"DiagnosticInfo\" },\n            LspDiagnosticsDefaultWarning = { link = \"DiagnosticWarn\" },\n            LspDiagnosticsUnderlineError = { link = \"DiagnosticUnderlineError\" },\n            LspDiagnosticsUnderlineHint = { link = \"DiagnosticUnderlineHint\" },\n            LspDiagnosticsUnderlineInformation = {\n                link = \"DiagnosticUnderlineInfo\",\n            },\n            LspDiagnosticsUnderlineWarning = { link = \"DiagnosticUnderlineWarn\" },\n            LspDiagnosticsVirtualTextError = { link = \"DiagnosticVirtualTextError\" },\n            LspDiagnosticsVirtualTextWarning = {\n                link = \"DiagnosticVirtualTextWarn\",\n            },\n            LspDiagnosticsVirtualTextInformation = {\n                link = \"DiagnosticVirtualTextInfo\",\n            },\n            LspDiagnosticsVirtualTextHint = { link = \"DiagnosticVirtualTextHint\" },\n        }\n\n        return highlights_map\n    end,\n}\n\nreturn highlight_map_extension\n```\n\nplugins\n```lua nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua\n--[[\n    Hello there!\n    Thank you for wanting to contribute to the black-atom.nvim plugin!\n\n    To create a new highlight map for your plugin, simply copy this template\n    and rename it to a suitable name, such as \"my_plugin.lua\".\n\n    You don't need to require this file anywhere manually, since every lua file\n    in the `lua/black-atom/highlights/plugins/` folder will be loaded automatically.\n    Note: Filenames ending with \"_template.lua\" will be disregarded!\n\n    Each highlight file must return a `BlackAtom.HighlightsSpec` table,\n    which at a minimum, should contain a field called `map`.\n    The `BlackAtom.HighlightsSpec` and `BlackAtom.Highlights` types\n    will assist with completion and type checking.\n    (Ensure the `lua-language-server` is installed for this to work.)\n\n    The `enabled` field is optional and defaults to true.\n    The `map` function needs to return a `BlackAtom.Highlights` table.\n    It receives the colors and config tables as parameters,\n    which gives you access to all the colors and config options.\n    -- `colors` is a table containing the color palette.\n    -- `config` is a table containing configuration options.\n\n    IMPORTANT: When you add a new plugin file, and run the `./update_supported_plugins.sh` script,\n    it will be automatically included in the Supported Plugins section of the README.md file.\n    This is a great way to showcase your contribution and help others discover new plugin support!\n\n    To ensure this automatic process works correctly, please follow these guidelines:\n\n    1. Add a @doc comment with the plugin's GitHub URL at the top of the file:\n       ---@doc https://github.com/username/plugin-name\n\n    2. Ensure that the highlight groups are returned in the specific structure:\n\n    ---@type BlackAtom.Highlights\n    return {\n        HighlightGroup1 = { ... }, -- Each line in this block after `---@type BlackAtom.Highlights` will be counted.\n        HighlightGroup2 = { ... },\n        ...\n    }\n\n    This structure allows our script to accurately count the number of highlight groups\n    for each plugin and update the README.md file accordingly.\n\n    NAMING CONVENTION: Please name your plugin highlight file name like your plugin name. Replace dots with underscores.\n    For example: `telescope.nvim` => `telescope_nvim.lua`\n\n    After you have finished your highlight map, you can test it by running Neovim in a separate window\n    and see if your highlights are applied correctly, or turn on `debug` mode\n    in the config file to see a generated file with all highlights.\n    This will be placed in the `debug` folder placed at the root of the plugin.\n\n    For further assistance or questions, consider reaching out through the project's GitHub repository.\n]]\n\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        -- There are also helper functions for common background colors, which are dependent on the config\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local p = colors.palette -- These are semantic color tokens for the palette\n        local ui = colors.ui -- These are semantic color tokens for the UI\n        local s = colors.syntax -- These are semantic color tokens for the syntax\n\n        -- IMPORTANT: Ensure the highlight groups are returned in the correct structure so that the script to automatically generate the README.md file can work correctly\n        ---@type BlackAtom.Highlights\n        return {\n            MyHighlightGroup = { fg = ui.fg.primary.main },\n            MyFloatBorder = { fg = p.green, bg = bg_dark },\n            MyDimmedHighlightGroup = { fg = ui.fg.neutral },\n            MyHighlightGroupWithUnderline = { fg = ui.fg.primary.main, underline = true },\n            MyVariableKindSymbol = { fg = s.variable.default },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua\n---@doc https://github.com/otavioschwanck/arrow.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            ArrowCurrentFile = { fg = p.yellow, bold = true },\n            ArrowFileIndex = { fg = p.cyan },\n            ArrowAction = { fg = p.dark_yellow },\n            ArrowDeleteMode = { fg = p.red, bold = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/blink_nvim.lua\n---@doc https://github.com/saghen/blink.cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local fg = colors.ui.fg\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            BlinkCmpMenu = { bg = bg.dark(config, colors) },\n            BlinkCmpLabel = { fg = fg.primary.main, bg.main(config, colors) },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            highlights_map[\"BlinkCmpKind\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua\n---@doc https://github.com/nvimdev/dashboard-nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            DashboardShortCut = { fg = colors.palette.blue },\n            DashboardHeader = { fg = colors.palette.yellow },\n            DashboardCenter = { fg = colors.palette.cyan },\n            DashboardFooter = { fg = colors.palette.dark_red, italic = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua\n---@doc https://github.com/sindrets/diffview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            DiffviewFilePanelTitle = { fg = p.blue, bold = true },\n            DiffviewFilePanelCounter = { fg = p.magenta, bold = true },\n            DiffviewFilePanelFileName = { fg = ui.fg.primary.main },\n            DiffviewNormal = { link = \"Normal\" },\n            DiffviewCursorLine = { link = \"CursorLine\" },\n            DiffviewVertSplit = { link = \"VertSplit\" },\n            DiffviewSignColumn = { link = \"SignColumn\" },\n            DiffviewStatusLine = { link = \"StatusLine\" },\n            DiffviewStatusLineNC = { link = \"StatusLineNC\" },\n            DiffviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            DiffviewFilePanelRootPath = { fg = p.gray },\n            DiffviewFilePanelPath = { fg = p.gray },\n            DiffviewFilePanelInsertions = { fg = p.green },\n            DiffviewFilePanelDeletions = { fg = p.red },\n            DiffviewStatusAdded = { fg = p.green },\n            DiffviewStatusUntracked = { fg = p.blue },\n            DiffviewStatusModified = { fg = p.blue },\n            DiffviewStatusRenamed = { fg = p.blue },\n            DiffviewStatusCopied = { fg = p.blue },\n            DiffviewStatusTypeChange = { fg = p.blue },\n            DiffviewStatusUnmerged = { fg = p.blue },\n            DiffviewStatusUnknown = { fg = p.red },\n            DiffviewStatusDeleted = { fg = p.red },\n            DiffviewStatusBroken = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua\n---@doc https://github.com/folke/edgy.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg_sidebar = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            EdgyNormal = { fg = fg.primary.main, bg = bg_sidebar },\n            EdgyTitle = { link = \"EdgyNormal\" },\n            EdgyIcon = { link = \"EdgyNormal\" },\n            EdgyIconActive = { fg = fg.active, bg = bg_sidebar },\n            EdgyWinBar = { fg = fg.active, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/flash.lua\n---@doc https://github.com/folke/flash.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = false,\n    map = function(colors, config)\n        local ui = colors.ui\n        local palette = colors.palette\n\n        -- FlashBackdrop     Comment      backdrop\n        -- FlashMatch        Search       search matches\n        -- FlashCurrent      IncSearch    current match\n        -- FlashLabel        Substitute   jump label\n        -- FlashPrompt       MsgArea      prompt\n        -- FlashPromptIcon   Special      prompt icon\n        -- FlashCursor       Cursor       cursor\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            FlashMatch = { fg = ui.fg.invert, bg = palette.dark_magenta },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/fzflua.lua\n---@doc https://github.com/ibhagwan/fzf-lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg = colors.ui.bg\n        local bg_dark = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            FzfLuaNormal = { fg = fg.primary.main, bg = bg_dark },\n            FzfLuaTitle = { fg = fg.active, bg = bg_dark },\n            FzfLuaBorder = { link = \"FloatBorder\" },\n            FzfLuaPreviewBorder = { link = \"FloatBorder\" },\n            FzfLuaCursorLine = { bg = bg.primary.main },\n            FzfLuaDirPart = { fg = fg.neutral },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua\n---@doc https://github.com/lewis6991/gitsigns.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitSignsAdd = { fg = p.green },\n            GitSignsAddLn = { fg = p.green },\n            GitSignsAddNr = { fg = p.green },\n            GitSignsChange = { fg = p.blue },\n            GitSignsChangeLn = { fg = p.blue },\n            GitSignsChangeNr = { fg = p.blue },\n            GitSignsDelete = { fg = p.red },\n            GitSignsDeleteLn = { fg = p.red },\n            GitSignsDeleteNr = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/glance_nvim.lua\n---@doc https://github.com/DNLHC/glance.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local bg = colors.ui.bg\n        local bg_main = bg.primary.main\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_main = fg.primary.main\n        local fg_neutral = fg.neutral\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        local border_style = { fg = fg.active, bg = bg_dark }\n\n        local neutral_element_style = { fg = fg_neutral, bg = bg.primary.dark }\n        local file_name_style = { fg = fg_active, bg = bg.primary.dark }\n        local file_path_style = neutral_element_style\n        local match_style = { bg = bg.match.active }\n\n        local preview_bg = bg_main\n        local preview_normal_style = { fg = fg_main, bg = preview_bg }\n        local list_bg = bg_dark\n        local list_normal_style = { fg = fg_active, bg = list_bg }\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- Preview (The preview of the file)\n            GlancePreviewNormal = preview_normal_style,\n            GlancePreviewMatch = match_style,\n            GlancePreviewCursorLine = { link = \"CursorLine\" },\n            GlancePreviewSignColumn = { link = \"SignColumn\" },\n            GlancePreviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            GlancePreviewLineNr = { link = \"LineNr\" },\n            GlancePreviewBorderBottom = border_style,\n\n            -- WindowBar\n            GlanceWinBarFilename = file_name_style,\n            GlanceWinBarFilepath = file_path_style,\n            GlanceWinBarTitle = { fg = fg_active, bg = bg_dark },\n\n            -- List (The list of affected files and references)\n            GlanceListNormal = list_normal_style,\n            GlanceListFilename = file_name_style,\n            GlanceListFilepath = file_path_style,\n            GlanceListCount = { fg = fg_active },\n            GlanceListMatch = match_style,\n            GlanceListCursorLine = { link = \"CursorLine\" },\n            GlanceListEndOfBuffer = { bg = list_bg },\n            GlanceListBorderBottom = border_style,\n\n            -- Other\n            GlanceFoldIcon = { fg = palette.blue },\n            GlanceIndent = { fg = fg.neutral, bg = list_bg },\n            GlanceBorderTop = border_style,\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/incline_nvim.lua\n---@doc https://github.com/b0o/incline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            InclineNormal = {\n                fg = colors.ui.fg.active,\n                bg = colors.ui.bg.primary.dark,\n                bold = true,\n            },\n            InclineNormalNC = {\n                fg = colors.ui.fg.neutral,\n                bg = colors.ui.bg.primary.dark,\n            },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua\n---@doc https://github.com/lukas-reineke/indent-blankline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            IndentBlanklineChar = { fg = colors.ui.fg.neutral },\n            IndentBlanklineContextChar = { fg = colors.ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/markview_nvim.lua\n---@doc https://github.com/OXY2DEV/markview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            MarkviewCode = { bg = s.markup.code.bg },\n            MarkviewInlineCode = { bg = s.markup.code.bg },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg_main = require(\"black-atom.lib\").bg.main(config, colors)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- mini.pick\n            MiniPickPrompt = { bg = bg_dark },\n            MiniPickMatchCurrent = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini_nvim.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            ---@doc https://github.com/echasnovski/mini.indentscope\n            MiniIndentscopeSymbol = { fg = ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_dark = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeNormalNC = { fg = ui.fg.neutral, bg = bg_dark },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.neutral },\n            NeoTreeEndOfBuffer = { fg = bg_dark },\n            NeoTreeFileName = { fg = ui.fg.primary.main },\n            NeoTreeFloatBorder = { fg = bg_dark, bg = bg_dark },\n            NeoTreeFloatNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeGitConflict = { fg = ui.fg.diff.change },\n            NeoTreeGitIgnored = { fg = ui.fg.neutral, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.diff.add },\n            NeoTreeTitleBar = { fg = ui.fg.neutral, bg = bg_dark },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = colors.ui.fg.primary.main },\n            CmpItemAbbrDeprecated = { fg = p.light_gray, strikethrough = true },\n            CmpItemAbbrMatch = { fg = p.cyan },\n            CmpItemAbbrMatchFuzzy = { fg = p.cyan, underline = true },\n            CmpItemMenu = { fg = colors.ui.fg.primary.main },\n            CmpItemKind = { fg = p.magenta },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = colors.ui.fg.invert, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua\n---@doc https://github.com/SmiteshP/nvim-navbuddy\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local match_style = { bg = colors.ui.bg.match.active }\n\n        local bg = colors.ui.bg\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            NavbuddyName = { fg = fg_active, bg = bg_dark }, -- highlight for name in source buffer\n            NavbuddyScope = match_style, -- highlight for scope of context in source buffer\n            NavbuddyFloatBorder = { fg = palette.cyan }, -- Floatborder highlight\n        }\n\n        local lsp_kind_icons = {\n            Array = palette.red,\n            Boolean = palette.blue,\n            Class = palette.yellow,\n            Constant = palette.dark_yellow,\n            Constructor = palette.blue,\n            Enum = palette.magenta,\n            EnumMember = palette.yellow,\n            Event = palette.yellow,\n            Field = palette.magenta,\n            File = palette.gray,\n            Function = palette.yellow,\n            Interface = palette.cyan,\n            Key = palette.magenta,\n            Method = palette.yellow,\n            Module = palette.dark_yellow,\n            Namespace = palette.dark_blue,\n            Null = palette.gray,\n            Number = palette.light_gray,\n            Object = palette.blue,\n            Operator = palette.magenta,\n            Package = palette.red,\n            Property = palette.blue,\n            String = palette.green,\n            Struct = palette.cyan,\n            TypeParameter = palette.dark_cyan,\n            Variable = palette.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons) do\n            highlights_map[\"Navbuddy\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_tree.lua\n---@doc https://github.com/nvim-tree/nvim-tree.lua\n---Tip: Use `:NvimTreeHiTest`to debug highlight groups\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_sidebar = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NvimTreeNormal = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeNormalNC = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeEndOfBuffer = { fg = bg_sidebar },\n            NvimTreeCursorLine = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua\n---@doc https://github.com/nvim-treesitter/nvim-treesitter-context\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_sidebar = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TreesitterContext = { bg = bg_sidebar },\n            TreesitterContextLineNumber = { fg = ui.fg.neutral, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            SnacksPickerCursorLine = { bg = ui.bg.active },\n            SnacksPickerListCursorLine = { link = \"SnacksPickerCursorLine\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua\n---@doc https://github.com/nvim-telescope/telescope.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TelescopeNormal = { bg = bg_dark },\n            TelescopeBorder = { fg = bg_dark, bg = bg_dark },\n            TelescopeTitle = { fg = ui.fg.active },\n            TelescopePromptPrefix = { fg = ui.fg.active },\n            TelescopeMatching = { fg = ui.fg.active },\n            TelescopeSelection = { fg = ui.fg.active, bg = ui.bg.primary.main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua\n---@doc https://github.com/airblade/vim-gitgutter\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local diff = colors.ui.fg.diff\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitGutterAdd = { fg = diff.add },\n            GitGutterChange = { fg = diff.change },\n            GitGutterDelete = { fg = diff.delete },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua\n---@doc https://github.com/folke/which-key.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            WhichKey = { fg = p.cyan },\n            WhichKeyIcon = { fg = s.markup.link },\n            WhichKeyDesc = { fg = p.blue },\n            WhichKeyGroup = { fg = p.dark_yellow },\n            WhichKeySeperator = { fg = p.green },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua\n---@doc https://github.com/mikavilpas/yazi.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            YaziFloat = { bg = bg_dark },\n        }\n    end,\n}\n```\n\n\n```lua nvim/lua/black-atom/highlights/syntax.lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local s = colors.syntax\n        -- TODO:  Rename to configurable globally\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        -- Treesitter Syntax Highlights (See: `:h treesitter-highlight-groups`)\n        ---@type BlackAtom.Highlights\n        return {\n            -- TODO: Link these to the builtin types (e.g. @operator & Operator)\n            -- TODO: Rename this file to `syntax.lua` and bring in the builtin types as well\n            -- TODO: Sort\n\n            Identifier = ext_hl({ fg = s.variable.default }, config.styles.syntax.variables),\n            StorageClass = { link = \"Identifier\" },\n            [\"@variable\"] = { link = \"Identifier\" },\n            [\"@variable.builtin\"] = { fg = s.variable.builtin },\n            [\"@variable.parameter\"] = { fg = s.variable.parameter, italic = true, bold = true },\n            [\"@variable.member\"] = { fg = s.variable.member, italic = true },\n\n            String = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string\"] = { link = \"String\" },\n            [\"@string.escape\"] = ext_hl({ fg = s.string.escape }, config.styles.syntax.strings),\n            [\"@string.regexp\"] = ext_hl({ fg = s.string.regexp }, config.styles.syntax.strings),\n            [\"@string.special\"] = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string.special.url\"] = ext_hl({ fg = s.string.default, underline = true }, config.styles.syntax.strings),\n\n            Boolean = { fg = s.boolean.default },\n            [\"@boolean\"] = { link = \"Boolean\" },\n\n            Number = { fg = s.number.default },\n            Float = { link = \"Number\" },\n            [\"@number\"] = { link = \"Number\" },\n\n            -- We assign the `Keyword` highlight to some of the other regexpt highlight groups,\n            -- which are also keywords more of less.\n            -- To me thats find for now, but I'm open to suggestions.\n            Keyword = ext_hl({ fg = s.keyword.default }, config.styles.syntax.keywords),\n            [\"@keyword\"] = { link = \"Keyword\" },\n            [\"@keyword.import\"] = ext_hl({ fg = s.keyword.import }, config.styles.syntax.keywords),\n            [\"@keyword.export\"] = ext_hl({ fg = s.keyword.export }, config.styles.syntax.keywords),\n            Statement = { link = \"Keyword\" },\n            Conditional = { link = \"Keyword\" },\n            Repeat = { link = \"Keyword\" },\n            Label = { link = \"Keyword\" },\n            Exception = { link = \"Keyword\" },\n            PreProc = { link = \"Keyword\" },\n            Include = { link = \"Keyword\" },\n            Define = { link = \"Keyword\" },\n            Macro = { link = \"Keyword\" },\n            PreCondit = { link = \"Keyword\" },\n\n            Operator = { fg = s.operator.default },\n            [\"@operator\"] = { link = \"Operator\" },\n\n            Type = { fg = s.type.default, bold = true },\n            Structure = { link = \"Type\" },\n            Typedef = { link = \"Type\" },\n            [\"@type\"] = { link = \"Type\" },\n            [\"@type.builtin\"] = { fg = s.type.builtin, bold = true },\n\n            Constant = { fg = s.constant.default },\n            SpecialChar = { fg = s.constant.builtin },\n            [\"@constant\"] = { link = \"Constant\" },\n            [\"@constant.builtin\"] = { link = \"SpecialChar\" },\n\n            Character = { fg = s.constant.default },\n            [\"@character\"] = { link = \"Character\" },\n\n            [\"@module\"] = { fg = s.module.default },\n\n            [\"@attribute\"] = { fg = s.attribute.default },\n            [\"@attribute.builtin\"] = { fg = s.attribute.builtin },\n\n            [\"@property\"] = { fg = s.property.default },\n\n            Function = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@function\"] = { link = \"Function\" },\n            [\"@function.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.builtin\"] = ext_hl({ fg = s.func.builtin }, config.styles.syntax.functions),\n            [\"@function.method\"] = ext_hl({ fg = s.func.method }, config.styles.syntax.functions),\n\n            [\"@method\"] = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n\n            [\"@constructor\"] = { fg = s.constructor.default, bold = true },\n\n            Delimiter = { fg = s.punctuation.delimiter },\n            Special = { fg = s.punctuation.special },\n            [\"@punctuation.bracket\"] = { fg = s.punctuation.bracket },\n            [\"@punctuation.delimiter\"] = { fg = s.punctuation.delimiter },\n\n            Comment = ext_hl({ fg = s.comment.default }, config.styles.syntax.comments),\n            Todo = { fg = s.comment.todo },\n            SpecialComment = ext_hl({ fg = s.comment.doc }, config.styles.syntax.comments),\n            [\"@comment\"] = { link = \"Comment\" },\n            [\"@comment.todo\"] = { link = \"Todo\" },\n            [\"@comment.documentation\"] = { link = \"SpecialComment\" },\n\n            [\"@markup.heading.1\"] = { fg = s.markup.heading.h1, bold = true },\n            [\"@markup.heading.2\"] = { fg = s.markup.heading.h2, bold = true },\n            [\"@markup.heading.3\"] = { fg = s.markup.heading.h3, bold = true },\n            [\"@markup.heading.4\"] = { fg = s.markup.heading.h4, bold = true },\n            [\"@markup.heading.5\"] = { fg = s.markup.heading.h5, bold = true },\n            [\"@markup.heading.6\"] = { fg = s.markup.heading.h6, bold = true },\n            [\"@markup.quote\"] = { fg = s.markup.quote, italic = true },\n            [\"@markup.link\"] = { fg = s.markup.link, underline = true },\n\n            [\"@markup.raw\"] = { fg = s.markup.code.fg, bg = s.markup.code.bg },\n\n            [\"@markup.list\"] = { fg = s.markup.list.default },\n            [\"@markup.list.checked\"] = { fg = s.markup.list.checked },\n            [\"@markup.list.unchecked\"] = { fg = s.markup.list.unchecked },\n\n            Tag = { fg = s.tag.default },\n            [\"@tag\"] = { link = \"Tag\" },\n            [\"@tag.builtin\"] = { fg = s.tag.builtin },\n            [\"@tag.custom\"] = { fg = s.tag.builtin },\n            [\"@tag.attribute\"] = { fg = s.tag.attribute },\n            [\"@tag.delimiter\"] = { fg = s.tag.delimiter },\n\n            -- Treesitter Semantic Tokens\n            [\"@lsp.type.namespace\"] = { link = \"@namespace\" },\n            [\"@lsp.type.type\"] = { link = \"@type\" },\n            [\"@lsp.type.class\"] = { link = \"@type\" },\n            [\"@lsp.type.enum\"] = { link = \"@type\" },\n            [\"@lsp.type.interface\"] = { link = \"@type\" },\n            [\"@lsp.type.struct\"] = { link = \"@structure\" },\n            [\"@lsp.type.parameter\"] = { link = \"@variable.parameter\" },\n            [\"@lsp.type.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable.readonly\"] = { link = \"@constant\" },\n            [\"@lsp.type.property\"] = { link = \"@property\" },\n            [\"@lsp.type.enumMember\"] = { link = \"@variable.member\" },\n            [\"@lsp.type.function\"] = { link = \"@function\" },\n            [\"@lsp.type.method\"] = { link = \"@method\" },\n            [\"@lsp.type.macro\"] = { link = \"@macro\" },\n            [\"@lsp.type.decorator\"] = { link = \"@function\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.dark(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n\n```lua nvim/lua/black-atom/highlights.lua\nlocal M = {}\n\n---Reset all highlights.\n---@return nil\nfunction M.reset()\n    -- Clear all highlights\n    vim.cmd(\"hi clear\")\n\n    -- Reset syntax highlighting\n    if vim.fn.exists(\"syntax_on\") then\n        vim.cmd(\"syntax reset\")\n    end\nend\n\n---Applies the highlights for the theme based on the current configuration.\n---@param colors BlackAtom.Theme.Colors\n---@param config BlackAtom.Config\n---@return nil\nfunction M.apply(colors, config)\n    local highlights = require(\"black-atom.lib.highlights\")\n\n    if config.term_colors then\n        highlights.set_term(colors)\n    end\n\n    highlights.set(highlights.build_highlights_map(colors, config))\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/init.lua\nlocal config = require(\"black-atom.config\")\nlocal commands = require(\"black-atom.commands\")\nlocal highlights = require(\"black-atom.highlights\")\nlocal lib = require(\"black-atom.lib\")\n\nlocal M = {}\n\n---@param opts BlackAtom.Config\n---@return nil\nfunction M.setup(opts)\n    if not opts then\n        config.set(config.default)\n    else\n        config.set(opts)\n    end\n\n    commands.register()\nend\n\n---Loads a theme definition into the editor\n---@param theme BlackAtom.Theme.Definition\n---@return nil\nfunction M.load(theme)\n    config.set({ theme = theme.meta.key, collection = theme.meta.collection.key })\n    lib.themes.dev_status_warning(theme.meta)\n\n    highlights.reset()\n\n    vim.g.colors_name = theme.meta.key\n    vim.opt.termguicolors = true\n    vim.opt.background = theme.meta.appearance\n\n    highlights.apply(theme.colors, config.get())\nend\n\nreturn M\n```\n\nlib\n```lua nvim/lua/black-atom/lib/bg.lua\nlocal cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.main(config, colors)\n    local no_color = colors.none\n    local bg = colors.ui.bg\n\n    return cond_hl(bg.primary.main, {\n        [config.styles.transparency == \"partial\"] = no_color,\n        [config.styles.transparency == \"full\"] = no_color,\n    })\nend\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.dark(config, colors)\n    local dark_sidebars = config.styles.dark_sidebars\n    local transparency = config.styles.transparency\n    local bg = colors.ui.bg\n    local no_color = colors.none\n\n    return cond_hl(bg.primary.dark, {\n        [not dark_sidebars] = bg.primary.main,\n        [dark_sidebars and transparency == \"partial\"] = bg.primary.dark,\n        [transparency == \"full\"] = no_color,\n    })\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/color.lua\nlocal M = {}\n\n---Converts a Hex String to RGB Color String\n---@param hex_str string\n---@return table\nfunction M.hexToRgb(hex_str)\n    local hex = \"[abcdef0-9][abcdef0-9]\"\n    local pat = \"^#(\" .. hex .. \")(\" .. hex .. \")(\" .. hex .. \")$\"\n\n    hex_str = string.lower(hex_str)\n\n    assert(string.find(hex_str, pat) ~= nil, \"hex_to_rgb: invalid hex_str: \" .. tostring(hex_str))\n\n    local r, g, b = string.match(hex_str, pat)\n    return { tonumber(r, 16), tonumber(g, 16), tonumber(b, 16) }\nend\n\n---@param fg string foreground color\n---@param bg string background color\n---@param alpha number number between 0 and 1. 0 results in bg, 1 results in fg\n---@return string\nfunction M.blend(fg, bg, alpha)\n    local background = M.hexToRgb(bg)\n    local foreground = M.hexToRgb(fg)\n\n    local blendChannel = function(i)\n        local ret = (alpha * foreground[i] + ((1 - alpha) * background[i]))\n        return math.floor(math.min(math.max(0, ret), 255) + 0.5)\n    end\n\n    return string.format(\"#%02X%02X%02X\", blendChannel(1), blendChannel(2), blendChannel(3))\nend\n\nlocal default_bg = \"#000000\"\nlocal default_fg = \"#ffffff\"\n\n-- Darken a color by blending it with black or a custom color\n---@param hex_string string\n---@param amount number\n---@param bg? string\n---@return string\nfunction M.darken(hex_string, amount, bg)\n    return M.blend(hex_string, bg or default_bg, math.abs(amount))\nend\n\n-- Lighten a color by blending it with white or a custom color\n---@param hex_string string\n---@param amount number\n---@param fg? string\n---@return string\nfunction M.lighten(hex_string, amount, fg)\n    return M.blend(hex_string, fg or default_fg, math.abs(amount))\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/debug.lua\nlocal lib_files = require(\"black-atom.lib.files\")\nlocal lib_ui = require(\"black-atom.lib.ui\")\n\nlocal M = {}\n\n-- TODO: DEV-164 Put these into constants.\nM.pathes = {\n    debug_dir = lib_files.build_path(lib_files.get_plugin_path(), \"debug\"),\n    highlights_map_debug_filename = \"highlights_debug_map.txt\",\n    errors_debug_filename = \"errors_debug.txt\",\n}\n\nM.create_debug_dir = function()\n    vim.fn.mkdir(M.pathes.debug_dir, \"p\")\nend\n\nM.count_keys = function(tbl)\n    local count = 0\n    for _ in pairs(tbl) do\n        count = count + 1\n    end\n    return count\nend\n\n---Write debug file for highlights\n---@param colors BlackAtom.Theme.Colors\n---@param modules string[]\n---@param highlights_map table<string, BlackAtom.HighlightDefinition>\n---@return nil\nM.write_debug_highlights_file = function(colors, modules, highlights_map)\n    local filepath = lib_files.build_path(M.pathes.debug_dir, M.pathes.highlights_map_debug_filename)\n\n    M.create_debug_dir()\n\n    local file = io.open(filepath, \"w\")\n\n    local modules_keys = M.count_keys(modules)\n    local highlight_keys = M.count_keys(highlights_map)\n\n    local separator = \"_________________________________________________________\"\n\n    if file then\n        -- prepend date and time to the file\n        file:write(\"Last written at: '\" .. os.date(\"%c\") .. \"'\" .. \"\\n\")\n        file:write(\"\\n\")\n        file:write(separator .. \"\\n\")\n\n        -- Highlight modules\n        file:write(\"\\n\")\n        file:write(\"All highlight modules:\" .. \"\\n\")\n        file:write(\"\\n\")\n        file:write(\"Total: \" .. modules_keys .. \"\\n\")\n        file:write(\"\\n\")\n        -- write each highlight module from `modules` to a line in the file\n        for _, module in ipairs(modules) do\n            file:write(module .. \"\\n\")\n        end\n        file:write(\"\\n\")\n        file:write(separator .. \"\\n\")\n\n        -- Theme colors definition\n        file:write(\"\\n\")\n        file:write(\"Theme definition:\" .. \"\\n\")\n        file:write(vim.inspect(colors))\n        file:write(separator .. \"\\n\")\n\n        -- Highlight map\n        file:write(\"\\n\")\n        file:write(\"Complete Black Atom Highlight Map\" .. \"\\n\")\n        file:write(\"\\n\")\n        file:write(\"Total unique highlight keys: \" .. highlight_keys .. \"\\n\")\n        file:write(\"\\n\")\n        file:write(vim.inspect(highlights_map))\n\n        file:close()\n\n        lib_ui.notify(\"Wrote highlight map to '\" .. filepath .. \"'\", vim.log.levels.INFO, {\n            title = \"Black Atom - Debug\",\n            icon = \"\",\n        })\n    end\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/files.lua\nlocal M = {}\n\n---Get the install path of the plugin\n---@return string\nfunction M.get_plugin_path()\n    local constants = require(\"black-atom.constants\")\n    local runtimepaths = vim.api.nvim_list_runtime_paths()\n\n    local plugin_path = \"\"\n\n    for _, path in ipairs(runtimepaths) do\n        if path:find(constants.plugin_name) then\n            plugin_path = path\n            break\n        end\n    end\n\n    if plugin_path == \"\" then\n        error(\"Could not find the plugin path\")\n    end\n\n    return plugin_path\nend\n\nfunction M.build_path(base_path, ...)\n    local path = base_path\n\n    for _, subpath in ipairs({ ... }) do\n        path = path .. \"/\" .. subpath\n    end\n\n    return path\nend\n\n---Scan a directory for lua files and return their full paths\n---@param path string\n---@param ignore_pattern string\n---@param file_extension? string Default is \"lua\"\n---@return string[]\nfunction M.scan_path_for_files(path, ignore_pattern, file_extension)\n    file_extension = file_extension or \"lua\"\n\n    -- recursely scan the path for files with the given extension\n    local files = vim.fn.glob(path .. \"/**/*.\" .. file_extension, true, true)\n\n    -- filter files that match the ignore pattern\n    if ignore_pattern then\n        local filtered_files = {}\n\n        for _, file in ipairs(files) do\n            if not file:find(ignore_pattern) then\n                table.insert(filtered_files, file)\n            end\n        end\n\n        files = filtered_files\n    end\n\n    return files\nend\n\n---Convert a file path to a module path\n---@param filepath string\n---@param path_to_remove string\n---@return string\nfunction M.convert_filepath_to_modulepath(filepath, path_to_remove)\n    local function escape_pattern(text)\n        return text:gsub(\"([^%w])\", \"%%%1\")\n    end\n\n    -- replace the path_to_remove, from filepath, with an empty string\n    local module_path = filepath:gsub(escape_pattern(path_to_remove), \"\")\n\n    -- remove the extension from the file\n    module_path = vim.fn.fnamemodify(module_path, \":r\")\n\n    -- replace the \"/\" with \".\" (for unix)\n    module_path = module_path:gsub(\"/\", \".\")\n\n    -- replace the \"\\\" with \".\" (for windows)\n    module_path = module_path:gsub(\"\\\\\", \".\")\n\n    -- remove the first \".\" from the string\n    module_path = module_path:gsub(\"^.\", \"\")\n\n    return module_path\nend\n\n---Get the paths of all the modules in a subdirectory of the highlights folder\n---@param highlight_maps_path string\n---@param ignore_pattern string\n---@return string[]\nfunction M.get_highlight_modules(highlight_maps_path, ignore_pattern)\n    local plugin_path = M.get_plugin_path()\n\n    local highlight_files = M.scan_path_for_files(M.build_path(plugin_path, highlight_maps_path), ignore_pattern)\n\n    local module_pathes = vim.tbl_map(function(file_path)\n        local path_to_remove = M.build_path(plugin_path, \"lua\")\n        return M.convert_filepath_to_modulepath(file_path, path_to_remove)\n    end, highlight_files)\n\n    return module_pathes\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/highlights.lua\nlocal M = {}\n\n---Extends a highlight definition with a code style definition\n---@param highlight BlackAtom.HighlightDefinition\n---@param code_style? BlackAtom.HighlightDefinition\n---@return BlackAtom.HighlightDefinition\nfunction M.ext_hl(highlight, code_style)\n    return vim.tbl_deep_extend(\"force\", highlight, code_style)\nend\n\n---Returns the appropriate highlight value based on the provided conditions.\n---If no conditions evaluate to true, the default highlight value is returned.\n---@param default_highlight string The default highlight value to return if no conditions are true.\n---@param conditional_highlight_map table<boolean, string>\n---@return string\nfunction M.cond_hl(default_highlight, conditional_highlight_map)\n    local final_highlight = default_highlight\n\n    for condition, highlight in pairs(conditional_highlight_map) do\n        if condition then\n            final_highlight = highlight\n        end\n    end\n\n    return final_highlight\nend\n\nfunction M.building_error_notification(message)\n    local notification_opts = {\n        title = \"Black Atom - Highlights Error\",\n        timeout = 10000, -- Timeout in milliseconds; set to 0 for no timeout\n        hl_group = \"ErrorMsg\", -- Highlight group for the notification text\n        close_on_click = true, -- Close the notification when clicked\n    }\n\n    require(\"black-atom.lib.ui\").notify(message, vim.log.levels.ERROR, notification_opts)\nend\n\n---@param colors BlackAtom.Theme.Colors\n---@param config BlackAtom.Config\n---@return BlackAtom.Highlights\nfunction M.build_highlights_map(colors, config)\n    local constants = require(\"black-atom.constants\")\n    local default_ignore_pattern = \".*_template.lua$\"\n    local highlight_modules =\n        require(\"black-atom.lib.files\").get_highlight_modules(constants.highlights_path, default_ignore_pattern)\n\n    local highlights_map = M.aggregate_highlight_maps(highlight_modules, colors, config)\n\n    if config.debug then\n        require(\"black-atom.lib.debug\").write_debug_highlights_file(colors, highlight_modules, highlights_map)\n    end\n\n    return highlights_map\nend\n\n---Aggregate the highlight maps from the highlight files\n---@param files string[]\n---@param colors BlackAtom.Theme.Colors\n---@param config BlackAtom.Config\n---@return BlackAtom.Highlights\nfunction M.aggregate_highlight_maps(files, colors, config)\n    local highlights_map = {}\n\n    for _, file in ipairs(files) do\n        ---@type BlackAtom.HighlightsSpec\n        local highlight_map_extension = require(file)\n\n        -- Check if the highlight map is enabled - Default to true if it's not set\n        local highlight_map_is_enabled = highlight_map_extension.enabled == nil or highlight_map_extension.enabled\n\n        -- If the highlight map is enabled, get the map from the extension and add it to the highlights map\n        if highlight_map_is_enabled then\n            -- If a file does not have a map function, print a warning and skip its highlights\n            if not highlight_map_extension.map then\n                M.building_error_notification(\"Error: Highlight map extension does not have a map method: \" .. file)\n            else\n                ---@type BlackAtom.Highlights\n                local highlights = highlight_map_extension.map(colors, config)\n\n                -- Check for duplicate highlight keys and print a warning if one is found\n                for key, value in pairs(highlights) do\n                    if highlights_map[key] then\n                        M.building_error_notification(\"Error: Duplicate highlight key found: \" .. key)\n                    else\n                        highlights_map[key] = value\n                    end\n                end\n            end\n        end\n    end\n\n    return vim.tbl_deep_extend(\"force\", {}, highlights_map)\nend\n\n---Apply the highlights to the editor\n---@param highlight_groups BlackAtom.Highlights\nfunction M.set(highlight_groups)\n    for group_name, group_definition in pairs(highlight_groups) do\n        vim.api.nvim_set_hl(0, group_name, {\n            fg = group_definition.fg or \"none\",\n            bg = group_definition.bg or \"none\",\n            sp = group_definition.sp or \"none\",\n            bold = group_definition.bold or false,\n            italic = group_definition.italic or false,\n            reverse = group_definition.reverse or false,\n            underline = group_definition.underline or false,\n            underdouble = group_definition.underdouble or false,\n            underdashed = group_definition.underdashed or false,\n            underdotted = group_definition.underdotted or false,\n            strikethrough = group_definition.strikethrough or false,\n            undercurl = group_definition.undercurl or false,\n            standout = group_definition.standout or false,\n            link = group_definition.link or nil,\n        })\n    end\nend\n\n---@param colors BlackAtom.Theme.Colors\nfunction M.set_term(colors)\n    vim.g.terminal_color_0 = colors.palette.gray\n    vim.g.terminal_color_1 = colors.palette.red\n    vim.g.terminal_color_2 = colors.palette.green\n    vim.g.terminal_color_3 = colors.palette.yellow\n    vim.g.terminal_color_4 = colors.palette.blue\n    vim.g.terminal_color_5 = colors.palette.magenta\n    vim.g.terminal_color_6 = colors.palette.cyan\n    vim.g.terminal_color_7 = colors.palette.light_gray\n    vim.g.terminal_color_8 = colors.palette.black\n    vim.g.terminal_color_9 = colors.palette.red\n    vim.g.terminal_color_10 = colors.palette.green\n    vim.g.terminal_color_11 = colors.palette.yellow\n    vim.g.terminal_color_12 = colors.palette.blue\n    vim.g.terminal_color_13 = colors.palette.magenta\n    vim.g.terminal_color_14 = colors.palette.cyan\n    vim.g.terminal_color_15 = colors.palette.white\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/init.lua\n---@class BlackAtom.Lib\nlocal M = {\n    color = require(\"black-atom.lib.color\"),\n    ui = require(\"black-atom.lib.ui\"),\n    highlights = require(\"black-atom.lib.highlights\"),\n    files = require(\"black-atom.lib.files\"),\n    debug = require(\"black-atom.lib.debug\"),\n    bg = require(\"black-atom.lib.bg\"),\n    themes = require(\"black-atom.lib.themes\"),\n    validate = require(\"black-atom.lib.validate\"),\n    windows = require(\"black-atom.lib.windows\"),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/theme_factory.lua\nlocal M = {}\n\n---@class BlackAtom.Theme.UI.LayerFeedback\n---@field error string\n---@field warn string\n---@field info string\n---@field hint string\n---@field success string\n\n---@class BlackAtom.Theme.UI.LayerDiff\n---@field add string\n---@field delete string\n---@field modify string\n---@field text string\n\n---@class BlackAtom.Theme.UI.LayerConfig\n---@field bg string Base background color\n---@field fg string Base foreground color\n---@field accent string Accent color\n---@field muted string Color for muted elements\n---@field feedback BlackAtom.Theme.UI.LayerFeedback Layer-specific feedback colors\n---@field diff BlackAtom.Theme.UI.LayerDiff Layer-specific diff colors\n---@field border? string Optional border color for the layer\n\n-- Helper Functions\n---@param bg string Background color\n---@param fg string Foreground color\n---@param border? string Optional border color\n---@return BlackAtom.Theme.UI.Variant\nfunction M.create_variant(bg, fg, border)\n    return {\n        bg = bg,\n        fg = fg,\n        border = border,\n    }\nend\n\n---@param config BlackAtom.Theme.UI.LayerConfig\n---@return BlackAtom.Theme.UI.Layer\nfunction M.create_layer(config)\n    return {\n        -- Base colors\n        bg = config.bg,\n        fg = config.fg,\n        border = config.border,\n\n        -- States\n        accent = M.create_variant(config.accent, config.fg, config.border),\n        muted = M.create_variant(config.bg, config.muted, config.border),\n        contrast = M.create_variant(config.fg, config.bg, config.border),\n        disabled = M.create_variant(config.bg, config.muted, config.border),\n        cursor = M.create_variant(config.accent, config.bg, config.border),\n\n        -- Selection\n        visual = M.create_variant(config.accent, config.fg, config.border),\n        search = M.create_variant(config.feedback.warn, config.bg, config.border),\n        match = M.create_variant(config.accent, config.fg, config.border),\n\n        -- Feedback\n        error = M.create_variant(config.bg, config.feedback.error, config.border),\n        warn = M.create_variant(config.bg, config.feedback.warn, config.border),\n        info = M.create_variant(config.bg, config.feedback.info, config.border),\n        hint = M.create_variant(config.bg, config.feedback.hint, config.border),\n        success = M.create_variant(config.bg, config.feedback.success, config.border),\n\n        -- Diff\n        diff_add = M.create_variant(config.bg, config.diff.add, config.border),\n        diff_delete = M.create_variant(config.bg, config.diff.delete, config.border),\n        diff_modify = M.create_variant(config.bg, config.diff.modify, config.border),\n        diff_text = M.create_variant(config.bg, config.diff.text, config.border),\n    }\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/themes.lua\nlocal M = {}\n\n---Notify the user about the status of the current theme\n---@param theme_meta BlackAtom.Theme.Meta\n---@return nil\nfunction M.dev_status_warning(theme_meta)\n    if theme_meta.status == \"development\" then\n        local error_message = \"Theme '\"\n            .. theme_meta.label\n            .. \"' is currently in development status. This is not ready to be used.\"\n\n        require(\"black-atom.lib.ui\").notify(error_message, vim.log.levels.ERROR, {\n            title = \"Black Atom - Error\",\n            timeout = 5000,\n            icon = \" \",\n        })\n    end\n\n    if theme_meta.status == \"beta\" then\n        local error_message = \"Theme '\" .. theme_meta.label .. \"' is currently in beta status. Use at your own risk.\"\n\n        require(\"black-atom.lib.ui\").notify(error_message, vim.log.levels.WARN, {\n            title = \"Black Atom - Warning\",\n            timeout = 5000,\n            icon = \"\",\n        })\n    end\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/ui.lua\nlocal M = {}\n\n---Notification which conditionally calls `nvim-notify` when available\n---@param message string Notification message\n---@param level? number Log level - Use `vim.log.levels`\n---@param opts? table<string, any> nvim-notify options. See notify.Options\n---@return nil\n---```lua\n-----Example:\n---notify(\"Hello World\", vim.log.levels.INFO, { title = \"Hello\" })\n---```\nfunction M.notify(message, level, opts)\n    level = level or vim.log.levels.INFO\n    opts = opts or {}\n\n    local nvim_notify_ok, nvim_notify = pcall(require, \"notify\")\n\n    if nvim_notify_ok then\n        nvim_notify(\n            message,\n            level,\n            vim.tbl_deep_extend(\"force\", opts, {\n                background_colour = \"NormalFloat\",\n                render = \"default\",\n                stages = \"static\",\n            })\n        )\n    else\n        vim.notify(message, level, opts)\n    end\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/validate.lua\nlocal M = {}\n\nlocal function in_list(value, list)\n    for _, v in ipairs(list) do\n        if v == value then\n            return true\n        end\n    end\n    return false\nend\n\nlocal function validate_theme(theme)\n    return theme ~= nil and theme ~= \"\", \"Invalid theme specified\"\nend\n\n-- Validate `BlackAtom.HighlightDefinition` type\nlocal function validate_highlight_definition(option)\n    if type(option) ~= \"table\" then\n        return false, \"expected a table for highlight definition\"\n    end\n\n    for key, value in pairs(option) do\n        local valid_keys = {\n            fg = \"string\",\n            bg = \"string\",\n            sp = \"string\",\n            bold = \"boolean\",\n            italic = \"boolean\",\n            blend = \"number\",\n            standout = \"boolean\",\n            underline = \"boolean\",\n            undercurl = \"boolean\",\n            underdouble = \"boolean\",\n            underdotted = \"boolean\",\n            underdashed = \"boolean\",\n            strikethrough = \"boolean\",\n            reverse = \"boolean\",\n            link = \"string\",\n        }\n\n        local expected_type = valid_keys[key]\n        if not expected_type then\n            return false, \"unexpected key in highlight definition: \" .. key\n        elseif type(value) ~= expected_type then\n            return false, \"expected \" .. expected_type .. \" for key \" .. key .. \", got \" .. type(value)\n        end\n    end\n\n    return true\nend\n\n-- Validates the main config structure\n---@param options BlackAtom.Config\nfunction M.config(options)\n    vim.validate({\n        debug = { options.debug, \"boolean\", true },\n        theme = { options.theme, validate_theme, \"Invalid theme specified\" },\n        term_colors = { options.term_colors, \"boolean\", true },\n        styles = { options.styles, \"table\", true },\n    })\n\n    -- Further nested validations...\n    if options.styles then\n        vim.validate({\n            cmp_kind_color_mode = {\n                options.styles.cmp_kind_color_mode,\n                function(value)\n                    return in_list(value, { \"fg\", \"bg\" })\n                end,\n                \"cmp_kind_color_mode must be 'fg' or 'bg'\",\n            },\n            dark_sidebars = { options.styles.dark_sidebars, \"boolean\", true },\n            transparency = {\n                options.styles.transparency,\n                function(value)\n                    return in_list(value, { \"full\", \"partial\", \"none\" })\n                end,\n                \"transparency must be 'full', 'partial', or 'none'\",\n            },\n            ending_tildes = { options.styles.ending_tildes, \"boolean\", true },\n        })\n\n        if options.styles.diagnostics then\n            vim.validate({\n                undercurl = { options.styles.diagnostics.undercurl, \"boolean\", true },\n                background = { options.styles.diagnostics.background, \"boolean\", true },\n            })\n        end\n\n        if options.styles.syntax then\n            for syntax_key, syntax_value in pairs(options.styles.syntax) do\n                local allowed_keys = {\n                    \"comments\",\n                    \"keywords\",\n                    \"functions\",\n                    \"strings\",\n                    \"variables\",\n                    \"messages\",\n                }\n\n                if not in_list(syntax_key, allowed_keys) then\n                    error(\n                        \"Invalid syntax key: '\"\n                            .. syntax_key\n                            .. \"'. Must be one of: \"\n                            .. table.concat(allowed_keys, \", \")\n                    )\n                end\n\n                local is_valid, err = validate_highlight_definition(syntax_value)\n                if not is_valid then\n                    error(\"Invalid syntax style for \" .. syntax_key .. \": \" .. err)\n                end\n            end\n        end\n    end\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/lib/windows.lua\nlocal M = {}\n\n---@param content unknown\nfunction M.open_tmp_vertical_window(content)\n    -- Open the new vertical split window\n    vim.cmd(\"vnew\")\n\n    -- Set the filetype of the buffer to `lua`\n    vim.bo.filetype = \"lua\"\n\n    -- Ensure the buffer is wiped when closed\n    vim.bo.bufhidden = \"wipe\"\n\n    local content_str = vim.inspect(content)\n\n    vim.api.nvim_buf_set_lines(0, 0, -1, false, vim.split(content_str, \"\\n\"))\n\n    -- Mark the buffer as unmodified\n    vim.bo.modified = false\n\n    -- Make the buffer read-only\n    vim.bo.modifiable = false\nend\n\nreturn M\n```\n\n\nthemes\ncrbn\n```lua nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-crbn-null\",\n    label = \"Black Atom - CRBN [NULL]\",\n    collection = {\n        key = \"crbn\",\n        label = \"CRBN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰛸 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    -- \"#202933\",\n    -- \"#263440\",\n    -- \"#35495c\",\n\n    \"#0d0d0d\",\n    \"#131a20\",\n    \"#253341\",\n\n    -- Mids\n    \"#566575\",\n    \"#7b8d9e\",\n    \"#a1b5c5\",\n\n    -- Highs\n    \"#d3d9df\",\n    \"#e0e6ec\",\n    \"#ebf2f8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[5],\n\n    dark_red = \"#f33e25\",\n    red = \"#ff624d\",\n\n    dark_green = \"#6ad147\",\n    green = \"#8bdb70\",\n\n    dark_yellow = \"#ee9366\",\n    yellow = \"#ff8357\",\n\n    dark_blue = \"#4481ef\",\n    blue = \"#679cff\",\n\n    dark_magenta = M.primaries[5],\n    magenta = M.primaries[6],\n\n    dark_cyan = M.primaries[5],\n    cyan = M.primaries[6],\n\n    dark_gray = M.primaries[7],\n    white = M.primaries[9],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.crbn.syntax_dark\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.crbn.ui_dark\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-crbn-supr\",\n    label = \"Black Atom - CRBN [SUPR]\",\n    collection = {\n        key = \"crbn\",\n        label = \"CRBN\",\n    },\n    appearance = \"light\",\n    icon = \" 󰛸 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1d2730\",\n    \"#344859\",\n    \"#415a70\",\n\n    -- Mids\n    \"#6c7f92\",\n    \"#8999a8\",\n    \"#a2b5c5\",\n\n    -- Highs\n    \"#e2e6ea\",\n    \"#f0f3f6\",\n    \"#feffff\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[4],\n\n    dark_red = \"#f2280d\",\n    red = \"#ff4b33\",\n\n    dark_green = \"#59cc33\",\n    green = \"#7ad65c\",\n\n    dark_yellow = \"#ff4302\",\n    yellow = \"#FF6833\",\n\n    dark_blue = \"#1661EB\",\n    blue = \"#337AFF\",\n\n    dark_magenta = M.primaries[5],\n    magenta = M.primaries[6],\n\n    dark_cyan = M.primaries[3],\n    cyan = M.primaries[2],\n\n    light_gray = M.primaries[7],\n    white = M.primaries[9],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.crbn.syntax_light\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.crbn.ui_light\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/crbn/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[6],\n            builtin = primaries[6],\n            member = primaries[5],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[7],\n        },\n        string = {\n            default = primaries[5],\n            doc = primaries[4],\n            regexp = primaries[9],\n            escape = primaries[9],\n        },\n        constant = {\n            default = primaries[6],\n            builtin = primaries[7],\n        },\n        module = {\n            default = palette.yellow,\n        },\n        boolean = {\n            default = palette.gray,\n        },\n        number = {\n            default = primaries[6],\n        },\n        type = {\n            default = primaries[9],\n            builtin = primaries[7],\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = primaries[8],\n            import = primaries[6],\n            export = primaries[6],\n        },\n        operator = {\n            default = palette.white,\n        },\n        punctuation = {\n            default = palette.white,\n            delimiter = palette.white,\n            bracket = palette.white,\n            special = palette.white,\n        },\n        comment = {\n            default = palette.gray,\n            doc = primaries[6],\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[7],\n                bg = primaries[2],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[5],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[2],\n            builtin = primaries[2],\n            member = primaries[3],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[3],\n        },\n        string = {\n            default = primaries[4],\n            doc = primaries[6],\n            regexp = primaries[1],\n            escape = primaries[1],\n        },\n        constant = {\n            default = primaries[1],\n            builtin = primaries[1],\n        },\n        module = {\n            default = palette.blue,\n        },\n        boolean = {\n            default = palette.gray,\n        },\n        number = {\n            default = primaries[4],\n        },\n        type = {\n            default = primaries[1],\n            builtin = primaries[3],\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = primaries[3],\n            import = primaries[5],\n            export = primaries[5],\n        },\n        operator = {\n            default = palette.black,\n        },\n        punctuation = {\n            default = palette.black,\n            delimiter = palette.black,\n            bracket = palette.black,\n            special = palette.black,\n        },\n        comment = {\n            default = palette.gray,\n            doc = primaries[5],\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                main = primaries[1], -- primary\n                dark = primaries[2], -- secondary\n                light = primaries[3], -- tertiary\n            },\n            active = primaries[3],\n            match = {\n                active = palette.magenta,\n                passive = primaries[3],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                main = primaries[9],\n                dark = primaries[8],\n                light = primaries[7],\n            },\n            active = palette.yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/ui_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[8], -- secondary\n                main = primaries[9], -- primary\n                light = primaries[7], -- tertiary\n            },\n            active = primaries[7],\n            match = {\n                active = palette.magenta,\n                passive = primaries[8],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            active = palette.yellow,\n            invert = primaries[8],\n            neutral = primaries[4],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\ndefault\n```lua nvim/lua/black-atom/themes/default/black-atom-engineering.lua\nlocal ui = require(\"black-atom.themes.default.ui_dark\")\nlocal syntax = require(\"black-atom.themes.default.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-engineering\",\n    label = \"Black Atom - Engineering\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \"󱁤 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#202b2b\",\n    \"#23332f\",\n    \"#2d423c\",\n    \"#375149\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#91bcad\",\n\n    -- Highs\n    \"#9bdebe\",\n    \"#abe7ca\",\n    \"#c1efd5\",\n    \"#cef6de\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ef95ba\",\n    red = \"#f4acc9\",\n\n    dark_green = \"#5dba5d\",\n    green = \"#80c980\",\n\n    dark_yellow = \"#c6db6e\",\n    yellow = \"#a6dc6e\",\n\n    dark_blue = M.primaries[8],\n    blue = M.primaries[10],\n\n    dark_magenta = \"#a2b0e0\",\n    magenta = \"#b6bee0\",\n\n    dark_cyan = \"#59bf6f\",\n    cyan = \"#75d689\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-medical.lua\nlocal ui = require(\"black-atom.themes.default.ui_light\")\nlocal syntax = require(\"black-atom.themes.default.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-medical\",\n    label = \"Black Atom - Medical\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e2229\",\n    \"#2b3b33\",\n    \"#384b42\",\n    \"#425953\",\n\n    -- Mids\n    \"#476a5f\",\n    \"#517a65\",\n    \"#669a84\",\n    \"#77a494\",\n\n    -- Highs\n    \"#a6bdb2\",\n    \"#b7cac1\",\n    \"#c2d3cb\",\n    \"#d0e0d8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#db577c\",\n    red = \"#ec7aa2\",\n\n    dark_green = \"#357c35\",\n    green = \"#3c8e3c\",\n\n    dark_yellow = \"#d9950f\",\n    yellow = \"#60a918\",\n\n    dark_blue = M.primaries[6],\n    blue = M.primaries[5],\n\n    dark_magenta = \"#7768cd\",\n    magenta = \"#998ed9\",\n\n    dark_cyan = \"#389248\",\n    cyan = \"#4aaa5b\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-operations.lua\nlocal ui = require(\"black-atom.themes.default.ui_dark\")\nlocal syntax = require(\"black-atom.themes.default.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-operations\",\n    label = \"Black Atom - Operations\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#252e2c\",\n    \"#2e3f3b\",\n    \"#384e48\",\n    \"#425d55\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#91bcad\",\n\n    -- Highs\n    \"#9bdebe\",\n    \"#abe7ca\",\n    \"#c1efd5\",\n    \"#cef6de\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ef95ba\",\n    red = \"#f4acc9\",\n\n    dark_green = \"#5dba5d\",\n    green = \"#80c980\",\n\n    dark_yellow = \"#c6db6e\",\n    yellow = \"#a6dc6e\",\n\n    dark_blue = M.primaries[8],\n    blue = M.primaries[10],\n\n    dark_magenta = \"#a2b0e0\",\n    magenta = \"#b6bee0\",\n\n    dark_cyan = \"#59bf6f\",\n    cyan = \"#75d689\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-research.lua\nlocal ui = require(\"black-atom.themes.default.ui_light\")\nlocal syntax = require(\"black-atom.themes.default.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-research\",\n    label = \"Black Atom - Research\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e2229\",\n    \"#2b3b33\",\n    \"#384b42\",\n    \"#425953\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#95b8ac\",\n\n    -- Highs\n    \"#b5c8bf\",\n    \"#c6d5ce\",\n    \"#d4e0da\",\n    \"#dfeae5\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#db577c\",\n    red = \"#ec7aa2\",\n\n    dark_green = \"#4a9a4a\",\n    green = \"#53aa53\",\n\n    dark_yellow = \"#e69d0c\",\n    yellow = \"#66ad1f\",\n\n    dark_blue = M.primaries[6],\n    blue = M.primaries[5],\n\n    dark_magenta = \"#887bd3\",\n    magenta = \"#998ed9\",\n\n    dark_cyan = \"#459f55\",\n    cyan = \"#4db15e\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = palette.blue,\n            builtin = palette.blue,\n            member = palette.dark_blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = primaries[10],\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = primaries[8],\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = palette.gray,\n                bg = palette.black,\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[8],\n            delimiter = primaries[9],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[5],\n            builtin = primaries[3],\n            member = primaries[5],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[5],\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.gray,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = primaries[8],\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = primaries[7],\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = palette.dark_green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\njpn\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_light\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-koyo-hiru\",\n    label = \"Black Atom - JPN - Koyo [Hiru]\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#373240\",\n    \"#4a4457\",\n    \"#544a66\",\n    \"#605673\",\n\n    -- Mids\n    \"#605872\",\n    \"#7a7190\",\n    \"#958da6\",\n    \"#b0aabc\",\n\n    -- Highs\n    \"#d1b9a8\",\n    \"#dcc9bc\",\n    \"#e8d5c8\",\n    \"#f6e2d4\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[6],\n\n    dark_red = \"#cc4233\",\n    red = \"#e05252\",\n\n    dark_green = \"#2a6f4e\",\n    green = \"#389468\",\n\n    dark_yellow = \"#d2632d\",\n    yellow = \"#e27e37\",\n\n    dark_blue = \"#a65973\",\n    blue = \"#8859a6\",\n\n    dark_magenta = \"#de553b\",\n    magenta = \"#f57056\",\n\n    dark_cyan = \"#4f7c6e\",\n    cyan = \"#659988\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_dark\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-koyo-yoru\",\n    label = \"Black Atom - JPN - Koyo [Yoru]\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#271f27\",\n    \"#332733\",\n    \"#3f2f3f\",\n    \"#4a384a\",\n\n    -- Mids\n    \"#605872\",\n    \"#7a7190\",\n    \"#958da6\",\n    \"#b0aabc\",\n\n    -- Highs\n    \"#dab18c\",\n    \"#e0be9f\",\n    \"#e6cbb2\",\n    \"#ecd8c5\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#c2564b\",\n    red = \"#d6675c\",\n\n    dark_green = \"#53ad82\",\n    green = \"#7ab89b\",\n\n    dark_yellow = \"#e79253\",\n    yellow = \"#e7aa55\",\n\n    dark_blue = \"#a88a94\",\n    blue = \"#a095a8\",\n\n    dark_magenta = \"#efa376\",\n    magenta = \"#FEBE98\",\n\n    dark_cyan = \"#68b19a\",\n    cyan = \"#8cc1b0\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_dark\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-tsuki-yoru\",\n    label = \"Black Atom - JPN - Edo Yoru\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#0f0f0f\",\n    \"#1c1c1c\",\n    \"#282828\",\n    \"#373737\",\n\n    -- Mids\n    \"#4f4f61\",\n    \"#69697f\",\n    \"#828299\",\n    \"#9d9daf\",\n\n    -- Highs\n    \"#b3b3b3\",\n    \"#cbcbcb\",\n    \"#e6e6e6\",\n    \"#ffffff\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#f2759e\",\n    red = \"#F591B2\",\n\n    dark_green = \"#71a584\",\n    green = \"#90B99F\",\n\n    dark_yellow = \"#f6a090\",\n    yellow = \"#eab899\",\n\n    dark_blue = \"#8699c1\",\n    blue = \"#a1b0cf\",\n\n    dark_magenta = \"#9789c3\",\n    magenta = \"#ACA1CF\",\n\n    dark_cyan = \"#76bdac\",\n    cyan = \"#8dd9c5\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[10],\n            builtin = primaries[8],\n            member = palette.blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_blue,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.dark_blue,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = palette.dark_blue,\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = palette.magenta,\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[8],\n            delimiter = primaries[9],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[4],\n            builtin = primaries[6],\n            member = palette.blue,\n            parameter = palette.dark_magenta,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_blue,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.dark_blue,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = palette.dark_blue,\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[4],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/ui_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[9],\n            match = {\n                active = palette.magenta,\n                passive = primaries[8],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.yellow,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nmono\n```lua nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-mono-one-dark\",\n    label = \"Black Atom - MONO - 1 [DARK]\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \"󰒲 \", -- You might want to change this icon\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows (darker)\n    \"#0e110f\",\n    \"#151917\",\n    \"#1c211f\",\n    \"#252c29\",\n\n    -- Mids\n    \"#3a4540\",\n    \"#51615a\",\n    \"#687d74\",\n    \"#81978e\",\n\n    -- Highs\n    \"#b3cccc\",\n    \"#c2d6d6\",\n    \"#d9e5e5\",\n    \"#eef3f3\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = \"#708090\", -- lack\n\n    dark_red = \"#ab5353\", -- darker red\n    red = \"#b76b6b\", -- red\n\n    dark_green = \"#648364\", -- darker green\n    green = \"#789978\", -- green\n\n    dark_yellow = \"#8f8f5f\", -- darker yellow\n    yellow = \"#abab77\", -- yellow\n\n    dark_blue = \"#5f6e8f\", -- darker blue\n    blue = \"#7788AA\", -- blue\n\n    dark_magenta = \"#cc8870\", -- darker orange\n    magenta = \"#ffaa88\", -- orange\n\n    dark_cyan = \"#5f8f8f\", -- mix of lack and green\n    cyan = \"#789990\", -- mix of lack and green\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.mono.syntax_dark\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.mono.ui_dark\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/mono/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[8],\n            builtin = palette.dark_blue,\n            member = primaries[9],\n            parameter = primaries[10],\n        },\n        property = {\n            default = primaries[9],\n        },\n        string = {\n            default = palette.green,\n            doc = primaries[7],\n            regexp = primaries[8],\n            escape = primaries[8],\n        },\n        constant = {\n            default = primaries[9],\n            builtin = primaries[8],\n        },\n        module = {\n            default = primaries[8],\n        },\n        boolean = {\n            default = primaries[8],\n        },\n        number = {\n            default = primaries[8],\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = primaries[7],\n            builtin = primaries[7],\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.dark_yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = primaries[8],\n            export = primaries[8],\n        },\n        operator = {\n            default = primaries[7],\n        },\n        punctuation = {\n            default = primaries[6],\n            delimiter = primaries[6],\n            bracket = primaries[6],\n            special = primaries[7],\n        },\n        comment = {\n            default = primaries[5],\n            doc = primaries[6],\n            todo = palette.yellow,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = primaries[10],\n                h2 = primaries[9],\n                h3 = primaries[8],\n                h4 = primaries[7],\n                h5 = primaries[6],\n                h6 = primaries[5],\n            },\n            list = {\n                default = primaries[7],\n                checked = primaries[8],\n                unchecked = primaries[6],\n            },\n            quote = primaries[7],\n            math = primaries[8],\n            link = primaries[8],\n            code = {\n                fg = primaries[7],\n                bg = primaries[2],\n            },\n        },\n        tag = {\n            default = primaries[9],\n            builtin = primaries[7],\n            custom = primaries[8],\n            attribute = primaries[7],\n            delimiter = primaries[6],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/mono/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[4],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nterra\n```lua nvim/lua/black-atom/themes/terra/fall-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-fall-day\",\n    label = \"Terra Fall Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e1e1e\",\n    \"#232323\",\n    \"#2c2928\",\n    \"#322e2b\",\n\n    -- Mids\n    \"#665c54\",\n    \"#7c6f64\",\n    \"#928374\",\n    \"#a89984\",\n\n    -- Highs\n    \"#ccc5b2\",\n    \"#d7d2c3\",\n    \"#e4decd\",\n    \"#eeeadf\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#4a7126\",\n    green = \"#58852c\",\n\n    dark_yellow = \"#cc764b\",\n    yellow = \"#d19845\",\n\n    dark_blue = \"#3d668e\",\n    blue = \"#5980a6\",\n\n    dark_magenta = \"#ab80a8\",\n    magenta = \"#a58bc1\",\n\n    dark_cyan = \"#296a50\",\n    cyan = \"#348764\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/fall-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-fall-night\",\n    label = \"Terra Fall Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#0f0e0e\",\n    \"#1a1818\",\n    \"#262423\",\n    \"#2d2926\",\n\n    -- Mids\n    \"#665c54\",\n    \"#7c6f64\",\n    \"#928374\",\n    \"#a89984\",\n\n    -- Highs\n    \"#ae9685\",\n    \"#b9a495\",\n    \"#ccbeb3\",\n    \"#d6cac2\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#c0603f\",\n    red = \"#c57054\",\n\n    dark_green = \"#7a895c\",\n    green = \"#a6bc90\",\n\n    dark_yellow = \"#ef9e74\",\n    yellow = \"#e0a66d\",\n\n    dark_blue = \"#a4a0df\",\n    blue = \"#90acd5\",\n\n    dark_magenta = \"#d2acc3\",\n    magenta = \"#c4b2d1\",\n\n    dark_cyan = \"#6a9b86\",\n    cyan = \"#7fb395\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/spring-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-spring-day\",\n    label = \"Terra Spring Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"󰧲  \",\n    status = \"beta\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#304a3f\",\n    \"#385547\",\n    \"#416353\",\n    \"#517b67\",\n\n    -- Mids\n    \"#55816a\",\n    \"#62937a\",\n    \"#78a48e\",\n    \"#8bb19e\",\n\n    -- Highs\n    \"#b9c6bf\",\n    \"#c7d1cc\",\n    \"#d4dcd8\",\n    \"#e2eae6\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#0d8a4e\",\n    green = \"#0f9d58\",\n\n    dark_yellow = \"#de7b1f\",\n    yellow = \"#e49f19\",\n\n    dark_blue = \"#3473b2\",\n    blue = \"#588dc1\",\n\n    dark_magenta = \"#B07BAC\",\n    magenta = \"#a586c6\",\n\n    dark_cyan = \"#0e945d\",\n    cyan = \"#10ab6a\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/spring-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-spring-night\",\n    label = \"Terra Spring Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \"󰧲 󰖔 \",\n    status = \"release\",\n    module_path = \"black-atom.themes.terra-spring-night\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1d201f\",\n    \"#212523\",\n    \"#272c2a\",\n    \"#313634\",\n\n    -- Mids\n    \"#394740\",\n    \"#51635a\",\n    \"#677e72\",\n    \"#82978c\",\n\n    -- Highs\n    \"#b8aa94\",\n    \"#c3b8a4\",\n    \"#d6d0c2\",\n    \"#e0ddd1\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#b95847\",\n    red = \"#ba6e5f\",\n\n    dark_green = \"#6a9f60\",\n    green = \"#8ac090\",\n\n    dark_yellow = \"#e89a61\",\n    yellow = \"#d1a762\",\n\n    dark_blue = \"#899ddc\",\n    blue = \"#99b9e6\",\n\n    dark_magenta = \"#d5a9c3\",\n    magenta = \"#c6b3da\",\n\n    dark_cyan = \"#679980\",\n    cyan = \"#85ad9f\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/summer-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-summer-day\",\n    label = \"Terra Summer Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"󰂒  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#29323d\",\n    \"#343e4d\",\n    \"#3e4b5c\",\n    \"#47576c\",\n\n    -- Mids\n    \"#506d95\",\n    \"#5979a6\",\n    \"#7b94b8\",\n    \"#8BA1C1\",\n\n    -- Highs\n    \"#b7beca\",\n    \"#c6cbd5\",\n    \"#d1d6e1\",\n    \"#e0e4eb\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#729e60\",\n    green = \"#72ae6a\",\n\n    dark_yellow = \"#e3913d\",\n    yellow = \"#dca958\",\n\n    dark_blue = \"#5c72d6\",\n    blue = \"#578fdc\",\n\n    dark_magenta = \"#8253c5\",\n    magenta = \"#c65295\",\n\n    dark_cyan = \"#619f80\",\n    cyan = \"#7bb7a4\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/summer-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-summer-night\",\n    label = \"Terra Summer Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \"󰂒 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1a1c24\",\n    \"#1f2129\",\n    \"#23262f\",\n    \"#282b35\",\n\n    -- Mids\n    \"#47506b\",\n    \"#5b678a\",\n    \"#7581a4\",\n    \"#858fae\",\n\n    -- Highs\n    \"#91a0bc\",\n    \"#9facc6\",\n    \"#bcc9db\",\n    \"#c8d7e8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#bf5441\",\n    red = \"#c06a59\",\n\n    dark_green = \"#729e60\",\n    green = \"#85b97e\",\n\n    dark_yellow = \"#f2a557\",\n    yellow = \"#dca958\",\n\n    dark_blue = \"#9f99e5\",\n    blue = \"#96b9e9\",\n\n    dark_magenta = \"#d5a9c3\",\n    magenta = \"#c4acd7\",\n\n    dark_cyan = \"#619f80\",\n    cyan = \"#7bb7a4\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        default = palette.gray,\n        variable = {\n            default = palette.blue,\n            builtin = palette.blue,\n            parameter = palette.dark_yellow,\n            member = palette.dark_blue,\n        },\n        property = {\n            default = palette.blue,\n        },\n        constant = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.dark_yellow,\n            escape = palette.red,\n        },\n        boolean = {\n            default = palette.dark_yellow,\n        },\n        number = {\n            default = palette.dark_yellow,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.cyan,\n            builtin = palette.cyan,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        keyword = {\n            default = palette.red,\n            import = palette.magenta,\n            export = palette.magenta,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = primaries[8],\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[10],\n                bg = primaries[6],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            custom = palette.yellow,\n            attribute = palette.dark_yellow,\n            delimiter = palette.dark_yellow,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = palette.blue,\n            builtin = palette.dark_blue,\n            member = palette.dark_blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.dark_blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.red,\n            import = palette.dark_green,\n            export = palette.dark_red,\n        },\n        operator = {\n            default = palette.black,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = primaries[8],\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/ui_dark.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[1]),\n                passive = darken(palette.green, 0.5, primaries[1]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.green,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[12]),\n                passive = darken(palette.green, 0.15, primaries[12]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.yellow,\n            invert = primaries[11],\n            -- this is a comment\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/winter-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-winter-day\",\n    label = \"Terra Winter Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#192125\",\n    \"#1d272c\",\n    \"#212c31\",\n    \"#24333a\",\n\n    -- Mids\n    \"#475e6a\",\n    \"#516c7a\",\n    \"#5b7988\",\n    \"#7393a3\",\n\n    -- Highs\n    \"#b6c2c9\",\n    \"#c5ced3\",\n    \"#d4dade\",\n    \"#e2e6e9\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#4a7126\",\n    green = \"#58852c\",\n\n    dark_yellow = \"#cc764b\",\n    yellow = \"#d19845\",\n\n    dark_blue = \"#3d668e\",\n    blue = \"#5980a6\",\n\n    dark_magenta = \"#ab80a8\",\n    magenta = \"#a58bc1\",\n\n    dark_cyan = \"#296a50\",\n    cyan = \"#348764\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/winter-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-winter-night\",\n    label = \"Terra Winter Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#18191b\",\n    \"#212225\",\n    \"#2c2d30\",\n    \"#34363b\",\n\n    -- Mids\n    \"#454955\",\n    \"#5b6171\",\n    \"#707a92\",\n    \"#8a8fa7\",\n\n    -- Highs\n    \"#a6afc1\",\n    \"#c0c8d8\",\n    \"#cdd6e4\",\n    \"#dbe4ef\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#a65959\",\n    red = \"#b86a6a\",\n\n    dark_green = \"#507765\",\n    green = \"#5e9e8b\",\n\n    dark_yellow = \"#eba778\",\n    yellow = \"#d3b17a\",\n\n    dark_blue = \"#94acb8\",\n    blue = \"#8c9bc2\",\n\n    dark_magenta = \"#b793b7\",\n    magenta = \"#c8adc8\",\n\n    dark_cyan = \"#568383\",\n    cyan = \"#67a5a5\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Variant\n---@field bg string\n---@field fg string\n---@field border? string\n\n---@class BlackAtom.Theme.UI.StateVariant\n---@field bg string                                             Background color for this state\n---@field fg string                                             Foreground color for this state\n---@field border? string                                        Optional border color\n\n---@class BlackAtom.Theme.UI.Layer\n---@field bg string                                             Default background\n---@field fg string                                             Default foreground\n---@field border? string                                        Optional border\n---@field accent BlackAtom.Theme.UI.StateVariant                Highlighted content\n---@field muted BlackAtom.Theme.UI.StateVariant                 De-emphasized content\n---@field contrast BlackAtom.Theme.UI.StateVariant              Inverted areas\n---@field disabled BlackAtom.Theme.UI.StateVariant              Disabled elements\n---@field visual BlackAtom.Theme.UI.StateVariant                Visual selections\n---@field search BlackAtom.Theme.UI.StateVariant                Search highlights\n---@field match BlackAtom.Theme.UI.StateVariant                 Matching elements\n---@field error BlackAtom.Theme.UI.StateVariant                 Error indicators\n---@field warn BlackAtom.Theme.UI.StateVariant                  Warning indicators\n---@field info BlackAtom.Theme.UI.StateVariant                  Info indicators\n---@field hint BlackAtom.Theme.UI.StateVariant                  Hint indicators\n---@field success BlackAtom.Theme.UI.StateVariant               Success indicators\n---@field diff_add BlackAtom.Theme.UI.StateVariant              Added content\n---@field diff_delete BlackAtom.Theme.UI.StateVariant           Deleted content\n---@field diff_modify BlackAtom.Theme.UI.StateVariant           Modified content\n---@field diff_text BlackAtom.Theme.UI.StateVariant             Diff text content\n\n---@class BlackAtom.Theme.UI\n---@field ground BlackAtom.Theme.UI.Layer                       Darkest/deepest layer (e.g. Sidebar, Statusline)\n---@field surface BlackAtom.Theme.UI.Layer                      Main elements layer (e.g. Editor)\n---@field float BlackAtom.Theme.UI.Layer                        Floating elements layer (e.g. Popups, Overlays, Dropdowns)\n---@field sky BlackAtom.Theme.UI.Layer                          Highest layer for temporary elements (e.g. Notifications, Tooltips)\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n```\n\n\nlualine/themes\n```lua nvim/lua/lualine/themes/black_atom.lua\nlocal API = require(\"black-atom.api\")\nlocal config = require(\"black-atom.config\").get()\n\nlocal colors = API:get_colors()\n\nlocal cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\nlocal fg = colors.ui.fg\nlocal bg = colors.ui.bg\nlocal palette = colors.palette\n\nM.normal = {\n    a = {\n        fg = fg.active,\n        bg = bg.active,\n    },\n    b = {\n        fg = fg.primary.dark,\n        bg = cond_hl(bg.primary.main, {\n            [config.transparency == \"partial\"] = bg.primary.main,\n            [config.transparency == \"full\"] = colors.none,\n        }),\n    },\n    c = {\n        fg = fg.primary.dark,\n        bg = cond_hl(bg.primary.main, {\n            [config.transparency == \"partial\"] = bg.primary.main,\n            [config.transparency == \"full\"] = colors.none,\n        }),\n    },\n}\n\nM.inactive = {\n    a = {\n        fg = fg.active,\n        bg = bg.active,\n    },\n    b = {\n        fg = fg.neutral,\n        bg = cond_hl(bg.primary.main, {\n            [config.transparency == \"partial\"] = bg.primary.main,\n            [config.transparency == \"full\"] = colors.none,\n        }),\n    },\n    c = {\n        fg = fg.neutral,\n        bg = cond_hl(bg.primary.light, {\n            [config.transparency == \"partial\"] = bg.primary.main,\n            [config.transparency == \"full\"] = colors.none,\n        }),\n    },\n}\n\nM.visual = {\n    a = { fg = fg.invert, bg = palette.magenta },\n}\n\nM.replace = {\n    a = { fg = fg.invert, bg = palette.red },\n}\n\nM.insert = {\n    a = { fg = fg.invert, bg = palette.blue },\n}\n\nM.command = {\n    a = { fg = fg.invert, bg = palette.green },\n}\n\nM.terminal = {\n    a = { fg = fg.invert, bg = palette.cyan },\n}\n\nfor _, mode in pairs(M) do\n    mode.a.gui = \"bold,italic\"\nend\n\nreturn M\n```\n\n\n\nWhat can you see?\nThis appears to be a Neovim colorscheme plugin called \"black-atom\" with a comprehensive and well-organized structure. Here are the key observations:\n\n1. Architecture:\n- Uses a modular Lua-based architecture\n- Has clear separation of concerns between different components\n- Well-typed using LuaLS annotations\n- Follows modern Neovim plugin practices\n\n2. Main Components:\n- Core configuration system\n- API for accessing theme data\n- Highlight management system\n- Multiple theme collections\n- Lualine integration\n\n3. Theme Collections:\n- Default themes\n- Terra themes (seasonal variations)\n- JPN themes\n- CRBN themes\n- MONO themes\n\n4. Features:\n- Support for both light and dark variants\n- Comprehensive syntax highlighting\n- Plugin-specific highlighting\n- Terminal colors support\n- Transparency options\n- Debug capabilities\n- Custom diagnostic styling\n- Support for various UI elements\n\n5. Code Quality:\n- Extensive type definitions\n- Modular and reusable components\n- Consistent code style\n- Good documentation\n- Error handling\n- Helper utilities for colors and highlights\n\n6. Notable Design Patterns:\n- Factory pattern for theme creation\n- Builder pattern for highlights\n- Configuration validation\n- Conditional highlighting system\n- Color manipulation utilities\n\n7. Plugin Support:\n- Built-in support for many popular Neovim plugins\n- Template for adding new plugin highlights\n- Extensible plugin highlight system\n\nThis appears to be a professional-grade Neovim colorscheme system with emphasis on maintainability, extensibility, and user customization.\n\nLet me know if you'd like me to dive deeper into any particular aspect.\nAs you can see, the declared types differ from the current implemententation in the theme definition files:\n\nSymbols for nvim/lua/black-atom/types.lua:\n\n\nnvim/lua/black-atom/themes\ncrbn\n```lua nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-crbn-null\",\n    label = \"Black Atom - CRBN [NULL]\",\n    collection = {\n        key = \"crbn\",\n        label = \"CRBN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰛸 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    -- \"#202933\",\n    -- \"#263440\",\n    -- \"#35495c\",\n\n    \"#0d0d0d\",\n    \"#131a20\",\n    \"#253341\",\n\n    -- Mids\n    \"#566575\",\n    \"#7b8d9e\",\n    \"#a1b5c5\",\n\n    -- Highs\n    \"#d3d9df\",\n    \"#e0e6ec\",\n    \"#ebf2f8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[5],\n\n    dark_red = \"#f33e25\",\n    red = \"#ff624d\",\n\n    dark_green = \"#6ad147\",\n    green = \"#8bdb70\",\n\n    dark_yellow = \"#ee9366\",\n    yellow = \"#ff8357\",\n\n    dark_blue = \"#4481ef\",\n    blue = \"#679cff\",\n\n    dark_magenta = M.primaries[5],\n    magenta = M.primaries[6],\n\n    dark_cyan = M.primaries[5],\n    cyan = M.primaries[6],\n\n    dark_gray = M.primaries[7],\n    white = M.primaries[9],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.crbn.syntax_dark\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.crbn.ui_dark\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-crbn-supr\",\n    label = \"Black Atom - CRBN [SUPR]\",\n    collection = {\n        key = \"crbn\",\n        label = \"CRBN\",\n    },\n    appearance = \"light\",\n    icon = \" 󰛸 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1d2730\",\n    \"#344859\",\n    \"#415a70\",\n\n    -- Mids\n    \"#6c7f92\",\n    \"#8999a8\",\n    \"#a2b5c5\",\n\n    -- Highs\n    \"#e2e6ea\",\n    \"#f0f3f6\",\n    \"#feffff\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[4],\n\n    dark_red = \"#f2280d\",\n    red = \"#ff4b33\",\n\n    dark_green = \"#59cc33\",\n    green = \"#7ad65c\",\n\n    dark_yellow = \"#ff4302\",\n    yellow = \"#FF6833\",\n\n    dark_blue = \"#1661EB\",\n    blue = \"#337AFF\",\n\n    dark_magenta = M.primaries[5],\n    magenta = M.primaries[6],\n\n    dark_cyan = M.primaries[3],\n    cyan = M.primaries[2],\n\n    light_gray = M.primaries[7],\n    white = M.primaries[9],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.crbn.syntax_light\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.crbn.ui_light\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/crbn/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[6],\n            builtin = primaries[6],\n            member = primaries[5],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[7],\n        },\n        string = {\n            default = primaries[5],\n            doc = primaries[4],\n            regexp = primaries[9],\n            escape = primaries[9],\n        },\n        constant = {\n            default = primaries[6],\n            builtin = primaries[7],\n        },\n        module = {\n            default = palette.yellow,\n        },\n        boolean = {\n            default = palette.gray,\n        },\n        number = {\n            default = primaries[6],\n        },\n        type = {\n            default = primaries[9],\n            builtin = primaries[7],\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = primaries[8],\n            import = primaries[6],\n            export = primaries[6],\n        },\n        operator = {\n            default = palette.white,\n        },\n        punctuation = {\n            default = palette.white,\n            delimiter = palette.white,\n            bracket = palette.white,\n            special = palette.white,\n        },\n        comment = {\n            default = palette.gray,\n            doc = primaries[6],\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[7],\n                bg = primaries[2],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[5],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[2],\n            builtin = primaries[2],\n            member = primaries[3],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[3],\n        },\n        string = {\n            default = primaries[4],\n            doc = primaries[6],\n            regexp = primaries[1],\n            escape = primaries[1],\n        },\n        constant = {\n            default = primaries[1],\n            builtin = primaries[1],\n        },\n        module = {\n            default = palette.blue,\n        },\n        boolean = {\n            default = palette.gray,\n        },\n        number = {\n            default = primaries[4],\n        },\n        type = {\n            default = primaries[1],\n            builtin = primaries[3],\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = primaries[3],\n            import = primaries[5],\n            export = primaries[5],\n        },\n        operator = {\n            default = palette.black,\n        },\n        punctuation = {\n            default = palette.black,\n            delimiter = palette.black,\n            bracket = palette.black,\n            special = palette.black,\n        },\n        comment = {\n            default = palette.gray,\n            doc = primaries[5],\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                main = primaries[1], -- primary\n                dark = primaries[2], -- secondary\n                light = primaries[3], -- tertiary\n            },\n            active = primaries[3],\n            match = {\n                active = palette.magenta,\n                passive = primaries[3],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                main = primaries[9],\n                dark = primaries[8],\n                light = primaries[7],\n            },\n            active = palette.yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/crbn/ui_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[8], -- secondary\n                main = primaries[9], -- primary\n                light = primaries[7], -- tertiary\n            },\n            active = primaries[7],\n            match = {\n                active = palette.magenta,\n                passive = primaries[8],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            active = palette.yellow,\n            invert = primaries[8],\n            neutral = primaries[4],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\ndefault\n```lua nvim/lua/black-atom/themes/default/black-atom-engineering.lua\nlocal ui = require(\"black-atom.themes.default.ui_dark\")\nlocal syntax = require(\"black-atom.themes.default.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-engineering\",\n    label = \"Black Atom - Engineering\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \"󱁤 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#202b2b\",\n    \"#23332f\",\n    \"#2d423c\",\n    \"#375149\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#91bcad\",\n\n    -- Highs\n    \"#9bdebe\",\n    \"#abe7ca\",\n    \"#c1efd5\",\n    \"#cef6de\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ef95ba\",\n    red = \"#f4acc9\",\n\n    dark_green = \"#5dba5d\",\n    green = \"#80c980\",\n\n    dark_yellow = \"#c6db6e\",\n    yellow = \"#a6dc6e\",\n\n    dark_blue = M.primaries[8],\n    blue = M.primaries[10],\n\n    dark_magenta = \"#a2b0e0\",\n    magenta = \"#b6bee0\",\n\n    dark_cyan = \"#59bf6f\",\n    cyan = \"#75d689\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-medical.lua\nlocal ui = require(\"black-atom.themes.default.ui_light\")\nlocal syntax = require(\"black-atom.themes.default.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-medical\",\n    label = \"Black Atom - Medical\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e2229\",\n    \"#2b3b33\",\n    \"#384b42\",\n    \"#425953\",\n\n    -- Mids\n    \"#476a5f\",\n    \"#517a65\",\n    \"#669a84\",\n    \"#77a494\",\n\n    -- Highs\n    \"#a6bdb2\",\n    \"#b7cac1\",\n    \"#c2d3cb\",\n    \"#d0e0d8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#db577c\",\n    red = \"#ec7aa2\",\n\n    dark_green = \"#357c35\",\n    green = \"#3c8e3c\",\n\n    dark_yellow = \"#d9950f\",\n    yellow = \"#60a918\",\n\n    dark_blue = M.primaries[6],\n    blue = M.primaries[5],\n\n    dark_magenta = \"#7768cd\",\n    magenta = \"#998ed9\",\n\n    dark_cyan = \"#389248\",\n    cyan = \"#4aaa5b\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-operations.lua\nlocal ui = require(\"black-atom.themes.default.ui_dark\")\nlocal syntax = require(\"black-atom.themes.default.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-operations\",\n    label = \"Black Atom - Operations\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#252e2c\",\n    \"#2e3f3b\",\n    \"#384e48\",\n    \"#425d55\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#91bcad\",\n\n    -- Highs\n    \"#9bdebe\",\n    \"#abe7ca\",\n    \"#c1efd5\",\n    \"#cef6de\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ef95ba\",\n    red = \"#f4acc9\",\n\n    dark_green = \"#5dba5d\",\n    green = \"#80c980\",\n\n    dark_yellow = \"#c6db6e\",\n    yellow = \"#a6dc6e\",\n\n    dark_blue = M.primaries[8],\n    blue = M.primaries[10],\n\n    dark_magenta = \"#a2b0e0\",\n    magenta = \"#b6bee0\",\n\n    dark_cyan = \"#59bf6f\",\n    cyan = \"#75d689\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/black-atom-research.lua\nlocal ui = require(\"black-atom.themes.default.ui_light\")\nlocal syntax = require(\"black-atom.themes.default.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-research\",\n    label = \"Black Atom - Research\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e2229\",\n    \"#2b3b33\",\n    \"#384b42\",\n    \"#425953\",\n\n    -- Mids\n    \"#51796d\",\n    \"#5b8972\",\n    \"#75a490\",\n    \"#95b8ac\",\n\n    -- Highs\n    \"#b5c8bf\",\n    \"#c6d5ce\",\n    \"#d4e0da\",\n    \"#dfeae5\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#db577c\",\n    red = \"#ec7aa2\",\n\n    dark_green = \"#4a9a4a\",\n    green = \"#53aa53\",\n\n    dark_yellow = \"#e69d0c\",\n    yellow = \"#66ad1f\",\n\n    dark_blue = M.primaries[6],\n    blue = M.primaries[5],\n\n    dark_magenta = \"#887bd3\",\n    magenta = \"#998ed9\",\n\n    dark_cyan = \"#459f55\",\n    cyan = \"#4db15e\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/default/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = palette.blue,\n            builtin = palette.blue,\n            member = palette.dark_blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = primaries[10],\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = primaries[8],\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = palette.gray,\n                bg = palette.black,\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[8],\n            delimiter = primaries[9],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[5],\n            builtin = primaries[3],\n            member = primaries[5],\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = primaries[5],\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.gray,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = primaries[8],\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = primaries[7],\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = palette.dark_green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\njpn\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_light\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-koyo-hiru\",\n    label = \"Black Atom - JPN - Koyo [Hiru]\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"light\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#373240\",\n    \"#4a4457\",\n    \"#544a66\",\n    \"#605673\",\n\n    -- Mids\n    \"#605872\",\n    \"#7a7190\",\n    \"#958da6\",\n    \"#b0aabc\",\n\n    -- Highs\n    \"#d1b9a8\",\n    \"#dcc9bc\",\n    \"#e8d5c8\",\n    \"#f6e2d4\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[2],\n    gray = M.primaries[6],\n\n    dark_red = \"#cc4233\",\n    red = \"#e05252\",\n\n    dark_green = \"#2a6f4e\",\n    green = \"#389468\",\n\n    dark_yellow = \"#d2632d\",\n    yellow = \"#e27e37\",\n\n    dark_blue = \"#a65973\",\n    blue = \"#8859a6\",\n\n    dark_magenta = \"#de553b\",\n    magenta = \"#f57056\",\n\n    dark_cyan = \"#4f7c6e\",\n    cyan = \"#659988\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_dark\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-koyo-yoru\",\n    label = \"Black Atom - JPN - Koyo [Yoru]\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#271f27\",\n    \"#332733\",\n    \"#3f2f3f\",\n    \"#4a384a\",\n\n    -- Mids\n    \"#605872\",\n    \"#7a7190\",\n    \"#958da6\",\n    \"#b0aabc\",\n\n    -- Highs\n    \"#dab18c\",\n    \"#e0be9f\",\n    \"#e6cbb2\",\n    \"#ecd8c5\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#c2564b\",\n    red = \"#d6675c\",\n\n    dark_green = \"#53ad82\",\n    green = \"#7ab89b\",\n\n    dark_yellow = \"#e79253\",\n    yellow = \"#e7aa55\",\n\n    dark_blue = \"#a88a94\",\n    blue = \"#a095a8\",\n\n    dark_magenta = \"#efa376\",\n    magenta = \"#FEBE98\",\n\n    dark_cyan = \"#68b19a\",\n    cyan = \"#8cc1b0\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua\nlocal ui = require(\"black-atom.themes.jpn.ui_dark\")\nlocal syntax = require(\"black-atom.themes.jpn.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-jpn-tsuki-yoru\",\n    label = \"Black Atom - JPN - Edo Yoru\",\n    collection = {\n        key = \"jpn\",\n        label = \"JPN\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#0f0f0f\",\n    \"#1c1c1c\",\n    \"#282828\",\n    \"#373737\",\n\n    -- Mids\n    \"#4f4f61\",\n    \"#69697f\",\n    \"#828299\",\n    \"#9d9daf\",\n\n    -- Highs\n    \"#b3b3b3\",\n    \"#cbcbcb\",\n    \"#e6e6e6\",\n    \"#ffffff\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#f2759e\",\n    red = \"#F591B2\",\n\n    dark_green = \"#71a584\",\n    green = \"#90B99F\",\n\n    dark_yellow = \"#f6a090\",\n    yellow = \"#eab899\",\n\n    dark_blue = \"#8699c1\",\n    blue = \"#a1b0cf\",\n\n    dark_magenta = \"#9789c3\",\n    magenta = \"#ACA1CF\",\n\n    dark_cyan = \"#76bdac\",\n    cyan = \"#8dd9c5\",\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/jpn/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[10],\n            builtin = primaries[8],\n            member = palette.blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_blue,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.dark_blue,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = palette.dark_blue,\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = palette.magenta,\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[8],\n            delimiter = primaries[9],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[4],\n            builtin = primaries[6],\n            member = palette.blue,\n            parameter = palette.dark_magenta,\n        },\n        property = {\n            default = palette.blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_blue,\n            builtin = palette.dark_red,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = palette.red,\n            export = palette.red,\n        },\n        operator = {\n            default = palette.dark_blue,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = palette.dark_blue,\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[4],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/jpn/ui_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[9],\n            match = {\n                active = palette.magenta,\n                passive = primaries[8],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.yellow,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nmono\n```lua nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"black-atom-mono-one-dark\",\n    label = \"Black Atom - MONO - 1 [DARK]\",\n    collection = {\n        key = \"default\",\n        label = \"Default\",\n    },\n    appearance = \"dark\",\n    icon = \"󰒲 \", -- You might want to change this icon\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows (darker)\n    \"#0e110f\",\n    \"#151917\",\n    \"#1c211f\",\n    \"#252c29\",\n\n    -- Mids\n    \"#3a4540\",\n    \"#51615a\",\n    \"#687d74\",\n    \"#81978e\",\n\n    -- Highs\n    \"#b3cccc\",\n    \"#c2d6d6\",\n    \"#d9e5e5\",\n    \"#eef3f3\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = \"#708090\", -- lack\n\n    dark_red = \"#ab5353\", -- darker red\n    red = \"#b76b6b\", -- red\n\n    dark_green = \"#648364\", -- darker green\n    green = \"#789978\", -- green\n\n    dark_yellow = \"#8f8f5f\", -- darker yellow\n    yellow = \"#abab77\", -- yellow\n\n    dark_blue = \"#5f6e8f\", -- darker blue\n    blue = \"#7788AA\", -- blue\n\n    dark_magenta = \"#cc8870\", -- darker orange\n    magenta = \"#ffaa88\", -- orange\n\n    dark_cyan = \"#5f8f8f\", -- mix of lack and green\n    cyan = \"#789990\", -- mix of lack and green\n\n    light_gray = M.primaries[8],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Syntax\nM.syntax = require(\"black-atom.themes.mono.syntax_dark\")(M.primaries, M.palette)\n\n---@typ BlackAtom.Theme.UI\nM.ui = require(\"black-atom.themes.mono.ui_dark\")(M.primaries, M.palette)\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = M.ui,\n    syntax = M.syntax,\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/mono/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = primaries[8],\n            builtin = palette.dark_blue,\n            member = primaries[9],\n            parameter = primaries[10],\n        },\n        property = {\n            default = primaries[9],\n        },\n        string = {\n            default = palette.green,\n            doc = primaries[7],\n            regexp = primaries[8],\n            escape = primaries[8],\n        },\n        constant = {\n            default = primaries[9],\n            builtin = primaries[8],\n        },\n        module = {\n            default = primaries[8],\n        },\n        boolean = {\n            default = primaries[8],\n        },\n        number = {\n            default = primaries[8],\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = primaries[7],\n            builtin = primaries[7],\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.dark_yellow,\n        },\n        keyword = {\n            default = palette.magenta,\n            import = primaries[8],\n            export = primaries[8],\n        },\n        operator = {\n            default = primaries[7],\n        },\n        punctuation = {\n            default = primaries[6],\n            delimiter = primaries[6],\n            bracket = primaries[6],\n            special = primaries[7],\n        },\n        comment = {\n            default = primaries[5],\n            doc = primaries[6],\n            todo = palette.yellow,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = primaries[10],\n                h2 = primaries[9],\n                h3 = primaries[8],\n                h4 = primaries[7],\n                h5 = primaries[6],\n                h6 = primaries[5],\n            },\n            list = {\n                default = primaries[7],\n                checked = primaries[8],\n                unchecked = primaries[6],\n            },\n            quote = primaries[7],\n            math = primaries[8],\n            link = primaries[8],\n            code = {\n                fg = primaries[7],\n                bg = primaries[2],\n            },\n        },\n        tag = {\n            default = primaries[9],\n            builtin = primaries[7],\n            custom = primaries[8],\n            attribute = primaries[7],\n            delimiter = primaries[6],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/mono/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[4],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nterra\n```lua nvim/lua/black-atom/themes/terra/fall-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-fall-day\",\n    label = \"Terra Fall Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1e1e1e\",\n    \"#232323\",\n    \"#2c2928\",\n    \"#322e2b\",\n\n    -- Mids\n    \"#665c54\",\n    \"#7c6f64\",\n    \"#928374\",\n    \"#a89984\",\n\n    -- Highs\n    \"#ccc5b2\",\n    \"#d7d2c3\",\n    \"#e4decd\",\n    \"#eeeadf\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#4a7126\",\n    green = \"#58852c\",\n\n    dark_yellow = \"#cc764b\",\n    yellow = \"#d19845\",\n\n    dark_blue = \"#3d668e\",\n    blue = \"#5980a6\",\n\n    dark_magenta = \"#ab80a8\",\n    magenta = \"#a58bc1\",\n\n    dark_cyan = \"#296a50\",\n    cyan = \"#348764\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/fall-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-fall-night\",\n    label = \"Terra Fall Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#0f0e0e\",\n    \"#1a1818\",\n    \"#262423\",\n    \"#2d2926\",\n\n    -- Mids\n    \"#665c54\",\n    \"#7c6f64\",\n    \"#928374\",\n    \"#a89984\",\n\n    -- Highs\n    \"#ae9685\",\n    \"#b9a495\",\n    \"#ccbeb3\",\n    \"#d6cac2\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#c0603f\",\n    red = \"#c57054\",\n\n    dark_green = \"#7a895c\",\n    green = \"#a6bc90\",\n\n    dark_yellow = \"#ef9e74\",\n    yellow = \"#e0a66d\",\n\n    dark_blue = \"#a4a0df\",\n    blue = \"#90acd5\",\n\n    dark_magenta = \"#d2acc3\",\n    magenta = \"#c4b2d1\",\n\n    dark_cyan = \"#6a9b86\",\n    cyan = \"#7fb395\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/spring-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-spring-day\",\n    label = \"Terra Spring Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"󰧲  \",\n    status = \"beta\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#304a3f\",\n    \"#385547\",\n    \"#416353\",\n    \"#517b67\",\n\n    -- Mids\n    \"#55816a\",\n    \"#62937a\",\n    \"#78a48e\",\n    \"#8bb19e\",\n\n    -- Highs\n    \"#b9c6bf\",\n    \"#c7d1cc\",\n    \"#d4dcd8\",\n    \"#e2eae6\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#0d8a4e\",\n    green = \"#0f9d58\",\n\n    dark_yellow = \"#de7b1f\",\n    yellow = \"#e49f19\",\n\n    dark_blue = \"#3473b2\",\n    blue = \"#588dc1\",\n\n    dark_magenta = \"#B07BAC\",\n    magenta = \"#a586c6\",\n\n    dark_cyan = \"#0e945d\",\n    cyan = \"#10ab6a\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/spring-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-spring-night\",\n    label = \"Terra Spring Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \"󰧲 󰖔 \",\n    status = \"release\",\n    module_path = \"black-atom.themes.terra-spring-night\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1d201f\",\n    \"#212523\",\n    \"#272c2a\",\n    \"#313634\",\n\n    -- Mids\n    \"#394740\",\n    \"#51635a\",\n    \"#677e72\",\n    \"#82978c\",\n\n    -- Highs\n    \"#b8aa94\",\n    \"#c3b8a4\",\n    \"#d6d0c2\",\n    \"#e0ddd1\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#b95847\",\n    red = \"#ba6e5f\",\n\n    dark_green = \"#6a9f60\",\n    green = \"#8ac090\",\n\n    dark_yellow = \"#e89a61\",\n    yellow = \"#d1a762\",\n\n    dark_blue = \"#899ddc\",\n    blue = \"#99b9e6\",\n\n    dark_magenta = \"#d5a9c3\",\n    magenta = \"#c6b3da\",\n\n    dark_cyan = \"#679980\",\n    cyan = \"#85ad9f\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/summer-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-summer-day\",\n    label = \"Terra Summer Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"󰂒  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#29323d\",\n    \"#343e4d\",\n    \"#3e4b5c\",\n    \"#47576c\",\n\n    -- Mids\n    \"#506d95\",\n    \"#5979a6\",\n    \"#7b94b8\",\n    \"#8BA1C1\",\n\n    -- Highs\n    \"#b7beca\",\n    \"#c6cbd5\",\n    \"#d1d6e1\",\n    \"#e0e4eb\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#729e60\",\n    green = \"#72ae6a\",\n\n    dark_yellow = \"#e3913d\",\n    yellow = \"#dca958\",\n\n    dark_blue = \"#5c72d6\",\n    blue = \"#578fdc\",\n\n    dark_magenta = \"#8253c5\",\n    magenta = \"#c65295\",\n\n    dark_cyan = \"#619f80\",\n    cyan = \"#7bb7a4\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/summer-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-summer-night\",\n    label = \"Terra Summer Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \"󰂒 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#1a1c24\",\n    \"#1f2129\",\n    \"#23262f\",\n    \"#282b35\",\n\n    -- Mids\n    \"#47506b\",\n    \"#5b678a\",\n    \"#7581a4\",\n    \"#858fae\",\n\n    -- Highs\n    \"#91a0bc\",\n    \"#9facc6\",\n    \"#bcc9db\",\n    \"#c8d7e8\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[5],\n\n    dark_red = \"#bf5441\",\n    red = \"#c06a59\",\n\n    dark_green = \"#729e60\",\n    green = \"#85b97e\",\n\n    dark_yellow = \"#f2a557\",\n    yellow = \"#dca958\",\n\n    dark_blue = \"#9f99e5\",\n    blue = \"#96b9e9\",\n\n    dark_magenta = \"#d5a9c3\",\n    magenta = \"#c4acd7\",\n\n    dark_cyan = \"#619f80\",\n    cyan = \"#7bb7a4\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/syntax_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        default = palette.gray,\n        variable = {\n            default = palette.blue,\n            builtin = palette.blue,\n            parameter = palette.dark_yellow,\n            member = palette.dark_blue,\n        },\n        property = {\n            default = palette.blue,\n        },\n        constant = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.dark_yellow,\n            escape = palette.red,\n        },\n        boolean = {\n            default = palette.dark_yellow,\n        },\n        number = {\n            default = palette.dark_yellow,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.cyan,\n            builtin = palette.cyan,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        operator = {\n            default = palette.magenta,\n        },\n        keyword = {\n            default = palette.red,\n            import = palette.magenta,\n            export = palette.magenta,\n        },\n        punctuation = {\n            default = palette.light_gray,\n            delimiter = primaries[8],\n            bracket = palette.light_gray,\n            special = palette.light_gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.light_gray,\n                h5 = palette.light_gray,\n                h6 = palette.light_gray,\n            },\n            list = {\n                default = palette.light_gray,\n                checked = palette.green,\n                unchecked = palette.light_gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[10],\n                bg = primaries[6],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            custom = palette.yellow,\n            attribute = palette.dark_yellow,\n            delimiter = palette.dark_yellow,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/syntax_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.Syntax\nreturn function(primaries, palette)\n    return {\n        variable = {\n            default = palette.blue,\n            builtin = palette.dark_blue,\n            member = palette.dark_blue,\n            parameter = palette.dark_yellow,\n        },\n        property = {\n            default = palette.dark_blue,\n        },\n        string = {\n            default = palette.green,\n            doc = palette.green,\n            regexp = palette.red,\n            escape = palette.red,\n        },\n        constant = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        module = {\n            default = palette.dark_blue,\n        },\n        boolean = {\n            default = palette.dark_green,\n        },\n        number = {\n            default = palette.dark_green,\n        },\n        type = {\n            default = palette.cyan,\n            builtin = palette.dark_cyan,\n        },\n        attribute = {\n            default = palette.dark_yellow,\n            builtin = palette.dark_yellow,\n        },\n        func = {\n            default = palette.yellow,\n            builtin = palette.yellow,\n            method = palette.yellow,\n        },\n        constructor = {\n            default = palette.yellow,\n        },\n        keyword = {\n            default = palette.red,\n            import = palette.dark_green,\n            export = palette.dark_red,\n        },\n        operator = {\n            default = palette.black,\n        },\n        punctuation = {\n            default = palette.gray,\n            delimiter = primaries[8],\n            bracket = palette.gray,\n            special = palette.gray,\n        },\n        comment = {\n            default = palette.gray,\n            doc = palette.dark_green,\n            todo = palette.green,\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n        },\n        markup = {\n            heading = {\n                h1 = palette.yellow,\n                h2 = palette.yellow,\n                h3 = palette.yellow,\n                h4 = palette.gray,\n                h5 = palette.gray,\n                h6 = palette.gray,\n            },\n            list = {\n                default = palette.gray,\n                checked = palette.green,\n                unchecked = palette.gray,\n            },\n            quote = palette.green,\n            math = palette.dark_green,\n            link = palette.green,\n            code = {\n                fg = primaries[6],\n                bg = primaries[10],\n            },\n        },\n        tag = {\n            default = palette.yellow,\n            builtin = palette.dark_yellow,\n            custom = palette.yellow,\n            attribute = primaries[5],\n            delimiter = primaries[4],\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/ui_dark.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[1]),\n                passive = darken(palette.green, 0.5, primaries[1]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.green,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[12]),\n                passive = darken(palette.green, 0.15, primaries[12]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.yellow,\n            invert = primaries[11],\n            -- this is a comment\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/terra/winter-day.lua\nlocal ui = require(\"black-atom.themes.terra.ui_light\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_light\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-winter-day\",\n    label = \"Terra Winter Day\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"light\",\n    icon = \"  \",\n    status = \"development\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#192125\",\n    \"#1d272c\",\n    \"#212c31\",\n    \"#24333a\",\n\n    -- Mids\n    \"#475e6a\",\n    \"#516c7a\",\n    \"#5b7988\",\n    \"#7393a3\",\n\n    -- Highs\n    \"#b6c2c9\",\n    \"#c5ced3\",\n    \"#d4dade\",\n    \"#e2e6e9\",\n}\n\n-- TODO: Finetune\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#ca6d4c\",\n    red = \"#dd7e5d\",\n\n    dark_green = \"#4a7126\",\n    green = \"#58852c\",\n\n    dark_yellow = \"#cc764b\",\n    yellow = \"#d19845\",\n\n    dark_blue = \"#3d668e\",\n    blue = \"#5980a6\",\n\n    dark_magenta = \"#ab80a8\",\n    magenta = \"#a58bc1\",\n\n    dark_cyan = \"#296a50\",\n    cyan = \"#348764\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/themes/terra/winter-night.lua\nlocal ui = require(\"black-atom.themes.terra.ui_dark\")\nlocal syntax = require(\"black-atom.themes.terra.syntax_dark\")\n\nlocal M = {}\n\n---@type BlackAtom.Theme.Meta\nM.meta = {\n    key = \"terra-winter-night\",\n    label = \"Terra Winter Night\",\n    collection = {\n        key = \"terra\",\n        label = \"Terra\",\n    },\n    appearance = \"dark\",\n    icon = \" 󰖔 \",\n    status = \"release\",\n}\n\n---@type BlackAtom.Theme.Primaries\nM.primaries = {\n    -- Lows\n    \"#18191b\",\n    \"#212225\",\n    \"#2c2d30\",\n    \"#34363b\",\n\n    -- Mids\n    \"#454955\",\n    \"#5b6171\",\n    \"#707a92\",\n    \"#8a8fa7\",\n\n    -- Highs\n    \"#a6afc1\",\n    \"#c0c8d8\",\n    \"#cdd6e4\",\n    \"#dbe4ef\",\n}\n\n---@type BlackAtom.Theme.Palette\nM.palette = {\n    black = M.primaries[3],\n    gray = M.primaries[6],\n\n    dark_red = \"#a65959\",\n    red = \"#b86a6a\",\n\n    dark_green = \"#507765\",\n    green = \"#5e9e8b\",\n\n    dark_yellow = \"#eba778\",\n    yellow = \"#d3b17a\",\n\n    dark_blue = \"#94acb8\",\n    blue = \"#8c9bc2\",\n\n    dark_magenta = \"#b793b7\",\n    magenta = \"#c8adc8\",\n\n    dark_cyan = \"#568383\",\n    cyan = \"#67a5a5\",\n\n    light_gray = M.primaries[9],\n    white = M.primaries[11],\n}\n\n---@type BlackAtom.Theme.Colors\nM.colors = {\n    none = \"NONE\",\n    primaries = M.primaries,\n    palette = M.palette,\n    ui = ui(M.primaries, M.palette),\n    syntax = syntax(M.primaries, M.palette),\n}\n\nreturn M\n```\n\n\n\n\n\nI notice there are discrepancies between the type definitions in `types.lua` and the actual implementation in the theme files. Here are the key differences:\n\n1. UI Structure:\n- Type definition shows a layered approach with `ground`, `surface`, `float`, and `sky` layers\n- Implementation uses a simpler structure with `primary`, `secondary`, and various state-based properties\n\n2. Background/Foreground Organization:\n- Type definition uses a more complex nested structure with variants\n- Implementation uses a flatter structure with direct color assignments\n\n3. String Fields:\n- Type definition has `documentation` field\n- Implementation uses `doc` instead\n\n4. Syntax Structure:\n- Implementation has some additional fields not defined in the types\n- Some nesting structures differ from the type definitions\n\nTo align the codebase, you would need to either:\n\n1. Update the type definitions to match the current implementation, or\n2. Refactor the theme implementations to match the type definitions\n\nWould you like me to provide a more detailed analysis of specific discrepancies or suggest a plan for aligning them?\n\nI can also help create a migration strategy if you want to move from one structure to the other.\nCan you migrate that theme definition files for me?\n\nLets just try one:\n\n```lua nvim/lua/black-atom/themes/terra/ui_dark.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[1]),\n                passive = darken(palette.green, 0.5, primaries[1]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.green,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nI'll help create a patch to migrate this UI theme definition to match the type definitions. Based on the types file, we need to restructure it to use the layered approach with `ground`, `surface`, `float`, and `sky`.\n\n<patch>\n<title>Migrate terra/ui_dark.lua to new layer-based structure</title>\n\n<edit>\n<path>nvim/lua/black-atom/themes/terra/ui_dark.lua</path>\n<description>Restructure the UI theme to use the new layered architecture with proper variants</description>\n<old_text>\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[1]),\n                passive = darken(palette.green, 0.5, primaries[1]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.green,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend</old_text>\n<new_text>\nreturn function(primaries, palette)\n    -- Create shared state variants that will be used across layers\n    local function create_state_variants(bg_color, fg_color, border_color)\n        return {\n            accent = { bg = palette.magenta, fg = fg_color, border = border_color },\n            muted = { bg = bg_color, fg = primaries[6], border = border_color },\n            contrast = { bg = fg_color, fg = bg_color, border = border_color },\n            disabled = { bg = bg_color, fg = primaries[6], border = border_color },\n            cursor = { bg = palette.green, fg = bg_color, border = border_color },\n            visual = { bg = darken(palette.magenta, 0.25, bg_color), fg = fg_color, border = border_color },\n            search = { bg = darken(palette.yellow, 0.25, bg_color), fg = bg_color, border = border_color },\n            match = { bg = darken(palette.green, 0.5, bg_color), fg = fg_color, border = border_color },\n            error = { bg = bg_color, fg = palette.red, border = palette.red },\n            warn = { bg = bg_color, fg = palette.yellow, border = palette.yellow },\n            info = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            hint = { bg = bg_color, fg = palette.dark_yellow, border = palette.dark_yellow },\n            success = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_add = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_delete = { bg = bg_color, fg = palette.red, border = palette.red },\n            diff_modify = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            diff_text = { bg = bg_color, fg = palette.dark_blue, border = palette.dark_blue },\n        }\n    end\n\n    return {\n        -- Darkest layer (e.g. Statusline, Sidebars)\n        ground = {\n            bg = primaries[1],\n            fg = primaries[11],\n            border = primaries[3],\n            ...create_state_variants(primaries[1], primaries[11], primaries[3])\n        },\n        -- Main editor layer\n        surface = {\n            bg = primaries[2],\n            fg = primaries[11],\n            border = primaries[4],\n            ...create_state_variants(primaries[2], primaries[11], primaries[4])\n        },\n        -- Floating windows layer\n        float = {\n            bg = primaries[3],\n            fg = primaries[12],\n            border = primaries[5],\n            ...create_state_variants(primaries[3], primaries[12], primaries[5])\n        },\n        -- Highest layer (e.g. Notifications)\n        sky = {\n            bg = primaries[4],\n            fg = primaries[12],\n            border = primaries[6],\n            ...create_state_variants(primaries[4], primaries[12], primaries[6])\n        }\n    }\nend</new_text>\n<operation>update</operation>\n</edit>\n\n</patch>\n\nThis patch:\n1. Introduces a layered architecture with `ground`, `surface`, `float`, and `sky` layers\n2. Each layer has consistent base colors (bg, fg, border)\n3. Adds a helper function to create state variants with proper color inheritance\n4. Maintains all the functionality of the original while matching the new type structure\n5. Uses the same colors from the original but redistributes them in a more semantic way\n\nThe main changes are:\n- Reorganization into semantic layers\n- Proper variant structure for each state\n- Addition of border colors throughout\n- More consistent color inheritance\n- Proper typing according to the schema\n\nWould you like me to explain any part in more detail or help migrate other files?\n\nThanks but there is no spread syntax in lua\nAh, you're right - Lua doesn't have spread syntax. Let me revise the patch to properly construct the UI structure in Lua:\n\n<patch>\n<title>Migrate terra/ui_dark.lua to new layer-based structure</title>\n\n<edit>\n<path>nvim/lua/black-atom/themes/terra/ui_dark.lua</path>\n<description>Restructure the UI theme to use the new layered architecture with proper variants</description>\n<old_text>\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = darken(palette.magenta, 0.25, primaries[1]),\n                passive = darken(palette.green, 0.5, primaries[1]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.green,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend</old_text>\n<new_text>\nreturn function(primaries, palette)\n    local function create_state_variants(bg_color, fg_color, border_color)\n        return {\n            accent = { bg = palette.magenta, fg = fg_color, border = border_color },\n            muted = { bg = bg_color, fg = primaries[6], border = border_color },\n            contrast = { bg = fg_color, fg = bg_color, border = border_color },\n            disabled = { bg = bg_color, fg = primaries[6], border = border_color },\n            cursor = { bg = palette.green, fg = bg_color, border = border_color },\n            visual = { bg = darken(palette.magenta, 0.25, bg_color), fg = fg_color, border = border_color },\n            search = { bg = darken(palette.yellow, 0.25, bg_color), fg = bg_color, border = border_color },\n            match = { bg = darken(palette.green, 0.5, bg_color), fg = fg_color, border = border_color },\n            error = { bg = bg_color, fg = palette.red, border = palette.red },\n            warn = { bg = bg_color, fg = palette.yellow, border = palette.yellow },\n            info = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            hint = { bg = bg_color, fg = palette.dark_yellow, border = palette.dark_yellow },\n            success = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_add = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_delete = { bg = bg_color, fg = palette.red, border = palette.red },\n            diff_modify = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            diff_text = { bg = bg_color, fg = palette.dark_blue, border = palette.dark_blue }\n        }\n    end\n\n    local ground_variants = create_state_variants(primaries[1], primaries[11], primaries[3])\n    local surface_variants = create_state_variants(primaries[2], primaries[11], primaries[4])\n    local float_variants = create_state_variants(primaries[3], primaries[12], primaries[5])\n    local sky_variants = create_state_variants(primaries[4], primaries[12], primaries[6])\n\n    return {\n        -- Darkest layer (e.g. Statusline, Sidebars)\n        ground = vim.tbl_extend(\"force\", {\n            bg = primaries[1],\n            fg = primaries[11],\n            border = primaries[3]\n        }, ground_variants),\n\n        -- Main editor layer\n        surface = vim.tbl_extend(\"force\", {\n            bg = primaries[2],\n            fg = primaries[11],\n            border = primaries[4]\n        }, surface_variants),\n\n        -- Floating windows layer\n        float = vim.tbl_extend(\"force\", {\n            bg = primaries[3],\n            fg = primaries[12],\n            border = primaries[5]\n        }, float_variants),\n\n        -- Highest layer (e.g. Notifications)\n        sky = vim.tbl_extend(\"force\", {\n            bg = primaries[4],\n            fg = primaries[12],\n            border = primaries[6]\n        }, sky_variants)\n    }\nend</new_text>\n<operation>update</operation>\n</edit>\n\n</patch>\n\nThis revision:\n1. Uses `vim.tbl_extend` instead of spread syntax to merge tables\n2. Creates variant tables separately before merging them into the final structure\n3. Maintains the same functionality but in a Lua-appropriate way\n4. Still follows the new type structure with proper layering\n\nWould you like me to explain any part of this implementation or help with migrating other files?\n\n```lua nvim/lua/black-atom/themes/terra/ui_dark.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    local function create_state_variants(bg_color, fg_color, border_color)\n        return {\n            accent = { bg = palette.magenta, fg = fg_color, border = border_color },\n            muted = { bg = bg_color, fg = primaries[6], border = border_color },\n            contrast = { bg = fg_color, fg = bg_color, border = border_color },\n            disabled = { bg = bg_color, fg = primaries[6], border = border_color },\n            cursor = { bg = palette.green, fg = bg_color, border = border_color },\n            visual = { bg = darken(palette.magenta, 0.25, bg_color), fg = fg_color, border = border_color },\n            search = { bg = darken(palette.yellow, 0.25, bg_color), fg = bg_color, border = border_color },\n            match = { bg = darken(palette.green, 0.5, bg_color), fg = fg_color, border = border_color },\n            error = { bg = bg_color, fg = palette.red, border = palette.red },\n            warn = { bg = bg_color, fg = palette.yellow, border = palette.yellow },\n            info = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            hint = { bg = bg_color, fg = palette.dark_yellow, border = palette.dark_yellow },\n            success = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_add = { bg = bg_color, fg = palette.green, border = palette.green },\n            diff_delete = { bg = bg_color, fg = palette.red, border = palette.red },\n            diff_modify = { bg = bg_color, fg = palette.blue, border = palette.blue },\n            diff_text = { bg = bg_color, fg = palette.dark_blue, border = palette.dark_blue },\n        }\n    end\n\n    local ground_variants = create_state_variants(primaries[1], primaries[11], primaries[3])\n    local surface_variants = create_state_variants(primaries[2], primaries[11], primaries[4])\n    local float_variants = create_state_variants(primaries[3], primaries[12], primaries[5])\n    local sky_variants = create_state_variants(primaries[4], primaries[12], primaries[6])\n\n    return {\n        -- Darkest layer (e.g. Statusline, Sidebars)\n        ground = vim.tbl_extend(\"force\", {\n            bg = primaries[1],\n            fg = primaries[11],\n            border = primaries[3],\n        }, ground_variants),\n\n        -- Main editor layer\n        surface = vim.tbl_extend(\"force\", {\n            bg = primaries[2],\n            fg = primaries[11],\n            border = primaries[4],\n        }, surface_variants),\n\n        -- Floating windows layer\n        float = vim.tbl_extend(\"force\", {\n            bg = primaries[3],\n            fg = primaries[12],\n            border = primaries[5],\n        }, float_variants),\n\n        -- Highest layer (e.g. Notifications)\n        sky = vim.tbl_extend(\"force\", {\n            bg = primaries[4],\n            fg = primaries[12],\n            border = primaries[6],\n        }, sky_variants),\n    }\nend\n```\n\n\nNow I see you've migrated the file to match the layered UI structure. Would you like me to help migrate the rest of the theme files to match this pattern? \n\nThe key changes I see in your implementation are:\n\n1. Layered structure with:\n   - ground (darkest, for statusline/sidebars)\n   - surface (main editor)\n   - float (floating windows)\n   - sky (highest layer, notifications)\n\n2. Each layer has:\n   - Base properties (bg, fg, border)\n   - State variants created by the helper function\n\n3. State variants include:\n   - accent, muted, contrast, disabled\n   - cursor, visual, search, match\n   - error, warn, info, hint, success\n   - diff states (add, delete, modify, text)\n\nWould you like me to help migrate another theme file to match this structure?\n",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 988 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 108 },
      "start": 154968,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 986 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 109 },
      "start": 156596,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 983 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 299 },
      "start": 225986,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 987 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 300 },
      "start": 227198,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 991 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 548 },
      "start": 229170,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 990 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 549 },
      "start": 234858,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 989 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 747 },
      "start": 234903,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 984 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 748 },
      "start": 240310,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 985 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 826 },
      "start": 243431,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 981 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 827 },
      "start": 244183,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 982 }
      }
    }
  ],
  "summary": "Neovim Black Atom Theme Framework",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 3, "end": 154948 },
      "icon": "Folder",
      "label": "nvim/lua",
      "metadata": null
    },
    {
      "range": { "start": 12, "end": 153158 },
      "icon": "Folder",
      "label": "black-atom",
      "metadata": null
    },
    {
      "range": { "start": 23, "end": 1855 },
      "icon": "File",
      "label": "nvim/lua/black-atom/api.lua",
      "metadata": { "path": "nvim/lua/black-atom/api.lua" }
    },
    {
      "range": { "start": 1856, "end": 2220 },
      "icon": "File",
      "label": "nvim/lua/black-atom/commands.lua",
      "metadata": { "path": "nvim/lua/black-atom/commands.lua" }
    },
    {
      "range": { "start": 2221, "end": 3695 },
      "icon": "File",
      "label": "nvim/lua/black-atom/config.lua",
      "metadata": { "path": "nvim/lua/black-atom/config.lua" }
    },
    {
      "range": { "start": 3696, "end": 3930 },
      "icon": "File",
      "label": "nvim/lua/black-atom/constants.lua",
      "metadata": { "path": "nvim/lua/black-atom/constants.lua" }
    },
    {
      "range": { "start": 3931, "end": 46388 },
      "icon": "Folder",
      "label": "highlights",
      "metadata": null
    },
    {
      "range": { "start": 3942, "end": 8462 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/lsp.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/lsp.lua" }
    },
    {
      "range": { "start": 8463, "end": 34069 },
      "icon": "Folder",
      "label": "plugins",
      "metadata": null
    },
    {
      "range": { "start": 8471, "end": 12456 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua"
      }
    },
    {
      "range": { "start": 12457, "end": 12993 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua"
      }
    },
    {
      "range": { "start": 12994, "end": 14613 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua"
      }
    },
    {
      "range": { "start": 14614, "end": 15162 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua"
      }
    },
    {
      "range": { "start": 15163, "end": 16878 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua"
      }
    },
    {
      "range": { "start": 16879, "end": 17587 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua"
      }
    },
    {
      "range": { "start": 17588, "end": 18428 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/flash.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/flash.lua" }
    },
    {
      "range": { "start": 18429, "end": 19217 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/fzflua.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/fzflua.lua"
      }
    },
    {
      "range": { "start": 19218, "end": 19954 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua"
      }
    },
    {
      "range": { "start": 19955, "end": 22362 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua"
      }
    },
    {
      "range": { "start": 22363, "end": 22942 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua"
      }
    },
    {
      "range": { "start": 22943, "end": 23384 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua"
      }
    },
    {
      "range": { "start": 23385, "end": 23815 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua"
      }
    },
    {
      "range": { "start": 23816, "end": 24352 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/mini.lua" }
    },
    {
      "range": { "start": 24353, "end": 24789 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua"
      }
    },
    {
      "range": { "start": 24790, "end": 26065 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua"
      }
    },
    {
      "range": { "start": 26066, "end": 28028 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua"
      }
    },
    {
      "range": { "start": 28029, "end": 30038 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua"
      }
    },
    {
      "range": { "start": 30039, "end": 30819 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua"
      }
    },
    {
      "range": { "start": 30820, "end": 31383 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua"
      }
    },
    {
      "range": { "start": 31384, "end": 31840 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua"
      }
    },
    {
      "range": { "start": 31841, "end": 32603 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua"
      }
    },
    {
      "range": { "start": 32604, "end": 33078 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua"
      }
    },
    {
      "range": { "start": 33079, "end": 33664 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua"
      }
    },
    {
      "range": { "start": 33665, "end": 34068 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua"
      }
    },
    {
      "range": { "start": 34070, "end": 41604 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/syntax.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/syntax.lua" }
    },
    {
      "range": { "start": 41605, "end": 46387 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    },
    {
      "range": { "start": 46389, "end": 47095 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights.lua" }
    },
    {
      "range": { "start": 47096, "end": 47993 },
      "icon": "File",
      "label": "nvim/lua/black-atom/init.lua",
      "metadata": { "path": "nvim/lua/black-atom/init.lua" }
    },
    {
      "range": { "start": 47994, "end": 71794 },
      "icon": "Folder",
      "label": "lib",
      "metadata": null
    },
    {
      "range": { "start": 47998, "end": 48989 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/bg.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/bg.lua" }
    },
    {
      "range": { "start": 48990, "end": 50698 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/color.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/color.lua" }
    },
    {
      "range": { "start": 50699, "end": 53267 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/debug.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/debug.lua" }
    },
    {
      "range": { "start": 53268, "end": 56279 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/files.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/files.lua" }
    },
    {
      "range": { "start": 56280, "end": 62048 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/highlights.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/highlights.lua" }
    },
    {
      "range": { "start": 62049, "end": 62556 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/init.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/init.lua" }
    },
    {
      "range": { "start": 62557, "end": 65332 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/theme_factory.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/theme_factory.lua" }
    },
    {
      "range": { "start": 65333, "end": 66326 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/themes.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/themes.lua" }
    },
    {
      "range": { "start": 66327, "end": 67271 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/ui.lua" }
    },
    {
      "range": { "start": 67272, "end": 71176 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/validate.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/validate.lua" }
    },
    {
      "range": { "start": 71177, "end": 71793 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/windows.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/windows.lua" }
    },
    {
      "range": { "start": 71795, "end": 141008 },
      "icon": "Folder",
      "label": "themes",
      "metadata": null
    },
    {
      "range": { "start": 71802, "end": 83755 },
      "icon": "Folder",
      "label": "crbn",
      "metadata": null
    },
    {
      "range": { "start": 71807, "end": 73311 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua"
      }
    },
    {
      "range": { "start": 73312, "end": 74765 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua"
      }
    },
    {
      "range": { "start": 74766, "end": 77713 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/syntax_dark.lua" }
    },
    {
      "range": { "start": 77714, "end": 80661 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/syntax_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/syntax_light.lua" }
    },
    {
      "range": { "start": 80662, "end": 82207 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/ui_dark.lua" }
    },
    {
      "range": { "start": 82208, "end": 83754 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/ui_light.lua" }
    },
    {
      "range": { "start": 83756, "end": 99271 },
      "icon": "Folder",
      "label": "default",
      "metadata": null
    },
    {
      "range": { "start": 83764, "end": 85218 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-engineering.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-engineering.lua"
      }
    },
    {
      "range": { "start": 85219, "end": 86662 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-medical.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-medical.lua"
      }
    },
    {
      "range": { "start": 86663, "end": 88113 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-operations.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-operations.lua"
      }
    },
    {
      "range": { "start": 88114, "end": 89560 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-research.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-research.lua"
      }
    },
    {
      "range": { "start": 89561, "end": 92590 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/syntax_dark.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/syntax_dark.lua"
      }
    },
    {
      "range": { "start": 92591, "end": 95573 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/syntax_light.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/syntax_light.lua"
      }
    },
    {
      "range": { "start": 95574, "end": 97367 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 97368, "end": 99270 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 99272, "end": 113200 },
      "icon": "Folder",
      "label": "jpn",
      "metadata": null
    },
    {
      "range": { "start": 99276, "end": 100711 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua"
      }
    },
    {
      "range": { "start": 100712, "end": 102144 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua"
      }
    },
    {
      "range": { "start": 102145, "end": 103576 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua"
      }
    },
    {
      "range": { "start": 103577, "end": 106576 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/syntax_dark.lua" }
    },
    {
      "range": { "start": 106577, "end": 109562 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/syntax_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/syntax_light.lua" }
    },
    {
      "range": { "start": 109563, "end": 111379 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/ui_dark.lua" }
    },
    {
      "range": { "start": 111380, "end": 113199 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/ui_light.lua" }
    },
    {
      "range": { "start": 113201, "end": 119662 },
      "icon": "Folder",
      "label": "mono",
      "metadata": null
    },
    {
      "range": { "start": 113206, "end": 114922 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua"
      }
    },
    {
      "range": { "start": 114923, "end": 117838 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/mono/syntax_dark.lua" }
    },
    {
      "range": { "start": 117839, "end": 119661 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/mono/ui_dark.lua" }
    },
    {
      "range": { "start": 119663, "end": 141007 },
      "icon": "Folder",
      "label": "terra",
      "metadata": null
    },
    {
      "range": { "start": 119669, "end": 121093 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/fall-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/fall-day.lua" }
    },
    {
      "range": { "start": 121094, "end": 122500 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/fall-night.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/fall-night.lua" }
    },
    {
      "range": { "start": 122501, "end": 123925 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/spring-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/spring-day.lua" }
    },
    {
      "range": { "start": 123926, "end": 125397 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/spring-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/spring-night.lua"
      }
    },
    {
      "range": { "start": 125398, "end": 126829 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/summer-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/summer-day.lua" }
    },
    {
      "range": { "start": 126830, "end": 128243 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/summer-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/summer-night.lua"
      }
    },
    {
      "range": { "start": 128244, "end": 131321 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/syntax_dark.lua" }
    },
    {
      "range": { "start": 131322, "end": 134327 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/syntax_light.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/syntax_light.lua"
      }
    },
    {
      "range": { "start": 134328, "end": 136225 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_dark.lua" }
    },
    {
      "range": { "start": 136226, "end": 138162 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_light.lua" }
    },
    {
      "range": { "start": 138163, "end": 139593 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/winter-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/winter-day.lua" }
    },
    {
      "range": { "start": 139594, "end": 141006 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/winter-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/winter-night.lua"
      }
    },
    {
      "range": { "start": 141009, "end": 153157 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 153159, "end": 154948 },
      "icon": "Folder",
      "label": "lualine/themes",
      "metadata": null
    },
    {
      "range": { "start": 153174, "end": 154947 },
      "icon": "File",
      "label": "nvim/lua/lualine/themes/black_atom.lua",
      "metadata": { "path": "nvim/lua/lualine/themes/black_atom.lua" }
    },
    {
      "range": { "start": 156705, "end": 156748 },
      "icon": "ListTree",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": null
    },
    {
      "range": { "start": 156750, "end": 225982 },
      "icon": "Folder",
      "label": "nvim/lua/black-atom/themes",
      "metadata": null
    },
    {
      "range": { "start": 156777, "end": 168730 },
      "icon": "Folder",
      "label": "crbn",
      "metadata": null
    },
    {
      "range": { "start": 156782, "end": 158286 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-null.lua"
      }
    },
    {
      "range": { "start": 158287, "end": 159740 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/crbn/black-atom-crbn-supr.lua"
      }
    },
    {
      "range": { "start": 159741, "end": 162688 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/syntax_dark.lua" }
    },
    {
      "range": { "start": 162689, "end": 165636 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/syntax_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/syntax_light.lua" }
    },
    {
      "range": { "start": 165637, "end": 167182 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/ui_dark.lua" }
    },
    {
      "range": { "start": 167183, "end": 168729 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/crbn/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/crbn/ui_light.lua" }
    },
    {
      "range": { "start": 168731, "end": 184246 },
      "icon": "Folder",
      "label": "default",
      "metadata": null
    },
    {
      "range": { "start": 168739, "end": 170193 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-engineering.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-engineering.lua"
      }
    },
    {
      "range": { "start": 170194, "end": 171637 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-medical.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-medical.lua"
      }
    },
    {
      "range": { "start": 171638, "end": 173088 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-operations.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-operations.lua"
      }
    },
    {
      "range": { "start": 173089, "end": 174535 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/black-atom-research.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/black-atom-research.lua"
      }
    },
    {
      "range": { "start": 174536, "end": 177565 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/syntax_dark.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/syntax_dark.lua"
      }
    },
    {
      "range": { "start": 177566, "end": 180548 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/syntax_light.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/default/syntax_light.lua"
      }
    },
    {
      "range": { "start": 180549, "end": 182342 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 182343, "end": 184245 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 184247, "end": 198175 },
      "icon": "Folder",
      "label": "jpn",
      "metadata": null
    },
    {
      "range": { "start": 184251, "end": 185686 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-hiru.lua"
      }
    },
    {
      "range": { "start": 185687, "end": 187119 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-koyo-yoru.lua"
      }
    },
    {
      "range": { "start": 187120, "end": 188551 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/jpn/black-atom-jpn-tsuki-yoru.lua"
      }
    },
    {
      "range": { "start": 188552, "end": 191551 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/syntax_dark.lua" }
    },
    {
      "range": { "start": 191552, "end": 194537 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/syntax_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/syntax_light.lua" }
    },
    {
      "range": { "start": 194538, "end": 196354 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/ui_dark.lua" }
    },
    {
      "range": { "start": 196355, "end": 198174 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/jpn/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/jpn/ui_light.lua" }
    },
    {
      "range": { "start": 198176, "end": 204637 },
      "icon": "Folder",
      "label": "mono",
      "metadata": null
    },
    {
      "range": { "start": 198181, "end": 199897 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/mono/black-atom-mono-one-dark.lua"
      }
    },
    {
      "range": { "start": 199898, "end": 202813 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/mono/syntax_dark.lua" }
    },
    {
      "range": { "start": 202814, "end": 204636 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/mono/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/mono/ui_dark.lua" }
    },
    {
      "range": { "start": 204638, "end": 225982 },
      "icon": "Folder",
      "label": "terra",
      "metadata": null
    },
    {
      "range": { "start": 204644, "end": 206068 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/fall-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/fall-day.lua" }
    },
    {
      "range": { "start": 206069, "end": 207475 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/fall-night.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/fall-night.lua" }
    },
    {
      "range": { "start": 207476, "end": 208900 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/spring-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/spring-day.lua" }
    },
    {
      "range": { "start": 208901, "end": 210372 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/spring-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/spring-night.lua"
      }
    },
    {
      "range": { "start": 210373, "end": 211804 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/summer-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/summer-day.lua" }
    },
    {
      "range": { "start": 211805, "end": 213218 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/summer-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/summer-night.lua"
      }
    },
    {
      "range": { "start": 213219, "end": 216296 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/syntax_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/syntax_dark.lua" }
    },
    {
      "range": { "start": 216297, "end": 219302 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/syntax_light.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/syntax_light.lua"
      }
    },
    {
      "range": { "start": 219303, "end": 221200 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_dark.lua" }
    },
    {
      "range": { "start": 221201, "end": 223137 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_light.lua" }
    },
    {
      "range": { "start": 223138, "end": 224568 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/winter-day.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/winter-day.lua" }
    },
    {
      "range": { "start": 224569, "end": 225981 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/winter-night.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/themes/terra/winter-night.lua"
      }
    },
    {
      "range": { "start": 227271, "end": 229168 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_dark.lua" }
    },
    {
      "range": { "start": 240311, "end": 243429 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/terra/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/terra/ui_dark.lua" }
    }
  ]
}
