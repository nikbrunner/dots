{
  "id": "5f1ba96c-bbe9-41ab-9708-ae59de70d819",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\nHi there again,\n\nI want to rework the UI color tokens.\n\nI want to keep it as simple as possible, while also trying to remain flexible.\n\nHere is what I come up with my self.\n\n## V1 - Simple as shit tokens\n\nThe simplest token system I can think of.\n\nImportant would be that every fg token needs enough contrast to every bg token.\n\n<!-- prettier-ignore -->\n```yml\nbg:\n  primary: \"string\"                                  # Primary background for UI elements\n  secondary: \"string\"                                # Secondary background for sidebars and floating windows\n  active: \"string\"                                   # Active elements like active tab or cursorline\n  selection: \"string\"                                # Visual selection\n  search: \"string\"                                   # Search background\n  overlay: \"string\"                                  # Layer atop surface for temporary elements like popovers & notifications\n  contrast: \"string\"                                 # Inverted background\n  error: \"string\"                                    # Feedback - Errors\n  warn: \"string\"                                     # Feedback - Warnings\n  info: \"string\"                                     # Feedback - Information\n  hint: \"string\"                                     # Feedback - Hints\n  success: \"string\"                                  # Feedback - Success\n  add: \"string\"                                      # Version control - added\n  delete: \"string\"                                   # Version control - deleted\n  modify: \"string\"                                   # Version control - modified\nfg:\n  primary: \"string\"                                  # Primary text\n  secondary: \"string\"                                # Secondary text like comments and other secondary information\n  muted: \"string\"                                    # For disabled and unfocused text\n  accent: \"string\"                                   # For links and other text that needs to stand out\n  contrast: \"string\"                                 # Inverted which is also used on colored backgrounds like feedback\n  error: \"string\"                                    # Feedback - Errors\n  warn: \"string\"                                     # Feedback - Warnings\n  info: \"string\"                                     # Feedback - Information\n  hint: \"string\"                                     # Feedback - Hints\n  success: \"string\"                                  # Feedback - Success\n  add: \"string\"                                      # Version control - added\n  delete: \"string\"                                   # Version control - deleted\n  modify: \"string\"                                   # Version control - modified\n```\n\nThis would be same, but with little sub groups for feedback and git.\n\n<!-- prettier-ignore -->\n```yml\nbg:\n  primary: \"string\"                                  # Primary background for UI elements\n  secondary: \"string\"                                # Secondary background for sidebars and floating windows\n  active: \"string\"                                   # Active elements like active tab or cursorline\n  selection: \"string\"                                # Visual selection\n  search: \"string\"                                   # Search background\n  overlay: \"string\"                                  # Layer atop surface for temporary elements like popovers & notifications\n  contrast: \"string\"                                 # Inverted background\n  feedback:\n    error: \"string\"                                  # Feedback - Errors\n    warn: \"string\"                                   # Feedback - Warnings\n    info: \"string\"                                   # Feedback - Information\n    hint: \"string\"                                   # Feedback - Hints\n    success: \"string\"                                # Feedback - Success\n  git:\n    add: \"string\"                                    # Version control - added\n    delete: \"string\"                                 # Version control - deleted\n    modify: \"string\"                                 # Version control - modified\nfg:\n  primary: \"string\"                                  # Primary text\n  secondary: \"string\"                                # Secondary text like comments and other secondary information\n  muted: \"string\"                                    # For disabled and unfocused text\n  accent: \"string\"                                   # For links and other text that needs to stand out\n  contrast: \"string\"                                 # Inverted which is also used on colored backgrounds like feedback\n  feedback:\n    error: \"string\"                                  # Feedback - Errors\n    warn: \"string\"                                   # Feedback - Warnings\n    info: \"string\"                                   # Feedback - Information\n    hint: \"string\"                                   # Feedback - Hints\n    success: \"string\"                                # Feedback - Success\n  git:\n    add: \"string\"                                    # Version control - added\n    delete: \"string\"                                 # Version control - deleted\n    modify: \"string\"                                 # Version control - modified\n```\n\n## Resources\n\n/fetch  https://rosepinetheme.com/palette/\n\n---\n\nThis is what I currently have:\n\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Git\n---@field add                                                   string\n---@field delete                                                string\n---@field change                                                string\n---@field text                                                  string\n\n---@class BlackAtom.Theme.UI.Shades\n---@field dark                                                  string\n---@field main                                                  string\n---@field light                                                 string\n--\n---@class BlackAtom.Theme.UI.Background.Match\n---@field active                                                string Used for highlighting matches in the foreground for like visual selections\n---@field passive                                               string Used for highlighting matches in the background like for illuminate\n\n---@class BlackAtom.Theme.UI.Background\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field match                                                 BlackAtom.Theme.UI.Background.Match\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field neutral                                               string\n---@field invert                                                string\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Feedback\n---@field error                                                 string\n---@field warn                                                  string\n---@field info                                                  string\n---@field hint                                                  string\n---@field todo                                                  string\n---@field success                                               string\n\n---@class BlackAtom.Theme.UI\n---@field bg                                                    BlackAtom.Theme.UI.Background\n---@field fg                                                    BlackAtom.Theme.UI.Foreground\n---@field feedback                                              BlackAtom.Theme.UI.Feedback\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n\n```\n\n\nThis and some other places is where I use the ui color tokens. \n\nnvim/lua/black-atom/highlights\n```lua nvim/lua/black-atom/highlights/lsp.lua\n---@type BlackAtom.HighlightsSpec\nlocal highlight_map_extension = {\n    map = function(colors, config)\n        local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n        local darken = require(\"black-atom.lib.color\").darken\n        local styles = config.styles or {}\n\n        local diagnostics_error_color = colors.palette.red\n        local diagnostics_warn_color = colors.palette.yellow\n        local diagnostics_hint_color = colors.palette.blue\n        local diagnostics_info_color = colors.palette.green\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            LspCxxHlGroupEnumConstant = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupMemberVariable = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupNamespace = { fg = colors.palette.blue },\n            LspCxxhighlightskippedRegion = { fg = colors.palette.gray },\n            LspCxxhighlightskippedRegionBeginEnd = { fg = colors.palette.red },\n\n            DiagnosticError = { fg = colors.palette.red },\n            DiagnosticHint = { fg = colors.palette.blue },\n            DiagnosticInfo = { fg = colors.palette.cyan },\n            DiagnosticWarn = { fg = colors.palette.yellow },\n\n            DiagnosticVirtualTextError = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_error_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_error_color,\n            },\n            DiagnosticVirtualTextWarn = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_warn_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_warn_color,\n            },\n            DiagnosticVirtualTextInfo = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_info_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_info_color,\n            },\n            DiagnosticVirtualTextHint = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_hint_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_hint_color,\n            },\n\n            DiagnosticUnderlineError = {\n                sp = colors.palette.red,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineHint = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineInfo = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineWarn = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.yellow,\n            },\n\n            LspReferenceText = { underline = true },\n            LspReferenceWrite = { underline = true },\n            LspReferenceRead = { underline = true },\n\n            LspCodeLens = { fg = colors.palette.gray },\n            LspCodeLensSeparator = { fg = colors.palette.gray },\n\n            LspDiagnosticsDefaultError = { link = \"DiagnosticError\" },\n            LspDiagnosticsDefaultHint = { link = \"DiagnosticHint\" },\n            LspDiagnosticsDefaultInformation = { link = \"DiagnosticInfo\" },\n            LspDiagnosticsDefaultWarning = { link = \"DiagnosticWarn\" },\n            LspDiagnosticsUnderlineError = { link = \"DiagnosticUnderlineError\" },\n            LspDiagnosticsUnderlineHint = { link = \"DiagnosticUnderlineHint\" },\n            LspDiagnosticsUnderlineInformation = {\n                link = \"DiagnosticUnderlineInfo\",\n            },\n            LspDiagnosticsUnderlineWarning = { link = \"DiagnosticUnderlineWarn\" },\n            LspDiagnosticsVirtualTextError = { link = \"DiagnosticVirtualTextError\" },\n            LspDiagnosticsVirtualTextWarning = {\n                link = \"DiagnosticVirtualTextWarn\",\n            },\n            LspDiagnosticsVirtualTextInformation = {\n                link = \"DiagnosticVirtualTextInfo\",\n            },\n            LspDiagnosticsVirtualTextHint = { link = \"DiagnosticVirtualTextHint\" },\n        }\n\n        return highlights_map\n    end,\n}\n\nreturn highlight_map_extension\n```\n\nplugins\n```lua nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua\n--[[\n    Hello there!\n    Thank you for wanting to contribute to the black-atom.nvim plugin!\n\n    To create a new highlight map for your plugin, simply copy this template\n    and rename it to a suitable name, such as \"my_plugin.lua\".\n\n    You don't need to require this file anywhere manually, since every lua file\n    in the `lua/black-atom/highlights/plugins/` folder will be loaded automatically.\n    Note: Filenames ending with \"_template.lua\" will be disregarded!\n\n    Each highlight file must return a `BlackAtom.HighlightsSpec` table,\n    which at a minimum, should contain a field called `map`.\n    The `BlackAtom.HighlightsSpec` and `BlackAtom.Highlights` types\n    will assist with completion and type checking.\n    (Ensure the `lua-language-server` is installed for this to work.)\n\n    The `enabled` field is optional and defaults to true.\n    The `map` function needs to return a `BlackAtom.Highlights` table.\n    It receives the colors and config tables as parameters,\n    which gives you access to all the colors and config options.\n    -- `colors` is a table containing the color palette.\n    -- `config` is a table containing configuration options.\n\n    IMPORTANT: When you add a new plugin file, and run the `./update_supported_plugins.sh` script,\n    it will be automatically included in the Supported Plugins section of the README.md file.\n    This is a great way to showcase your contribution and help others discover new plugin support!\n\n    To ensure this automatic process works correctly, please follow these guidelines:\n\n    1. Add a @doc comment with the plugin's GitHub URL at the top of the file:\n       ---@doc https://github.com/username/plugin-name\n\n    2. Ensure that the highlight groups are returned in the specific structure:\n\n    ---@type BlackAtom.Highlights\n    return {\n        HighlightGroup1 = { ... }, -- Each line in this block after `---@type BlackAtom.Highlights` will be counted.\n        HighlightGroup2 = { ... },\n        ...\n    }\n\n    This structure allows our script to accurately count the number of highlight groups\n    for each plugin and update the README.md file accordingly.\n\n    NAMING CONVENTION: Please name your plugin highlight file name like your plugin name. Replace dots with underscores.\n    For example: `telescope.nvim` => `telescope_nvim.lua`\n\n    After you have finished your highlight map, you can test it by running Neovim in a separate window\n    and see if your highlights are applied correctly, or turn on `debug` mode\n    in the config file to see a generated file with all highlights.\n    This will be placed in the `debug` folder placed at the root of the plugin.\n\n    For further assistance or questions, consider reaching out through the project's GitHub repository.\n]]\n\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        -- There are also helper functions for common background colors, which are dependent on the config\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local p = colors.palette -- These are semantic color tokens for the palette\n        local ui = colors.ui -- These are semantic color tokens for the UI\n        local s = colors.syntax -- These are semantic color tokens for the syntax\n\n        -- IMPORTANT: Ensure the highlight groups are returned in the correct structure so that the script to automatically generate the README.md file can work correctly\n        ---@type BlackAtom.Highlights\n        return {\n            MyHighlightGroup = { fg = ui.fg.primary.main },\n            MyFloatBorder = { fg = p.green, bg = bg_dark },\n            MyDimmedHighlightGroup = { fg = ui.fg.neutral },\n            MyHighlightGroupWithUnderline = { fg = ui.fg.primary.main, underline = true },\n            MyVariableKindSymbol = { fg = s.variable.default },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua\n---@doc https://github.com/otavioschwanck/arrow.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            ArrowCurrentFile = { fg = p.yellow, bold = true },\n            ArrowFileIndex = { fg = p.cyan },\n            ArrowAction = { fg = p.dark_yellow },\n            ArrowDeleteMode = { fg = p.red, bold = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/blink_nvim.lua\n---@doc https://github.com/saghen/blink.cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local fg = colors.ui.fg\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            BlinkCmpMenu = { bg = bg.dark(config, colors) },\n            BlinkCmpLabel = { fg = fg.primary.main, bg.main(config, colors) },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            highlights_map[\"BlinkCmpKind\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua\n---@doc https://github.com/nvimdev/dashboard-nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            DashboardShortCut = { fg = colors.palette.blue },\n            DashboardHeader = { fg = colors.palette.yellow },\n            DashboardCenter = { fg = colors.palette.cyan },\n            DashboardFooter = { fg = colors.palette.dark_red, italic = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua\n---@doc https://github.com/sindrets/diffview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            DiffviewFilePanelTitle = { fg = p.blue, bold = true },\n            DiffviewFilePanelCounter = { fg = p.magenta, bold = true },\n            DiffviewFilePanelFileName = { fg = ui.fg.primary.main },\n            DiffviewNormal = { link = \"Normal\" },\n            DiffviewCursorLine = { link = \"CursorLine\" },\n            DiffviewVertSplit = { link = \"VertSplit\" },\n            DiffviewSignColumn = { link = \"SignColumn\" },\n            DiffviewStatusLine = { link = \"StatusLine\" },\n            DiffviewStatusLineNC = { link = \"StatusLineNC\" },\n            DiffviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            DiffviewFilePanelRootPath = { fg = p.gray },\n            DiffviewFilePanelPath = { fg = p.gray },\n            DiffviewFilePanelInsertions = { fg = p.green },\n            DiffviewFilePanelDeletions = { fg = p.red },\n            DiffviewStatusAdded = { fg = p.green },\n            DiffviewStatusUntracked = { fg = p.blue },\n            DiffviewStatusModified = { fg = p.blue },\n            DiffviewStatusRenamed = { fg = p.blue },\n            DiffviewStatusCopied = { fg = p.blue },\n            DiffviewStatusTypeChange = { fg = p.blue },\n            DiffviewStatusUnmerged = { fg = p.blue },\n            DiffviewStatusUnknown = { fg = p.red },\n            DiffviewStatusDeleted = { fg = p.red },\n            DiffviewStatusBroken = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua\n---@doc https://github.com/folke/edgy.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg_sidebar = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            EdgyNormal = { fg = fg.primary.main, bg = bg_sidebar },\n            EdgyTitle = { link = \"EdgyNormal\" },\n            EdgyIcon = { link = \"EdgyNormal\" },\n            EdgyIconActive = { fg = fg.active, bg = bg_sidebar },\n            EdgyWinBar = { fg = fg.active, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/flash.lua\n---@doc https://github.com/folke/flash.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = false,\n    map = function(colors, config)\n        local ui = colors.ui\n        local palette = colors.palette\n\n        -- FlashBackdrop     Comment      backdrop\n        -- FlashMatch        Search       search matches\n        -- FlashCurrent      IncSearch    current match\n        -- FlashLabel        Substitute   jump label\n        -- FlashPrompt       MsgArea      prompt\n        -- FlashPromptIcon   Special      prompt icon\n        -- FlashCursor       Cursor       cursor\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            FlashMatch = { fg = ui.fg.invert, bg = palette.dark_magenta },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/fzflua.lua\n---@doc https://github.com/ibhagwan/fzf-lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg = colors.ui.bg\n        local bg_dark = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            FzfLuaNormal = { fg = fg.primary.main, bg = bg_dark },\n            FzfLuaTitle = { fg = fg.active, bg = bg_dark },\n            FzfLuaBorder = { link = \"FloatBorder\" },\n            FzfLuaPreviewBorder = { link = \"FloatBorder\" },\n            FzfLuaCursorLine = { bg = bg.primary.main },\n            FzfLuaDirPart = { fg = fg.neutral },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua\n---@doc https://github.com/lewis6991/gitsigns.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitSignsAdd = { fg = p.green },\n            GitSignsAddLn = { fg = p.green },\n            GitSignsAddNr = { fg = p.green },\n            GitSignsChange = { fg = p.blue },\n            GitSignsChangeLn = { fg = p.blue },\n            GitSignsChangeNr = { fg = p.blue },\n            GitSignsDelete = { fg = p.red },\n            GitSignsDeleteLn = { fg = p.red },\n            GitSignsDeleteNr = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/glance_nvim.lua\n---@doc https://github.com/DNLHC/glance.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local bg = colors.ui.bg\n        local bg_main = bg.primary.main\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_main = fg.primary.main\n        local fg_neutral = fg.neutral\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        local border_style = { fg = fg.active, bg = bg_dark }\n\n        local neutral_element_style = { fg = fg_neutral, bg = bg.primary.dark }\n        local file_name_style = { fg = fg_active, bg = bg.primary.dark }\n        local file_path_style = neutral_element_style\n        local match_style = { bg = bg.match.active }\n\n        local preview_bg = bg_main\n        local preview_normal_style = { fg = fg_main, bg = preview_bg }\n        local list_bg = bg_dark\n        local list_normal_style = { fg = fg_active, bg = list_bg }\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- Preview (The preview of the file)\n            GlancePreviewNormal = preview_normal_style,\n            GlancePreviewMatch = match_style,\n            GlancePreviewCursorLine = { link = \"CursorLine\" },\n            GlancePreviewSignColumn = { link = \"SignColumn\" },\n            GlancePreviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            GlancePreviewLineNr = { link = \"LineNr\" },\n            GlancePreviewBorderBottom = border_style,\n\n            -- WindowBar\n            GlanceWinBarFilename = file_name_style,\n            GlanceWinBarFilepath = file_path_style,\n            GlanceWinBarTitle = { fg = fg_active, bg = bg_dark },\n\n            -- List (The list of affected files and references)\n            GlanceListNormal = list_normal_style,\n            GlanceListFilename = file_name_style,\n            GlanceListFilepath = file_path_style,\n            GlanceListCount = { fg = fg_active },\n            GlanceListMatch = match_style,\n            GlanceListCursorLine = { link = \"CursorLine\" },\n            GlanceListEndOfBuffer = { bg = list_bg },\n            GlanceListBorderBottom = border_style,\n\n            -- Other\n            GlanceFoldIcon = { fg = palette.blue },\n            GlanceIndent = { fg = fg.neutral, bg = list_bg },\n            GlanceBorderTop = border_style,\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/incline_nvim.lua\n---@doc https://github.com/b0o/incline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            InclineNormal = {\n                fg = colors.ui.fg.active,\n                bg = colors.ui.bg.primary.dark,\n                bold = true,\n            },\n            InclineNormalNC = {\n                fg = colors.ui.fg.neutral,\n                bg = colors.ui.bg.primary.dark,\n            },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua\n---@doc https://github.com/lukas-reineke/indent-blankline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            IndentBlanklineChar = { fg = colors.ui.fg.neutral },\n            IndentBlanklineContextChar = { fg = colors.ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/markview_nvim.lua\n---@doc https://github.com/OXY2DEV/markview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            MarkviewCode = { bg = s.markup.code.bg },\n            MarkviewInlineCode = { bg = s.markup.code.bg },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg_main = require(\"black-atom.lib\").bg.main(config, colors)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- mini.pick\n            MiniPickPrompt = { bg = bg_dark },\n            MiniPickMatchCurrent = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini_nvim.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            ---@doc https://github.com/echasnovski/mini.indentscope\n            MiniIndentscopeSymbol = { fg = ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_dark = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeNormalNC = { fg = ui.fg.neutral, bg = bg_dark },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.neutral },\n            NeoTreeEndOfBuffer = { fg = bg_dark },\n            NeoTreeFileName = { fg = ui.fg.primary.main },\n            NeoTreeFloatBorder = { fg = bg_dark, bg = bg_dark },\n            NeoTreeFloatNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeGitConflict = { fg = ui.fg.diff.change },\n            NeoTreeGitIgnored = { fg = ui.fg.neutral, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.diff.add },\n            NeoTreeTitleBar = { fg = ui.fg.neutral, bg = bg_dark },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = colors.ui.fg.primary.main },\n            CmpItemAbbrDeprecated = { fg = p.light_gray, strikethrough = true },\n            CmpItemAbbrMatch = { fg = p.cyan },\n            CmpItemAbbrMatchFuzzy = { fg = p.cyan, underline = true },\n            CmpItemMenu = { fg = colors.ui.fg.primary.main },\n            CmpItemKind = { fg = p.magenta },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = colors.ui.fg.invert, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua\n---@doc https://github.com/SmiteshP/nvim-navbuddy\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local match_style = { bg = colors.ui.bg.match.active }\n\n        local bg = colors.ui.bg\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            NavbuddyName = { fg = fg_active, bg = bg_dark }, -- highlight for name in source buffer\n            NavbuddyScope = match_style, -- highlight for scope of context in source buffer\n            NavbuddyFloatBorder = { fg = palette.cyan }, -- Floatborder highlight\n        }\n\n        local lsp_kind_icons = {\n            Array = palette.red,\n            Boolean = palette.blue,\n            Class = palette.yellow,\n            Constant = palette.dark_yellow,\n            Constructor = palette.blue,\n            Enum = palette.magenta,\n            EnumMember = palette.yellow,\n            Event = palette.yellow,\n            Field = palette.magenta,\n            File = palette.gray,\n            Function = palette.yellow,\n            Interface = palette.cyan,\n            Key = palette.magenta,\n            Method = palette.yellow,\n            Module = palette.dark_yellow,\n            Namespace = palette.dark_blue,\n            Null = palette.gray,\n            Number = palette.light_gray,\n            Object = palette.blue,\n            Operator = palette.magenta,\n            Package = palette.red,\n            Property = palette.blue,\n            String = palette.green,\n            Struct = palette.cyan,\n            TypeParameter = palette.dark_cyan,\n            Variable = palette.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons) do\n            highlights_map[\"Navbuddy\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_tree.lua\n---@doc https://github.com/nvim-tree/nvim-tree.lua\n---Tip: Use `:NvimTreeHiTest`to debug highlight groups\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_sidebar = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NvimTreeNormal = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeNormalNC = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeEndOfBuffer = { fg = bg_sidebar },\n            NvimTreeCursorLine = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua\n---@doc https://github.com/nvim-treesitter/nvim-treesitter-context\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_sidebar = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TreesitterContext = { bg = bg_sidebar },\n            TreesitterContextLineNumber = { fg = ui.fg.neutral, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            SnacksPickerCursorLine = { bg = ui.bg.active },\n            SnacksPickerListCursorLine = { link = \"SnacksPickerCursorLine\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua\n---@doc https://github.com/nvim-telescope/telescope.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TelescopeNormal = { bg = bg_dark },\n            TelescopeBorder = { fg = bg_dark, bg = bg_dark },\n            TelescopeTitle = { fg = ui.fg.active },\n            TelescopePromptPrefix = { fg = ui.fg.active },\n            TelescopeMatching = { fg = ui.fg.active },\n            TelescopeSelection = { fg = ui.fg.active, bg = ui.bg.primary.main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua\n---@doc https://github.com/airblade/vim-gitgutter\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local diff = colors.ui.fg.diff\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitGutterAdd = { fg = diff.add },\n            GitGutterChange = { fg = diff.change },\n            GitGutterDelete = { fg = diff.delete },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua\n---@doc https://github.com/folke/which-key.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            WhichKey = { fg = p.cyan },\n            WhichKeyIcon = { fg = s.markup.link },\n            WhichKeyDesc = { fg = p.blue },\n            WhichKeyGroup = { fg = p.dark_yellow },\n            WhichKeySeperator = { fg = p.green },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua\n---@doc https://github.com/mikavilpas/yazi.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            YaziFloat = { bg = bg_dark },\n        }\n    end,\n}\n```\n\n\n```lua nvim/lua/black-atom/highlights/syntax.lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local s = colors.syntax\n        -- TODO:  Rename to configurable globally\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        -- Treesitter Syntax Highlights (See: `:h treesitter-highlight-groups`)\n        ---@type BlackAtom.Highlights\n        return {\n            -- TODO: Link these to the builtin types (e.g. @operator & Operator)\n            -- TODO: Rename this file to `syntax.lua` and bring in the builtin types as well\n            -- TODO: Sort\n\n            Identifier = ext_hl({ fg = s.variable.default }, config.styles.syntax.variables),\n            StorageClass = { link = \"Identifier\" },\n            [\"@variable\"] = { link = \"Identifier\" },\n            [\"@variable.builtin\"] = { fg = s.variable.builtin },\n            [\"@variable.parameter\"] = { fg = s.variable.parameter, italic = true, bold = true },\n            [\"@variable.member\"] = { fg = s.variable.member, italic = true },\n\n            String = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string\"] = { link = \"String\" },\n            [\"@string.escape\"] = ext_hl({ fg = s.string.escape }, config.styles.syntax.strings),\n            [\"@string.regexp\"] = ext_hl({ fg = s.string.regexp }, config.styles.syntax.strings),\n            [\"@string.special\"] = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string.special.url\"] = ext_hl({ fg = s.string.default, underline = true }, config.styles.syntax.strings),\n\n            Boolean = { fg = s.boolean.default },\n            [\"@boolean\"] = { link = \"Boolean\" },\n\n            Number = { fg = s.number.default },\n            Float = { link = \"Number\" },\n            [\"@number\"] = { link = \"Number\" },\n\n            -- We assign the `Keyword` highlight to some of the other regexpt highlight groups,\n            -- which are also keywords more of less.\n            -- To me thats find for now, but I'm open to suggestions.\n            Keyword = ext_hl({ fg = s.keyword.default }, config.styles.syntax.keywords),\n            [\"@keyword\"] = { link = \"Keyword\" },\n            [\"@keyword.import\"] = ext_hl({ fg = s.keyword.import }, config.styles.syntax.keywords),\n            [\"@keyword.export\"] = ext_hl({ fg = s.keyword.export }, config.styles.syntax.keywords),\n            Statement = { link = \"Keyword\" },\n            Conditional = { link = \"Keyword\" },\n            Repeat = { link = \"Keyword\" },\n            Label = { link = \"Keyword\" },\n            Exception = { link = \"Keyword\" },\n            PreProc = { link = \"Keyword\" },\n            Include = { link = \"Keyword\" },\n            Define = { link = \"Keyword\" },\n            Macro = { link = \"Keyword\" },\n            PreCondit = { link = \"Keyword\" },\n\n            Operator = { fg = s.operator.default },\n            [\"@operator\"] = { link = \"Operator\" },\n\n            Type = { fg = s.type.default, bold = true },\n            Structure = { link = \"Type\" },\n            Typedef = { link = \"Type\" },\n            [\"@type\"] = { link = \"Type\" },\n            [\"@type.builtin\"] = { fg = s.type.builtin, bold = true },\n\n            Constant = { fg = s.constant.default },\n            SpecialChar = { fg = s.constant.builtin },\n            [\"@constant\"] = { link = \"Constant\" },\n            [\"@constant.builtin\"] = { link = \"SpecialChar\" },\n\n            Character = { fg = s.constant.default },\n            [\"@character\"] = { link = \"Character\" },\n\n            [\"@module\"] = { fg = s.module.default },\n\n            [\"@attribute\"] = { fg = s.attribute.default },\n            [\"@attribute.builtin\"] = { fg = s.attribute.builtin },\n\n            [\"@property\"] = { fg = s.property.default },\n\n            Function = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@function\"] = { link = \"Function\" },\n            [\"@function.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.builtin\"] = ext_hl({ fg = s.func.builtin }, config.styles.syntax.functions),\n            [\"@function.method\"] = ext_hl({ fg = s.func.method }, config.styles.syntax.functions),\n\n            [\"@method\"] = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n\n            [\"@constructor\"] = { fg = s.constructor.default, bold = true },\n\n            Delimiter = { fg = s.punctuation.delimiter },\n            Special = { fg = s.punctuation.special },\n            [\"@punctuation.bracket\"] = { fg = s.punctuation.bracket },\n            [\"@punctuation.delimiter\"] = { fg = s.punctuation.delimiter },\n\n            Comment = ext_hl({ fg = s.comment.default }, config.styles.syntax.comments),\n            Todo = { fg = s.comment.todo },\n            SpecialComment = ext_hl({ fg = s.comment.doc }, config.styles.syntax.comments),\n            [\"@comment\"] = { link = \"Comment\" },\n            [\"@comment.todo\"] = { link = \"Todo\" },\n            [\"@comment.documentation\"] = { link = \"SpecialComment\" },\n\n            [\"@markup.heading.1\"] = { fg = s.markup.heading.h1, bold = true },\n            [\"@markup.heading.2\"] = { fg = s.markup.heading.h2, bold = true },\n            [\"@markup.heading.3\"] = { fg = s.markup.heading.h3, bold = true },\n            [\"@markup.heading.4\"] = { fg = s.markup.heading.h4, bold = true },\n            [\"@markup.heading.5\"] = { fg = s.markup.heading.h5, bold = true },\n            [\"@markup.heading.6\"] = { fg = s.markup.heading.h6, bold = true },\n            [\"@markup.quote\"] = { fg = s.markup.quote, italic = true },\n            [\"@markup.link\"] = { fg = s.markup.link, underline = true },\n\n            [\"@markup.raw\"] = { fg = s.markup.code.fg, bg = s.markup.code.bg },\n\n            [\"@markup.list\"] = { fg = s.markup.list.default },\n            [\"@markup.list.checked\"] = { fg = s.markup.list.checked },\n            [\"@markup.list.unchecked\"] = { fg = s.markup.list.unchecked },\n\n            Tag = { fg = s.tag.default },\n            [\"@tag\"] = { link = \"Tag\" },\n            [\"@tag.builtin\"] = { fg = s.tag.builtin },\n            [\"@tag.custom\"] = { fg = s.tag.builtin },\n            [\"@tag.attribute\"] = { fg = s.tag.attribute },\n            [\"@tag.delimiter\"] = { fg = s.tag.delimiter },\n\n            -- Treesitter Semantic Tokens\n            [\"@lsp.type.namespace\"] = { link = \"@namespace\" },\n            [\"@lsp.type.type\"] = { link = \"@type\" },\n            [\"@lsp.type.class\"] = { link = \"@type\" },\n            [\"@lsp.type.enum\"] = { link = \"@type\" },\n            [\"@lsp.type.interface\"] = { link = \"@type\" },\n            [\"@lsp.type.struct\"] = { link = \"@structure\" },\n            [\"@lsp.type.parameter\"] = { link = \"@variable.parameter\" },\n            [\"@lsp.type.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable.readonly\"] = { link = \"@constant\" },\n            [\"@lsp.type.property\"] = { link = \"@property\" },\n            [\"@lsp.type.enumMember\"] = { link = \"@variable.member\" },\n            [\"@lsp.type.function\"] = { link = \"@function\" },\n            [\"@lsp.type.method\"] = { link = \"@method\" },\n            [\"@lsp.type.macro\"] = { link = \"@macro\" },\n            [\"@lsp.type.decorator\"] = { link = \"@function\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.dark(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n\n\nI need your counceling about my system and maybe other suggestions and ability to help me migrate from the old system to the new system.\n\nAlso we do not need to worry about backwards compatibility. This project is still in early development. No one is using it. We can be desctructive.\n\nBefore the migration though I will give you more context\nThank you for providing all the detailed context! Let me help analyze your proposed token system and suggest a migration strategy.\n\nYour proposed V1 token system is indeed simpler and clearer than the current one. I particularly like:\n\n1. The flat structure (or shallow nesting with feedback/git groups)\n2. Clear semantic naming\n3. The requirement that fg tokens need enough contrast with bg tokens\n4. Separation between UI, feedback, and version control concerns\n\nA few suggestions to consider:\n\n1. For the `bg` tokens, you might want to add:\n   ```yml\n   bg:\n     hover: \"string\"      # Hover state for interactive elements\n     disabled: \"string\"   # Disabled state for interactive elements\n```\n\n2. For accessibility, you might want to consider adding opacity variants:\n   ```yml\n   bg:\n     overlay:\n       default: \"string\"  # Regular overlay\n       light: \"string\"    # Light overlay (e.g., 10% opacity)\n       heavy: \"string\"    # Heavy overlay (e.g., 80% opacity)\n```\n\n3. Consider adding interaction states for feedback:\n   ```yml\n   feedback:\n     error:\n       default: \"string\"\n       hover: \"string\"\n     # ... same for other feedback types\n```\n\nFor migration strategy, I suggest:\n\n1. First, create the new token structure in a separate file\n2. Map the old tokens to new ones\n3. Create a migration script to help convert highlight files\n4. Update highlight files one at a time\n5. Remove old token system\n\nWould you like me to:\n1. Help create a detailed mapping between old and new tokens?\n2. Create a migration script?\n3. Help convert some of the highlight files as examples?\n\nLet me know which aspects you'd like to focus on first!\nTo answer your questions:\n\n1. Yes we can do that.\n2. We don't need to do that.\n3. Adds to much complexity.\n\n- Should we keep the nested groups for `feedback` and `git` or should we keep it flat?\n- Some design systems use tokens like `on_feedback` or `on_accent` for text tokens, but I am not sure if I need that. \n  - For me it makes sense, to use `fg.contrast` on all `bg.feedback` tokens. But maybe I am not seeing something. \n  - As you can see in the rose pine documentation, the tokens are annotated additonally to their names\n  \n\nLooking at your points and the Rose Pine documentation, I agree that simpler is better here. Let's keep the token system as flat as possible while maintaining clarity.\n\nI suggest keeping it flat (without nested groups) because:\n1. It's simpler to use and maintain\n2. The naming clearly indicates the purpose (e.g., `bg.error` vs `bg.feedback.error`)\n3. It's easier to ensure contrast ratios between fg/bg pairs\n4. Most theme frameworks use flat structures\n\nRegarding `on_feedback` or `on_accent`:\n- Your approach of using `fg.contrast` on colored backgrounds (like feedback) is solid\n- Having a single contrast token is simpler than individual `on_*` tokens\n- The semantic intention is clear: `fg.contrast` is meant to be readable on any colored background\n\nHere's a suggestion for the final flat structure with annotations:\n```yml\nbg:\n  primary: \"string\"    # Primary background for UI elements\n  secondary: \"string\"  # Secondary background for sidebars and floating windows\n  active: \"string\"    # Active elements like active tab or cursorline\n  hover: \"string\"     # Hover state for interactive elements\n  disabled: \"string\"  # Disabled state for interactive elements\n  selection: \"string\" # Visual selection\n  search: \"string\"    # Search background\n  overlay: \"string\"   # Layer atop surface for temporary elements\n  contrast: \"string\"  # Inverted background\n  error: \"string\"     # Error feedback background\n  warn: \"string\"      # Warning feedback background\n  info: \"string\"      # Info feedback background\n  hint: \"string\"      # Hint feedback background\n  success: \"string\"   # Success feedback background\n  add: \"string\"       # Git added background\n  delete: \"string\"    # Git deleted background\n  modify: \"string\"    # Git modified background\n\nfg:\n  primary: \"string\"   # Primary text\n  secondary: \"string\" # Secondary text, comments\n  muted: \"string\"    # Disabled and unfocused text\n  accent: \"string\"   # Links and highlighted text\n  contrast: \"string\" # Text on colored backgrounds\n  error: \"string\"    # Error text\n  warn: \"string\"     # Warning text\n  info: \"string\"     # Info text\n  hint: \"string\"     # Hint text\n  success: \"string\"  # Success text\n  add: \"string\"      # Git added text\n  delete: \"string\"   # Git deleted text\n  modify: \"string\"   # Git modified text\n```\n\nWould you like me to start working on the token mapping between the old and new system?\n\n> ```yml\n> bg:                                                 # 15 tokens\n>   primary: \"color\"                                  # Primary background for UI elements\n>   secondary: \"color\"                                # Secondary background for sidebars and floating windows\n>   active: \"color\"                                   # Active elements like active tab or cursorline\n>   disabled: \"string\"                                # Disabled state for interactive elements\n>   hover: \"string\"                                   # Hover state for interactive elements\n>   selection: \"color\"                                # Visual selection\n>   search: \"color\"                                   # Search background\n>   overlay: \"color\"                                  # Layer atop surface for temporary elements like popovers & notifications\n>   contrast: \"color\"                                 # Inverted background\n>   error: \"color\"                                    # Feedback - Errors\n>   warn: \"color\"                                     # Feedback - Warnings\n>   info: \"color\"                                     # Feedback - Information\n>   hint: \"color\"                                     # Feedback - Hints\n>   success: \"color\"                                  # Feedback - Success\n>   add: \"color\"                                      # Git added\n>   delete: \"color\"                                   # Git deleted\n>   modify: \"color\"                                   # Git modified\n>   \n> fg:                                                 # 13 tokens\n>   primary: \"color\"                                  # Primary text\n>   secondary: \"color\"                                # Secondary text like comments and other secondary information\n>   accent: \"color\"                                   # For links and other text that needs to stand out\n>   disabled: \"color\"                                 # For disabled and unfocused text\n>   contrast: \"color\"                                 # Inverted which is also used on colored or inverted backgrounds like feedback\n>   error: \"color\"                                    # Feedback - Errors\n>   warn: \"color\"                                     # Feedback - Warnings\n>   info: \"color\"                                     # Feedback - Information\n>   hint: \"color\"                                     # Feedback - Hints\n>   success: \"color\"                                  # Feedback - Success\n>   add: \"color\"                                      # Git added\n>   delete: \"color\"                                   # Git deleted\n>   modify: \"color\"                                   # Git modified\n> ```\n\nThis is what I have now. I am a little unsure about the names primary and secondary.\n\nI know this is pretty common, but I am not sure that I like it.\n\nI understand your hesitation about \"primary\" and \"secondary\". These terms can be a bit abstract and don't directly communicate their purpose. Here are some alternative naming approaches we could consider:\n\n1. Surface-based naming:\n```yml\nbg:\n  base: \"color\"          # Main background\n  surface: \"color\"       # Elevated surface like sidebars/floats\n  # ...\n```\n\n2. Layer-based naming:\n```yml\nbg:\n  main: \"color\"          # Main background\n  float: \"color\"         # Floating elements background\n  # ...\n```\n\n3. Purpose-based naming:\n```yml\nbg:\n  canvas: \"color\"        # The main canvas/background\n  panel: \"color\"         # Panels, sidebars, floating windows\n  # ..\n  ```md nvim/UI_COLOR_TOKENS.md:8-44\n  <!-- prettier-ignore -->\n  ```yml\n  bg:                                                 # 15 tokens\n    default: \"color\"                                  # Default background for UI elements\n    panel: \"color\"                                    # Background for panels like sidebars and floating windows\n    active: \"color\"                                   # Active elements like active tab or cursorline\n    disabled: \"string\"                                # Disabled state for interactive elements\n    hover: \"string\"                                   # Hover state for interactive elements\n    selection: \"color\"                                # Visual selection\n    search: \"color\"                                   # Search background\n    overlay: \"color\"                                  # Layer atop surface for temporary elements like popovers & notifications\n    contrast: \"color\"                                 # Inverted background\n    error: \"color\"                                    # Feedback - Errors\n    warn: \"color\"                                     # Feedback - Warnings\n    info: \"color\"                                     # Feedback - Information\n    hint: \"color\"                                     # Feedback - Hints\n    success: \"color\"                                  # Feedback - Success\n    add: \"color\"                                      # Git added\n    delete: \"color\"                                   # Git deleted\n    modify: \"color\"                                   # Git modified\n    \n  fg:                                                 # 13 tokens\n    default: \"color\"                                  # Default text\n    subtle: \"color\"                                   # Subtle text like comments and other secondary information\n    accent: \"color\"                                   # For links and other text that needs to stand out\n    disabled: \"color\"                                 # For disabled and unfocused text\n    contrast: \"color\"                                 # Inverted which is also used on colored or inverted backgrounds like feedback\n    error: \"color\"                                    # Feedback - Errors\n    warn: \"color\"                                     # Feedback - Warnings\n    info: \"color\"                                     # Feedback - Information\n    hint: \"color\"                                     # Feedback - Hints\n    success: \"color\"                                  # Feedback - Success\n    add: \"color\"                                      # Git added\n    delete: \"color\"                                   # Git deleted\n    modify: \"color\"                                   # Git modified\n  ```\n  \n  ```\n  .\n```\n\n4. Depth-based naming:\n```yml\nbg:\n  default: \"color\"       # Default background\n  raised: \"color\"        # Raised/elevated elements\n  # ...\n```\n\nMy personal preference would be either the surface-based or purpose-based naming as they most clearly communicate the intended use.\n\nWhat are your thoughts on these alternatives? Do any of these feel more intuitive to you? Or would you prefer a different naming approach altogether?\n\n```md nvim/UI_COLOR_TOKENS.md:8-44\n<!-- prettier-ignore -->\n```yml\nbg:                                                 # 15 tokens\n  default: \"color\"                                  # Default background for UI elements\n  panel: \"color\"                                    # Background for panels like sidebars and floating windows\n  active: \"color\"                                   # Active elements like active tab or cursorline\n  disabled: \"string\"                                # Disabled state for interactive elements\n  hover: \"string\"                                   # Hover state for interactive elements\n  selection: \"color\"                                # Visual selection\n  search: \"color\"                                   # Search background\n  overlay: \"color\"                                  # Layer atop surface for temporary elements like popovers & notifications\n  contrast: \"color\"                                 # Inverted background\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n  \nfg:                                                 # 13 tokens\n  default: \"color\"                                  # Default text\n  subtle: \"color\"                                   # Subtle text like comments and other secondary information\n  accent: \"color\"                                   # For links and other text that needs to stand out\n  disabled: \"color\"                                 # For disabled and unfocused text\n  contrast: \"color\"                                 # Inverted which is also used on colored or inverted backgrounds like feedback\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n```\n\n```\n\nWhat do you think?\nThis is much better! The naming is more clear and intuitive. I particularly like:\n\n1. `default`/`panel` instead of `primary`/`secondary`\n   - More descriptive of their actual purpose\n   - `panel` clearly indicates its use for sidebars, floating windows, etc.\n\n2. `subtle` instead of `secondary` for text\n   - Better describes its purpose for less prominent text\n   - More intuitive for things like comments and supplementary information\n\nThe structure is clean and the tokens are well-organized with clear purposes:\n- Base UI elements (default, panel, active, disabled, hover)\n- Special states (selection, search, overlay, contrast)\n- Feedback states (error, warn, info, hint, success)\n- Version control (add, delete, modify)\n\nWould you like to proceed with:\n1. Creating the types for this new token system?\n2. Starting the mapping from the old system to this new one?\n3. Converting some highlight files as examples?\nThanks. Maybe we should add `bg.float` aswell? Or could this be implied by `panel`?\nIs a floating panel still a panel? 😅\nThat's a good question! While a floating window could be considered a type of panel, there might be cases where we want to differentiate them. \n\nLet's think about it:\n\n1. **Same background** for both:\n   - If panels and floating windows always share the same background color\n   - `panel` would cover both sidebars and floating windows\n   - Simpler, fewer tokens\n\n2. **Different backgrounds**:\n   ```yml\n   bg:\n     default: \"color\"    # Default background\n     panel: \"color\"      # Sidebars, permanent panels\n     float: \"color\"      # Floating windows, popups, temporary UI\n     # ...\n   ```\n   - More flexible\n   - Could be useful for creating visual hierarchy\n   - Floating elements might need different treatment for better visibility\n\nLooking at your highlight files, I notice you often use the same color for both (e.g., in `telescope_nvim.lua`, `neo-tree.lua`). However, having the flexibility to differentiate might be valuable.\n\nMy recommendation would be to add `float` as a separate token. Even if initially it shares the same color as `panel`, having the semantic distinction gives theme authors more flexibility and makes the intended usage clearer.\n\nWhat do you think?\nYeah than we can remove `bg.overlay` too\nAgreed! That makes sense since `bg.float` would serve the same purpose as `bg.overlay` - they're both about layered/elevated UI elements.\n\nHere's the updated token structure:\n\n```yml\nbg:                                                 # 15 tokens\n  default: \"color\"                                  # Default background for UI elements\n  panel: \"color\"                                    # Background for sidebars and other panels\n  float: \"color\"                                    # Background for floating windows, popups\n  active: \"color\"                                   # Active elements like active tab or cursorline\n  disabled: \"string\"                                # Disabled state for interactive elements\n  hover: \"string\"                                   # Hover state for interactive elements\n  selection: \"color\"                                # Visual selection\n  search: \"color\"                                   # Search background\n  contrast: \"color\"                                 # Inverted background\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n\nfg:                                                 # 13 tokens\n  default: \"color\"                                  # Default text\n  subtle: \"color\"                                   # Subtle text like comments and other secondary information\n  accent: \"color\"                                   # For links and other text that needs to stand out\n  disabled: \"color\"                                 # For disabled and unfocused text\n  contrast: \"color\"                                 # Inverted which is also used on colored or inverted backgrounds like feedback\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n```\n\nWould you like to start with the type definitions for this new structure?\n\n```md nvim/UI_COLOR_TOKENS.md\n# UI Theme Token System\n\n## Tokens\n\nThe simplest token system I can think of.\nImportant would be that every fg token needs enough contrast to every bg token.\n\n<!-- prettier-ignore -->\n```yml\nbg:                                                 # 15 tokens\n  default: \"color\"                                  # Default background for UI elements\n  panel: \"color\"                                    # Background for sidebars and statusline\n  float: \"color\"                                    # Background for floating windows, popups\n  active: \"color\"                                   # Active elements like cursorline or active tab\n  disabled: \"string\"                                # Disabled background state for interactive elements\n  hover: \"string\"                                   # Hover state for interactive elements\n  selection: \"color\"                                # Visual selection\n  search: \"color\"                                   # Search background\n  contrast: \"color\"                                 # Inverted background\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n  \nfg:                                                 # 13 tokens\n  default: \"color\"                                  # Default text\n  subtle: \"color\"                                   # Subtle text like comments and other secondary information\n  accent: \"color\"                                   # For links and other text that needs to stand out\n  disabled: \"color\"                                 # For disabled text\n  contrast: \"color\"                                 # Inverted which is also used on colored or inverted backgrounds like feedback\n  error: \"color\"                                    # Feedback - Errors\n  warn: \"color\"                                     # Feedback - Warnings\n  info: \"color\"                                     # Feedback - Information\n  hint: \"color\"                                     # Feedback - Hints\n  success: \"color\"                                  # Feedback - Success\n  add: \"color\"                                      # Git added\n  delete: \"color\"                                   # Git deleted\n  modify: \"color\"                                   # Git modified\n```\n\n## Resources\n\n- https://rosepinetheme.com/palette/\n- https://carbondesignsystem.com/elements/color/tokens/\n```\n\n\nWell I think this is pretty good. I am a little scared that we don't use subgroups, because I personally like them, but for most people the flat structure is probably the easiest. We just need a little documentation.\nThe documentation helps make the structure clear, and the flat system is indeed more approachable. The token names are self-explanatory, and the comments provide additional clarity.\n\nLet's create the types for this new system. Here's a draft:\n\n```lua\n---@class BlackAtom.Theme.UI.Background\n---@field default     string  # Default background for UI elements\n---@field panel       string  # Background for sidebars and statusline\n---@field float       string  # Background for floating windows, popups\n---@field active      string  # Active elements like cursorline or active tab\n---@field disabled    string  # Disabled background state for interactive elements\n---@field hover       string  # Hover state for interactive elements\n---@field selection   string  # Visual selection\n---@field search      string  # Search background\n---@field contrast    string  # Inverted background\n---@field error       string  # Feedback - Errors\n---@field warn        string  # Feedback - Warnings\n---@field info        string  # Feedback - Information\n---@field hint        string  # Feedback - Hints\n---@field success     string  # Feedback - Success\n---@field add         string  # Git added\n---@field delete      string  # Git deleted\n---@field modify      string  # Git modified\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field default     string  # Default text\n---@field subtle      string  # Subtle text like comments and other secondary information\n---@field accent      string  # For links and other text that needs to stand out\n---@field disabled    string  # For disabled text\n---@field contrast    string  # Inverted which is also used on colored or inverted backgrounds like feedback\n---@field error       string  # Feedback - Errors\n---@field warn        string  # Feedback - Warnings\n---@field info        string  # Feedback - Information\n---@field hint        string  # Feedback - Hints\n---@field success     string  # Feedback - Success\n---@field add         string  # Git added\n---@field delete      string  # Git deleted\n---@field modify      string  # Git modified\n\n---@class BlackAtom.Theme.UI\n---@field bg BlackAtom.Theme.UI.Background\n---@field fg BlackAtom.Theme.UI.Foreground\n```\n\nWould you like me to:\n1. Start mapping the old system to the new one?\n2. Create an example of converting one of the highlight files?\n3. Something else?\n\nYeah lets start by updating the types file first.\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Git\n---@field add                                                   string\n---@field delete                                                string\n---@field change                                                string\n---@field text                                                  string\n\n---@class BlackAtom.Theme.UI.Shades\n---@field dark                                                  string\n---@field main                                                  string\n---@field light                                                 string\n--\n---@class BlackAtom.Theme.UI.Background.Match\n---@field active                                                string Used for highlighting matches in the foreground for like visual selections\n---@field passive                                               string Used for highlighting matches in the background like for illuminate\n\n---@class BlackAtom.Theme.UI.Background\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field match                                                 BlackAtom.Theme.UI.Background.Match\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field neutral                                               string\n---@field invert                                                string\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Feedback\n---@field error                                                 string\n---@field warn                                                  string\n---@field info                                                  string\n---@field hint                                                  string\n---@field todo                                                  string\n---@field success                                               string\n\n---@class BlackAtom.Theme.UI\n---@field bg                                                    BlackAtom.Theme.UI.Background\n---@field fg                                                    BlackAtom.Theme.UI.Foreground\n---@field feedback                                              BlackAtom.Theme.UI.Feedback\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n\n```\n\n\nI'll update the UI-related types to match our new token system. We can remove `BlackAtom.Theme.UI.Git`, `BlackAtom.Theme.UI.Shades`, `BlackAtom.Theme.UI.Background.Match`, and `BlackAtom.Theme.UI.Feedback` since they're no longer needed with our flat structure.\n\nHere's the updated UI types:\n\n```lua\n---@class BlackAtom.Theme.UI.Background\n---@field default       string  # Default background for UI elements\n---@field panel         string  # Background for sidebars and statusline\n---@field float         string  # Background for floating windows, popups\n---@field active        string  # Active elements like cursorline or active tab\n---@field disabled      string  # Disabled background state for interactive elements\n---@field hover         string  # Hover state for interactive elements\n---@field selection     string  # Visual selection\n---@field search        string  # Search background\n---@field contrast      string  # Inverted background\n---@field error         string  # Feedback - Errors\n---@field warn          string  # Feedback - Warnings\n---@field info          string  # Feedback - Information\n---@field hint          string  # Feedback - Hints\n---@field success       string  # Feedback - Success\n---@field add          string  # Git added\n---@field delete       string  # Git deleted\n---@field modify       string  # Git modified\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field default       string  # Default text\n---@field subtle        string  # Subtle text like comments and other secondary information\n---@field accent        string  # For links and other text that needs to stand out\n---@field disabled      string  # For disabled text\n---@field contrast      string  # Inverted which is also used on colored or inverted backgrounds like feedback\n---@field error         string  # Feedback - Errors\n---@field warn          string  # Feedback - Warnings\n---@field info          string  # Feedback - Information\n---@field hint          string  # Feedback - Hints\n---@field success       string  # Feedback - Success\n---@field add          string  # Git added\n---@field delete       string  # Git deleted\n---@field modify       string  # Git modified\n\n---@class BlackAtom.Theme.UI\n---@field bg           BlackAtom.Theme.UI.Background\n---@field fg           BlackAtom.Theme.UI.Foreground\n```\n\nWould you like me to create a mapping between the old and new token systems next? This would help us systematically update all the highlight files.\n\nOkay I have updated the types.\n\nPlease help me migrate these now:\n\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nI'll help create patches to migrate both files to the new token system.\n\n<patch>\n<title>Migrate UI theme files to new token system</title>\n\n<edit>\n<path>nvim/lua/black-atom/themes/default/ui_dark.lua</path>\n<description>Update dark UI theme to use new flat token structure</description>\n<operation>update</operation>\n<old_text>---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend</old_text>\n<new_text>---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            default = primaries[2],     -- Was primary.main\n            panel = primaries[4],       -- Was secondary.dark\n            float = primaries[1],       -- Was primary.dark\n            active = primaries[4],      -- Same as before\n            disabled = primaries[6],    -- Using secondary.light\n            hover = primaries[3],       -- Using primary.light\n            selection = primaries[5],   -- Was match.passive\n            search = palette.yellow,    -- Was match.active\n            contrast = primaries[11],   -- Using fg.primary.main for contrast\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,      -- Was diff.change\n        },\n        fg = {\n            default = primaries[11],    -- Was primary.main\n            subtle = primaries[8],      -- Was secondary.main\n            accent = palette.dark_yellow, -- Was active\n            disabled = primaries[6],    -- Was neutral\n            contrast = primaries[2],    -- Was invert\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,      -- Was diff.change\n        },\n    }\nend</new_text>\n</edit>\n\n<edit>\n<path>nvim/lua/black-atom/themes/default/ui_light.lua</path>\n<description>Update light UI theme to use new flat token structure</description>\n<operation>update</operation>\n<old_text>local darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend</new_text>\n<new_text>local darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            default = primaries[11],    -- Was primary.main\n            panel = primaries[7],       -- Was secondary.dark\n            float = primaries[10],      -- Was primary.dark\n            active = primaries[5],      -- Same as before\n            disabled = primaries[9],    -- Using secondary.light\n            hover = primaries[12],      -- Using primary.light\n            selection = darken(palette.magenta, 0.15, primaries[11]), -- Was match.passive\n            search = darken(palette.green, 0.25, primaries[11]),      -- Was match.active\n            contrast = primaries[2],    -- Using fg.primary.main for contrast\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,      -- Was diff.change\n        },\n        fg = {\n            default = primaries[2],     -- Was primary.main\n            subtle = primaries[5],      -- Was secondary.main\n            accent = palette.red,       -- Was active\n            disabled = primaries[7],    -- Was neutral\n            contrast = primaries[11],   -- Was invert\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,      -- Was diff.change\n        },\n    }\nend</new_text>\n</edit>\n</patch>\n\nKey changes made:\n1. Flattened the nested structures (primary/secondary shades)\n2. Renamed tokens to match new schema\n3. Merged feedback colors into main structure\n4. Consolidated git-related colors\n5. Added inline comments to track the mappings\n6. Preserved color logic but adapted to new structure\n\nWould you like me to:\n1. Remove the comments after you've reviewed the changes?\n2. Start updating some of the highlight files to use the new tokens?\n3. Something else?\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            default = primaries[2],\n            panel = primaries[1],\n            float = primaries[1],\n            active = primaries[3],\n            disabled = primaries[6],\n            hover = primaries[3],\n            selection = primaries[4],\n            search = palette.yellow,\n            contrast = primaries[11],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n        fg = {\n            default = primaries[11],\n            subtle = primaries[8],\n            accent = palette.yellow,\n            disabled = primaries[6],\n            contrast = primaries[2],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Background\n---@field default                                               string  # Default background for UI elements\n---@field panel                                                 string  # Background for sidebars and statusline\n---@field float                                                 string  # Background for floating windows, popups\n---@field active                                                string  # Active elements like cursorline or active tab\n---@field disabled                                              string  # Disabled background state for interactive elements\n---@field hover                                                 string  # Hover state for interactive elements\n---@field selection                                             string  # Visual selection\n---@field search                                                string  # Search background\n---@field contrast                                              string  # Inverted background\n---@field error                                                 string  # Feedback - Errors\n---@field warn                                                  string  # Feedback - Warnings\n---@field info                                                  string  # Feedback - Information\n---@field hint                                                  string  # Feedback - Hints\n---@field success                                               string  # Feedback - Success\n---@field add                                                   string  # Git added\n---@field delete                                                string  # Git deleted\n---@field modify                                                string  # Git modified\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field default                                               string  # Default text\n---@field subtle                                                string  # Subtle text like comments and other secondary information\n---@field accent                                                string  # For links and other text that needs to stand out\n---@field disabled                                              string  # For disabled text\n---@field contrast                                              string  # Inverted which is also used on colored or inverted backgrounds like feedback\n---@field error                                                 string  # Feedback - Errors\n---@field warn                                                  string  # Feedback - Warnings\n---@field info                                                  string  # Feedback - Information\n---@field hint                                                  string  # Feedback - Hints\n---@field success                                               string  # Feedback - Success\n---@field add                                                   string  # Git added\n---@field delete                                                string  # Git deleted\n---@field modify                                                string  # Git modified\n\n---@class BlackAtom.Theme.UI\n---@field bg           BlackAtom.Theme.UI.Background\n---@field fg           BlackAtom.Theme.UI.Foreground\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n```\n\n\nI adjusted it a bit.\n\nPlease try to understand what I have done and also convert the light version:\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n\nLooking at your adjustments to the dark theme, I notice you:\n1. Made panel and float share the same color (primaries[1])\n2. Used primaries[3] for both active and hover states\n3. Simplified the selection color (using primaries[4] directly)\n4. Changed accent to palette.yellow (was dark_yellow before)\n5. Kept the feedback and git colors consistent with the old version\n\nBased on this pattern, here's the converted light theme:\n\n```lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            default = primaries[11],\n            panel = primaries[10],\n            float = primaries[10],\n            active = primaries[12],\n            disabled = primaries[9],\n            hover = primaries[12],\n            selection = primaries[7],\n            search = darken(palette.green, 0.25, primaries[11]),\n            contrast = primaries[2],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n        fg = {\n            default = primaries[2],\n            subtle = primaries[5],\n            accent = palette.red,\n            disabled = primaries[9],\n            contrast = primaries[11],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n    }\nend\n```\n\nKey changes:\n1. Mirrored the dark theme's structure but with inverted primary indices\n2. Kept the same color relationships (panel/float sharing colors, active/hover sharing colors)\n3. Preserved the use of `darken` for search background\n4. Maintained the accent color as palette.red (as it was in the original light theme)\n5. Kept feedback and git colors consistent\n\nWould you like me to:\n1. Explain any specific color choices in more detail?\n2. Start updating highlight files to use these new tokens?\n3. Something else?\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    ---@type BlackAtom.Theme.UI\n    return {\n        bg = {\n            default = primaries[11],\n            panel = primaries[10],\n            float = primaries[10],\n            active = primaries[12],\n            disabled = primaries[9],\n            hover = primaries[12],\n            selection = primaries[7],\n            search = palette.yellow,\n            contrast = primaries[2],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n        fg = {\n            default = primaries[2],\n            subtle = primaries[5],\n            accent = palette.red,\n            disabled = primaries[9],\n            contrast = primaries[11],\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            success = palette.green,\n            add = palette.green,\n            delete = palette.red,\n            modify = palette.blue,\n        },\n    }\nend\n```\n\n\nCould you please now migrate the highlights?\nLets start by converting the bg lib?\n\n```lua nvim/lua/black-atom/lib/bg.lua\nlocal cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.main(config, colors)\n    local no_color = colors.none\n    local bg = colors.ui.bg\n\n    return cond_hl(bg.primary.main, {\n        [config.styles.transparency == \"partial\"] = no_color,\n        [config.styles.transparency == \"full\"] = no_color,\n    })\nend\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.dark(config, colors)\n    local dark_sidebars = config.styles.dark_sidebars\n    local transparency = config.styles.transparency\n    local bg = colors.ui.bg\n    local no_color = colors.none\n\n    return cond_hl(bg.primary.dark, {\n        [not dark_sidebars] = bg.primary.main,\n        [dark_sidebars and transparency == \"partial\"] = bg.primary.dark,\n        [transparency == \"full\"] = no_color,\n    })\nend\n\nreturn M\n```\n\n\n\n\nI'll help convert the bg lib to use the new token system. The main changes will be updating the token references from the nested structure to the flat one.\n\n<patch>\n<title>Update bg lib to use new token system</title>\n<edit>\n<path>nvim/lua/black-atom/lib/bg.lua</path>\n<description>Convert background utility functions to use new flat token structure</description>\n<operation>update</operation>\n<old_text>local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.main(config, colors)\n    local no_color = colors.none\n    local bg = colors.ui.bg\n\n    return cond_hl(bg.primary.main, {\n        [config.styles.transparency == \"partial\"] = no_color,\n        [config.styles.transparency == \"full\"] = no_color,\n    })\nend\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.dark(config, colors)\n    local dark_sidebars = config.styles.dark_sidebars\n    local transparency = config.styles.transparency\n    local bg = colors.ui.bg\n    local no_color = colors.none\n\n    return cond_hl(bg.primary.dark, {\n        [not dark_sidebars] = bg.primary.main,\n        [dark_sidebars and transparency == \"partial\"] = bg.primary.dark,\n        [transparency == \"full\"] = no_color,\n    })\nend\n\nreturn M</old_text>\n<new_text>local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.main(config, colors)\n    local no_color = colors.none\n    local bg = colors.ui.bg\n\n    return cond_hl(bg.default, {\n        [config.styles.transparency == \"partial\"] = no_color,\n        [config.styles.transparency == \"full\"] = no_color,\n    })\nend\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.dark(config, colors)\n    local dark_sidebars = config.styles.dark_sidebars\n    local transparency = config.styles.transparency\n    local bg = colors.ui.bg\n    local no_color = colors.none\n\n    return cond_hl(bg.panel, {\n        [not dark_sidebars] = bg.default,\n        [dark_sidebars and transparency == \"partial\"] = bg.panel,\n        [transparency == \"full\"] = no_color,\n    })\nend\n\nreturn M</new_text>\n</edit>\n</patch>\n\nKey changes:\n1. `bg.primary.main` → `bg.default`\n2. `bg.primary.dark` → `bg.panel`\n\nThe logic remains the same, we're just using the new token names:\n- The main background is now `default` instead of `primary.main`\n- The dark sidebar background is now `panel` instead of `primary.dark`\n\nWould you like me to:\n1. Start converting some of the highlight files?\n2. Add more background utility functions?\n3. Something else?\n\n```lua nvim/lua/black-atom/lib/bg.lua\nlocal cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n\nlocal M = {}\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.main(config, colors)\n    local no_color = colors.none\n    local bg = colors.ui.bg\n\n    return cond_hl(bg.default, {\n        [config.styles.transparency == \"partial\"] = no_color,\n        [config.styles.transparency == \"full\"] = no_color,\n    })\nend\n\n---@param config BlackAtom.Config\n---@param colors BlackAtom.Theme.Colors\n---@return string\nfunction M.panel(config, colors)\n    local dark_sidebars = config.styles.dark_sidebars\n    local transparency = config.styles.transparency\n    local bg = colors.ui.bg\n    local no_color = colors.none\n\n    return cond_hl(bg.panel, {\n        [not dark_sidebars] = bg.default,\n        [dark_sidebars and transparency == \"partial\"] = bg.panel,\n        [transparency == \"full\"] = no_color,\n    })\nend\n\nreturn M\n```\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.panel(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua\n---@doc https://github.com/mikavilpas/yazi.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.panel(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            YaziFloat = { bg = bg_dark },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua\n---@doc https://github.com/nvim-telescope/telescope.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.panel(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TelescopeNormal = { bg = bg_dark },\n            TelescopeBorder = { fg = bg_dark, bg = bg_dark },\n            TelescopeTitle = { fg = ui.fg.active },\n            TelescopePromptPrefix = { fg = ui.fg.active },\n            TelescopeMatching = { fg = ui.fg.active },\n            TelescopeSelection = { fg = ui.fg.active, bg = ui.bg.primary.main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua\n---@doc https://github.com/nvim-treesitter/nvim-treesitter-context\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_sidebar = require(\"black-atom.lib\").bg.panel(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TreesitterContext = { bg = bg_sidebar },\n            TreesitterContextLineNumber = { fg = ui.fg.neutral, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_tree.lua\n---@doc https://github.com/nvim-tree/nvim-tree.lua\n---Tip: Use `:NvimTreeHiTest`to debug highlight groups\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_panel = bg.panel(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NvimTreeNormal = { fg = ui.fg.primary.main, bg = bg_panel },\n            NvimTreeNormalNC = { fg = ui.fg.primary.main, bg = bg_panel },\n            NvimTreeEndOfBuffer = { fg = bg_panel },\n            NvimTreeCursorLine = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_panel = bg.panel(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.primary.main, bg = bg_panel },\n            NeoTreeNormalNC = { fg = ui.fg.neutral, bg = bg_panel },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.neutral },\n            NeoTreeEndOfBuffer = { fg = bg_panel },\n            NeoTreeFileName = { fg = ui.fg.primary.main },\n            NeoTreeFloatBorder = { fg = bg_panel, bg = bg_panel },\n            NeoTreeFloatNormal = { fg = ui.fg.primary.main, bg = bg_panel },\n            NeoTreeGitConflict = { fg = ui.fg.diff.change },\n            NeoTreeGitIgnored = { fg = ui.fg.neutral, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.diff.add },\n            NeoTreeTitleBar = { fg = ui.fg.neutral, bg = bg_panel },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg_main = require(\"black-atom.lib\").bg.main(config, colors)\n        local bg_panel = require(\"black-atom.lib\").bg.panel(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- mini.pick\n            MiniPickPrompt = { bg = bg_panel },\n            MiniPickMatchCurrent = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/fzflua.lua\n---@doc https://github.com/ibhagwan/fzf-lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg = colors.ui.bg\n        local bg_dark = lib.bg.panel(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            FzfLuaNormal = { fg = fg.primary.main, bg = bg_dark },\n            FzfLuaTitle = { fg = fg.active, bg = bg_dark },\n            FzfLuaBorder = { link = \"FloatBorder\" },\n            FzfLuaPreviewBorder = { link = \"FloatBorder\" },\n            FzfLuaCursorLine = { bg = bg.primary.main },\n            FzfLuaDirPart = { fg = fg.neutral },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua\n---@doc https://github.com/folke/edgy.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg_sidebar = lib.bg.panel(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            EdgyNormal = { fg = fg.primary.main, bg = bg_sidebar },\n            EdgyTitle = { link = \"EdgyNormal\" },\n            EdgyIcon = { link = \"EdgyNormal\" },\n            EdgyIconActive = { fg = fg.active, bg = bg_sidebar },\n            EdgyWinBar = { fg = fg.active, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/blink_nvim.lua\n---@doc https://github.com/saghen/blink.cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local fg = colors.ui.fg\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            BlinkCmpMenu = { bg = bg.panel(config, colors) },\n            BlinkCmpLabel = { fg = fg.primary.main, bg.main(config, colors) },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            highlights_map[\"BlinkCmpKind\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua\n--[[\n    Hello there!\n    Thank you for wanting to contribute to the black-atom.nvim plugin!\n\n    To create a new highlight map for your plugin, simply copy this template\n    and rename it to a suitable name, such as \"my_plugin.lua\".\n\n    You don't need to require this file anywhere manually, since every lua file\n    in the `lua/black-atom/highlights/plugins/` folder will be loaded automatically.\n    Note: Filenames ending with \"_template.lua\" will be disregarded!\n\n    Each highlight file must return a `BlackAtom.HighlightsSpec` table,\n    which at a minimum, should contain a field called `map`.\n    The `BlackAtom.HighlightsSpec` and `BlackAtom.Highlights` types\n    will assist with completion and type checking.\n    (Ensure the `lua-language-server` is installed for this to work.)\n\n    The `enabled` field is optional and defaults to true.\n    The `map` function needs to return a `BlackAtom.Highlights` table.\n    It receives the colors and config tables as parameters,\n    which gives you access to all the colors and config options.\n    -- `colors` is a table containing the color palette.\n    -- `config` is a table containing configuration options.\n\n    IMPORTANT: When you add a new plugin file, and run the `./update_supported_plugins.sh` script,\n    it will be automatically included in the Supported Plugins section of the README.md file.\n    This is a great way to showcase your contribution and help others discover new plugin support!\n\n    To ensure this automatic process works correctly, please follow these guidelines:\n\n    1. Add a @doc comment with the plugin's GitHub URL at the top of the file:\n       ---@doc https://github.com/username/plugin-name\n\n    2. Ensure that the highlight groups are returned in the specific structure:\n\n    ---@type BlackAtom.Highlights\n    return {\n        HighlightGroup1 = { ... }, -- Each line in this block after `---@type BlackAtom.Highlights` will be counted.\n        HighlightGroup2 = { ... },\n        ...\n    }\n\n    This structure allows our script to accurately count the number of highlight groups\n    for each plugin and update the README.md file accordingly.\n\n    NAMING CONVENTION: Please name your plugin highlight file name like your plugin name. Replace dots with underscores.\n    For example: `telescope.nvim` => `telescope_nvim.lua`\n\n    After you have finished your highlight map, you can test it by running Neovim in a separate window\n    and see if your highlights are applied correctly, or turn on `debug` mode\n    in the config file to see a generated file with all highlights.\n    This will be placed in the `debug` folder placed at the root of the plugin.\n\n    For further assistance or questions, consider reaching out through the project's GitHub repository.\n]]\n\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        -- There are also helper functions for common background colors, which are dependent on the config\n        local bg_dark = require(\"black-atom.lib\").bg.panel(config, colors)\n\n        local p = colors.palette -- These are semantic color tokens for the palette\n        local ui = colors.ui     -- These are semantic color tokens for the UI\n        local s = colors.syntax  -- These are semantic color tokens for the syntax\n\n        -- IMPORTANT: Ensure the highlight groups are returned in the correct structure so that the script to automatically generate the README.md file can work correctly\n        ---@type BlackAtom.Highlights\n        return {\n            MyHighlightGroup = { fg = ui.fg.primary.main },\n            MyFloatBorder = { fg = p.green, bg = bg_dark },\n            MyDimmedHighlightGroup = { fg = ui.fg.neutral },\n            MyHighlightGroupWithUnderline = { fg = ui.fg.primary.main, underline = true },\n            MyVariableKindSymbol = { fg = s.variable.default },\n        }\n    end,\n}\n```\n\n\nNow please migrate the main file:\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.panel(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n\nI'll help convert the main UI highlights file to use the new token system. The main changes will be updating references from the nested structure to the flat one.\n\n<patch>\n<title>Update main UI highlights to use new token system</title>\n<edit>\n<path>nvim/lua/black-atom/highlights/ui.lua</path>\n<description>Convert main UI highlight groups to use new flat token structure</description>\n<operation>update</operation>\n<old_text>---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.panel(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}</old_text>\n<new_text>---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.default, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.default, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.default }, { [config.styles.ending_tildes] = ui.fg.disabled }),\n            NonText = { fg = ui.fg.disabled },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.default, bg = ui.bg.float },\n            FloatBorder = { fg = ui.fg.accent, bg = ui.bg.float },\n            FloatTitle = { fg = ui.fg.accent, bg = ui.bg.float },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.contrast, bg = ui.fg.accent },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.selection },\n            IncSearch = { bg = ui.bg.selection },\n            CurSearch = { fg = ui.fg.contrast, bg = ui.fg.accent, bold = true },\n            Substitute = { fg = ui.fg.contrast, bg = ui.fg.accent, bold = true },\n            MatchParen = { bg = ui.bg.selection },\n\n            Visual = { bg = ui.bg.selection },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.disabled },\n            CursorLineNr = { fg = ui.fg.accent, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.contrast, bg = ui.bg.add },\n            DiffChange = { fg = ui.fg.modify },\n            DiffDelete = { fg = ui.fg.delete },\n            DiffText = { fg = ui.fg.info },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.fg.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.fg.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.fg.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.fg.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.default, bg = ui.bg.float },\n            PmenuSel = { bg = ui.bg.active },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.float },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.default }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.accent },\n            StatusLine = ext_hl(\n                { fg = ui.fg.default, bg = ui.bg.panel },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.disabled, bg = ui.bg.panel },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.disabled, bg = ui.bg.default },\n            TabLineFill = { bg = ui.bg.default },\n            TabLineSel = { fg = ui.fg.default, bg = ui.bg.active },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.panel(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.disabled, bg = ui.bg.panel },\n            FoldColumn = { fg = ui.fg.disabled },\n            SignColumn = { fg = ui.fg.disabled },\n            ColorColumn = { bg = ui.bg.panel },\n\n            -- Others\n            Directory = { fg = ui.fg.default, bold = true },\n            Conceal = { fg = ui.fg.disabled },\n            QuickFixLine = { fg = ui.fg.accent, bg = ui.bg.active },\n        }\n\n        return highlights_map\n    end,\n}</new_text>\n</edit>\n</patch>\n\nKey changes:\n1. Replaced all nested token references with flat ones\n2. Updated token names to match new schema:\n   - `primary.main` → `default`\n   - `neutral` → `disabled`\n   - `active` → `accent`\n   - `invert` → `contrast`\n   - `primary.dark` → `panel`/`float`\n   - `match.passive` → `selection`\n   - `diff.*` → `add`/`delete`/`modify`\n3. Consolidated feedback colors into main structure\n4. Standardized color usage across similar UI elements\n\nWould you like me to:\n1. Explain any specific color choices in more detail?\n2. Continue with converting other highlight files?\n3. Something else?\n\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.default, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.default, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.default }, { [config.styles.ending_tildes] = ui.fg.subtle }),\n            NonText = { fg = ui.fg.subtle },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n            Title = { fg = ui.fg.accent },\n            Directory = { fg = ui.fg.default, bold = true },\n            Conceal = { fg = ui.fg.subtle },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.default, bg = ui.bg.float },\n            FloatBorder = { fg = ui.fg.subtle, bg = ui.bg.float },\n            FloatTitle = { fg = ui.fg.accent, bg = ui.bg.float },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.contrast, bg = ui.fg.accent },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            -- CursorLine\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n            LineNr = { fg = ui.fg.subtle },\n            CursorLineNr = { fg = ui.fg.accent, bg = ui.bg.active },\n\n            -- Search & Visual\n            Search = { bg = ui.bg.selection },\n            IncSearch = { bg = ui.bg.selection },\n            CurSearch = { fg = ui.fg.contrast, bg = ui.fg.accent, bold = true },\n            Substitute = { fg = ui.fg.contrast, bg = ui.fg.accent, bold = true },\n            MatchParen = { bg = ui.bg.selection },\n            Visual = { bg = ui.bg.selection },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.add },\n            DiffChange = { fg = ui.fg.modify },\n            DiffDelete = { fg = ui.fg.delete },\n            DiffText = { fg = ui.fg.info },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.fg.error, undercurl = true },\n            SpellCap = { fg = ui.fg.warn, undercurl = true },\n            SpellLocal = { fg = ui.fg.info, undercurl = true },\n            SpellRare = { fg = ui.fg.error, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.default, bg = ui.bg.float },\n            PmenuSel = { bg = ui.bg.active },\n            PmenuSbar = { bg = ui.bg.float },\n            PmenuThumb = { bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = ext_hl({ fg = ui.fg.error }, config.styles.syntax.messages),\n            ErrorMsg = ext_hl({ fg = ui.fg.error }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = ui.fg.info }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.info }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = ui.fg.warn }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            TabLine = { fg = ui.fg.subtle, bg = bg.panel(config, colors) },\n            TabLineFill = { link = \"TabLine\" },\n            TabLineSel = { fg = ui.fg.contrast, bg = ui.bg.active },\n\n            StatusLine = ext_hl(\n                { fg = ui.fg.default, bg = bg.panel(config, colors) },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.disabled, bg = bg.panel(config, colors) },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.panel(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.subtle, bg = ui.bg.panel },\n            FoldColumn = { fg = ui.fg.subtle },\n            SignColumn = { fg = ui.fg.subtle },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Background\n---@field default                                               string  # Default background for UI elements\n---@field panel                                                 string  # Background for sidebars and statusline\n---@field float                                                 string  # Background for floating windows, popups\n---@field active                                                string  # Active elements like cursorline or active tab\n---@field disabled                                              string  # Disabled background state for interactive elements\n---@field hover                                                 string  # Hover state for interactive elements\n---@field selection                                             string  # Visual selection\n---@field search                                                string  # Search background\n---@field contrast                                              string  # Inverted background\n---@field error                                                 string  # Feedback - Errors\n---@field warn                                                  string  # Feedback - Warnings\n---@field info                                                  string  # Feedback - Information\n---@field hint                                                  string  # Feedback - Hints\n---@field success                                               string  # Feedback - Success\n---@field add                                                   string  # Git added\n---@field delete                                                string  # Git deleted\n---@field modify                                                string  # Git modified\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field default                                               string  # Default text\n---@field subtle                                                string  # Subtle text like comments and other secondary information\n---@field accent                                                string  # For links and other text that needs to stand out\n---@field disabled                                              string  # For disabled text\n---@field contrast                                              string  # Inverted which is also used on colored or inverted backgrounds like feedback\n---@field error                                                 string  # Feedback - Errors\n---@field warn                                                  string  # Feedback - Warnings\n---@field info                                                  string  # Feedback - Information\n---@field hint                                                  string  # Feedback - Hints\n---@field success                                               string  # Feedback - Success\n---@field add                                                   string  # Git added\n---@field delete                                                string  # Git deleted\n---@field modify                                                string  # Git modified\n\n---@class BlackAtom.Theme.UI\n---@field bg                                                    BlackAtom.Theme.UI.Background\n---@field fg                                                    BlackAtom.Theme.UI.Foreground\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n```\n\n\n\nNow please migrate:\n\n```lua nvim/lua/black-atom/highlights/lsp.lua\n---@type BlackAtom.HighlightsSpec\nlocal highlight_map_extension = {\n    map = function(colors, config)\n        local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n        local darken = require(\"black-atom.lib.color\").darken\n        local styles = config.styles or {}\n\n        local diagnostics_error_color = colors.palette.red\n        local diagnostics_warn_color = colors.palette.yellow\n        local diagnostics_hint_color = colors.palette.blue\n        local diagnostics_info_color = colors.palette.green\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            LspCxxHlGroupEnumConstant = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupMemberVariable = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupNamespace = { fg = colors.palette.blue },\n            LspCxxhighlightskippedRegion = { fg = colors.palette.gray },\n            LspCxxhighlightskippedRegionBeginEnd = { fg = colors.palette.red },\n\n            DiagnosticError = { fg = colors.palette.red },\n            DiagnosticHint = { fg = colors.palette.blue },\n            DiagnosticInfo = { fg = colors.palette.cyan },\n            DiagnosticWarn = { fg = colors.palette.yellow },\n\n            DiagnosticVirtualTextError = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_error_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_error_color,\n            },\n            DiagnosticVirtualTextWarn = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_warn_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_warn_color,\n            },\n            DiagnosticVirtualTextInfo = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_info_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_info_color,\n            },\n            DiagnosticVirtualTextHint = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_hint_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_hint_color,\n            },\n\n            DiagnosticUnderlineError = {\n                sp = colors.palette.red,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineHint = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineInfo = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineWarn = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.yellow,\n            },\n\n            LspReferenceText = { underline = true },\n            LspReferenceWrite = { underline = true },\n            LspReferenceRead = { underline = true },\n\n            LspCodeLens = { fg = colors.palette.gray },\n            LspCodeLensSeparator = { fg = colors.palette.gray },\n\n            LspDiagnosticsDefaultError = { link = \"DiagnosticError\" },\n            LspDiagnosticsDefaultHint = { link = \"DiagnosticHint\" },\n            LspDiagnosticsDefaultInformation = { link = \"DiagnosticInfo\" },\n            LspDiagnosticsDefaultWarning = { link = \"DiagnosticWarn\" },\n            LspDiagnosticsUnderlineError = { link = \"DiagnosticUnderlineError\" },\n            LspDiagnosticsUnderlineHint = { link = \"DiagnosticUnderlineHint\" },\n            LspDiagnosticsUnderlineInformation = {\n                link = \"DiagnosticUnderlineInfo\",\n            },\n            LspDiagnosticsUnderlineWarning = { link = \"DiagnosticUnderlineWarn\" },\n            LspDiagnosticsVirtualTextError = { link = \"DiagnosticVirtualTextError\" },\n            LspDiagnosticsVirtualTextWarning = {\n                link = \"DiagnosticVirtualTextWarn\",\n            },\n            LspDiagnosticsVirtualTextInformation = {\n                link = \"DiagnosticVirtualTextInfo\",\n            },\n            LspDiagnosticsVirtualTextHint = { link = \"DiagnosticVirtualTextHint\" },\n        }\n\n        return highlights_map\n    end,\n}\n\nreturn highlight_map_extension\n```\n\n\nPlease only use colors from `ui` not `palette`\n\nSo for example instead of `palette.red` use `ui.error` and so on\nI'll help convert the LSP highlights to use only UI tokens. Here's the updated version:\n\n```lua\n---@type BlackAtom.HighlightsSpec\nlocal highlight_map_extension = {\n    map = function(colors, config)\n        local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n        local darken = require(\"black-atom.lib.color\").darken\n        local styles = config.styles or {}\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- LSP C++ Highlights\n            LspCxxHlGroupEnumConstant = { fg = ui.fg.accent },\n            LspCxxHlGroupMemberVariable = { fg = ui.fg.accent },\n            LspCxxHlGroupNamespace = { fg = ui.fg.info },\n            LspCxxhighlightskippedRegion = { fg = ui.fg.subtle },\n            LspCxxhighlightskippedRegionBeginEnd = { fg = ui.fg.error },\n\n            -- Diagnostic Signs\n            DiagnosticError = { fg = ui.fg.error },\n            DiagnosticHint = { fg = ui.fg.hint },\n            DiagnosticInfo = { fg = ui.fg.info },\n            DiagnosticWarn = { fg = ui.fg.warn },\n\n            -- Diagnostic Virtual Text\n            DiagnosticVirtualTextError = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(ui.bg.error, 0.1, ui.bg.default),\n                }),\n                fg = ui.fg.error,\n            },\n            DiagnosticVirtualTextWarn = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(ui.bg.warn, 0.1, ui.bg.default),\n                }),\n                fg = ui.fg.warn,\n            },\n            DiagnosticVirtualTextInfo = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(ui.bg.info, 0.1, ui.bg.default),\n                }),\n                fg = ui.fg.info,\n            },\n            DiagnosticVirtualTextHint = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(ui.bg.hint, 0.1, ui.bg.default),\n                }),\n                fg = ui.fg.hint,\n            },\n\n            -- Diagnostic Underlines\n            DiagnosticUnderlineError = {\n                sp = ui.fg.error,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineHint = {\n                sp = ui.fg.hint,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineInfo = {\n                sp = ui.fg.info,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineWarn = {\n                sp = ui.fg.warn,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n\n            -- LSP References\n            LspReferenceText = { underline = true },\n            LspReferenceWrite = { underline = true },\n            LspReferenceRead = { underline = true },\n\n            -- LSP CodeLens\n            LspCodeLens = { fg = ui.fg.subtle },\n            LspCodeLensSeparator = { fg = ui.fg.subtle },\n\n            -- Legacy LSP Diagnostics (Links)\n            LspDiagnosticsDefaultError = { link = \"DiagnosticError\" },\n            LspDiagnosticsDefaultHint = { link = \"DiagnosticHint\" },\n            LspDiagnosticsDefaultInformation = { link = \"DiagnosticInfo\" },\n            LspDiagnosticsDefaultWarning = { link = \"DiagnosticWarn\" },\n            LspDiagnosticsUnderlineError = { link = \"DiagnosticUnderlineError\" },\n            LspDiagnosticsUnderlineHint = { link = \"DiagnosticUnderlineHint\" },\n            LspDiagnosticsUnderlineInformation = { link = \"DiagnosticUnderlineInfo\" },\n            LspDiagnosticsUnderlineWarning = { link = \"DiagnosticUnderlineWarn\" },\n            LspDiagnosticsVirtualTextError = { link = \"DiagnosticVirtualTextError\" },\n            LspDiagnosticsVirtualTextWarning = { link = \"DiagnosticVirtualTextWarn\" },\n            LspDiagnosticsVirtualTextInformation = { link = \"DiagnosticVirtualTextInfo\" },\n            LspDiagnosticsVirtualTextHint = { link = \"DiagnosticVirtualTextHint\" },\n        }\n\n        return highlights_map\n    end,\n}\n\nreturn highlight_map_extension\n```\n\nKey changes:\n1. Replaced all palette colors with UI semantic colors\n2. Used `ui.fg.subtle` for grayed-out elements\n3. Used `ui.fg.accent` for emphasized elements\n4. Used semantic feedback colors (error, warn, info, hint)\n5. Updated background colors in virtual text to use UI background colors\n\nWould you like me to:\n1. Explain any specific color choices?\n2. Convert more highlight files?\n3. Something else?\n\nOkay please now convert the diffview file\n\n```lua nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua\n---@doc https://github.com/sindrets/diffview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            DiffviewFilePanelTitle = { fg = p.blue, bold = true },\n            DiffviewFilePanelCounter = { fg = p.magenta, bold = true },\n            DiffviewFilePanelFileName = { fg = ui.fg.default },\n            DiffviewNormal = { link = \"Normal\" },\n            DiffviewCursorLine = { link = \"CursorLine\" },\n            DiffviewVertSplit = { link = \"VertSplit\" },\n            DiffviewSignColumn = { link = \"SignColumn\" },\n            DiffviewStatusLine = { link = \"StatusLine\" },\n            DiffviewStatusLineNC = { link = \"StatusLineNC\" },\n            DiffviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            DiffviewFilePanelRootPath = { fg = p.gray },\n            DiffviewFilePanelPath = { fg = p.gray },\n            DiffviewFilePanelInsertions = { fg = p.green },\n            DiffviewFilePanelDeletions = { fg = p.red },\n            DiffviewStatusAdded = { fg = p.green },\n            DiffviewStatusUntracked = { fg = p.blue },\n            DiffviewStatusModified = { fg = p.blue },\n            DiffviewStatusRenamed = { fg = p.blue },\n            DiffviewStatusCopied = { fg = p.blue },\n            DiffviewStatusTypeChange = { fg = p.blue },\n            DiffviewStatusUnmerged = { fg = p.blue },\n            DiffviewStatusUnknown = { fg = p.red },\n            DiffviewStatusDeleted = { fg = p.red },\n            DiffviewStatusBroken = { fg = p.red },\n        }\n    end,\n}\n```\n\n\nI'll convert the diffview highlights to use only UI tokens. Here's the updated version:\n\n```lua\n---@doc https://github.com/sindrets/diffview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            DiffviewFilePanelTitle = { fg = ui.fg.info, bold = true },\n            DiffviewFilePanelCounter = { fg = ui.fg.accent, bold = true },\n            DiffviewFilePanelFileName = { fg = ui.fg.default },\n            DiffviewNormal = { link = \"Normal\" },\n            DiffviewCursorLine = { link = \"CursorLine\" },\n            DiffviewVertSplit = { link = \"VertSplit\" },\n            DiffviewSignColumn = { link = \"SignColumn\" },\n            DiffviewStatusLine = { link = \"StatusLine\" },\n            DiffviewStatusLineNC = { link = \"StatusLineNC\" },\n            DiffviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            DiffviewFilePanelRootPath = { fg = ui.fg.subtle },\n            DiffviewFilePanelPath = { fg = ui.fg.subtle },\n            DiffviewFilePanelInsertions = { fg = ui.fg.add },\n            DiffviewFilePanelDeletions = { fg = ui.fg.delete },\n            DiffviewStatusAdded = { fg = ui.fg.add },\n            DiffviewStatusUntracked = { fg = ui.fg.info },\n            DiffviewStatusModified = { fg = ui.fg.modify },\n            DiffviewStatusRenamed = { fg = ui.fg.modify },\n            DiffviewStatusCopied = { fg = ui.fg.modify },\n            DiffviewStatusTypeChange = { fg = ui.fg.modify },\n            DiffviewStatusUnmerged = { fg = ui.fg.modify },\n            DiffviewStatusUnknown = { fg = ui.fg.error },\n            DiffviewStatusDeleted = { fg = ui.fg.delete },\n            DiffviewStatusBroken = { fg = ui.fg.error },\n        }\n    end,\n}\n```\n\nKey changes:\n1. Replaced all palette colors with UI semantic colors:\n   - `p.blue` → `ui.fg.info` for title and status indicators\n   - `p.magenta` → `ui.fg.accent` for counter\n   - `p.gray` → `ui.fg.subtle` for paths\n   - `p.green` → `ui.fg.add` for additions\n   - `p.red` → `ui.fg.delete`/`ui.fg.error` for deletions and errors\n   - Various status indicators now use appropriate semantic colors (add/modify/delete/error)\n2. Maintained all the links to standard highlight groups\n3. Used consistent semantic meaning across similar status types\n\nWould you like me to:\n1. Convert more highlight files?\n2. Explain any specific color choices?\n3. Something else?\nOkay now this:\n\n```lua nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua\n---@doc https://github.com/lewis6991/gitsigns.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitSignsAdd = { fg = p.green },\n            GitSignsAddLn = { fg = p.green },\n            GitSignsAddNr = { fg = p.green },\n            GitSignsChange = { fg = p.blue },\n            GitSignsChangeLn = { fg = p.blue },\n            GitSignsChangeNr = { fg = p.blue },\n            GitSignsDelete = { fg = p.red },\n            GitSignsDeleteLn = { fg = p.red },\n            GitSignsDeleteNr = { fg = p.red },\n        }\n    end,\n}\n```\n\n\nI'll convert the gitsigns highlights to use UI tokens. Since this is all about git changes, we'll use the git-specific UI tokens:\n\n```lua\n---@doc https://github.com/lewis6991/gitsigns.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitSignsAdd = { fg = ui.fg.add },\n            GitSignsAddLn = { fg = ui.fg.add },\n            GitSignsAddNr = { fg = ui.fg.add },\n            GitSignsChange = { fg = ui.fg.modify },\n            GitSignsChangeLn = { fg = ui.fg.modify },\n            GitSignsChangeNr = { fg = ui.fg.modify },\n            GitSignsDelete = { fg = ui.fg.delete },\n            GitSignsDeleteLn = { fg = ui.fg.delete },\n            GitSignsDeleteNr = { fg = ui.fg.delete },\n        }\n    end,\n}\n```\n\nChanges:\n1. `p.green` → `ui.fg.add` for additions\n2. `p.blue` → `ui.fg.modify` for modifications\n3. `p.red` → `ui.fg.delete` for deletions\n\nThis now uses the semantic git-specific tokens which makes the intent clearer and maintains consistency with other git-related highlights across the theme.\n\nWould you like me to convert more files?\nOkay now this\n\n```lua nvim/lua/black-atom/highlights/plugins/glance_nvim.lua\n---@doc https://github.com/DNLHC/glance.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local bg = colors.ui.bg\n        local bg_main = bg.primary.main\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_main = fg.primary.main\n        local fg_neutral = fg.neutral\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        local border_style = { fg = fg.active, bg = bg_dark }\n\n        local neutral_element_style = { fg = fg_neutral, bg = bg.primary.dark }\n        local file_name_style = { fg = fg_active, bg = bg.primary.dark }\n        local file_path_style = neutral_element_style\n        local match_style = { bg = bg.match.active }\n\n        local preview_bg = bg_main\n        local preview_normal_style = { fg = fg_main, bg = preview_bg }\n        local list_bg = bg_dark\n        local list_normal_style = { fg = fg_active, bg = list_bg }\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- Preview (The preview of the file)\n            GlancePreviewNormal = preview_normal_style,\n            GlancePreviewMatch = match_style,\n            GlancePreviewCursorLine = { link = \"CursorLine\" },\n            GlancePreviewSignColumn = { link = \"SignColumn\" },\n            GlancePreviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            GlancePreviewLineNr = { link = \"LineNr\" },\n            GlancePreviewBorderBottom = border_style,\n\n            -- WindowBar\n            GlanceWinBarFilename = file_name_style,\n            GlanceWinBarFilepath = file_path_style,\n            GlanceWinBarTitle = { fg = fg_active, bg = bg_dark },\n\n            -- List (The list of affected files and references)\n            GlanceListNormal = list_normal_style,\n            GlanceListFilename = file_name_style,\n            GlanceListFilepath = file_path_style,\n            GlanceListCount = { fg = fg_active },\n            GlanceListMatch = match_style,\n            GlanceListCursorLine = { link = \"CursorLine\" },\n            GlanceListEndOfBuffer = { bg = list_bg },\n            GlanceListBorderBottom = border_style,\n\n            -- Other\n            GlanceFoldIcon = { fg = palette.blue },\n            GlanceIndent = { fg = fg.neutral, bg = list_bg },\n            GlanceBorderTop = border_style,\n        }\n    end,\n}\n```\n\n\nI'll convert the glance highlights to use the new UI token system:\n\n```lua\n---@doc https://github.com/DNLHC/glance.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        local border_style = { fg = ui.fg.accent, bg = ui.bg.float }\n        local neutral_element_style = { fg = ui.fg.subtle, bg = ui.bg.float }\n        local file_name_style = { fg = ui.fg.accent, bg = ui.bg.float }\n        local match_style = { bg = ui.bg.selection }\n\n        local preview_normal_style = { fg = ui.fg.default, bg = ui.bg.default }\n        local list_normal_style = { fg = ui.fg.accent, bg = ui.bg.float }\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- Preview (The preview of the file)\n            GlancePreviewNormal = preview_normal_style,\n            GlancePreviewMatch = match_style,\n            GlancePreviewCursorLine = { link = \"CursorLine\" },\n            GlancePreviewSignColumn = { link = \"SignColumn\" },\n            GlancePreviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            GlancePreviewLineNr = { link = \"LineNr\" },\n            GlancePreviewBorderBottom = border_style,\n\n            -- WindowBar\n            GlanceWinBarFilename = file_name_style,\n            GlanceWinBarFilepath = neutral_element_style,\n            GlanceWinBarTitle = { fg = ui.fg.accent, bg = ui.bg.float },\n\n            -- List (The list of affected files and references)\n            GlanceListNormal = list_normal_style,\n            GlanceListFilename = file_name_style,\n            GlanceListFilepath = neutral_element_style,\n            GlanceListCount = { fg = ui.fg.accent },\n            GlanceListMatch = match_style,\n            GlanceListCursorLine = { link = \"CursorLine\" },\n            GlanceListEndOfBuffer = { bg = ui.bg.float },\n            GlanceListBorderBottom = border_style,\n\n            -- Other\n            GlanceFoldIcon = { fg = ui.fg.info },\n            GlanceIndent = { fg = ui.fg.subtle, bg = ui.bg.float },\n            GlanceBorderTop = border_style,\n        }\n    end,\n}\n```\n\nKey changes:\n1. Removed local variables for bg/fg and use ui directly\n2. Updated token references:\n   - `bg.primary.main` → `bg.default`\n   - `bg.primary.dark` → `bg.float`\n   - `fg.primary.main` → `fg.default`\n   - `fg.neutral` → `fg.subtle`\n   - `fg.active` → `fg.accent`\n   - `bg.match.active` → `bg.selection`\n   - `palette.blue` → `ui.fg.info`\n3. Simplified style definitions by using semantic tokens directly\n4. Maintained all link references to standard highlight groups\n\nWould you like me to:\n1. Convert more highlight files?\n2. Explain any specific color choices?\n3. Something else?\n```lua nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_panel = bg.panel(config, colors)\n        local bg_main = bg.default(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.primary.main, bg = bg_panel },\n            NeoTreeNormalNC = { fg = ui.fg.neutral, bg = bg_panel },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.neutral },\n            NeoTreeEndOfBuffer = { fg = bg_panel },\n            NeoTreeFileName = { fg = ui.fg.primary.main },\n            NeoTreeFloatBorder = { fg = bg_panel, bg = bg_panel },\n            NeoTreeFloatNormal = { fg = ui.fg.primary.main, bg = bg_panel },\n            NeoTreeGitConflict = { fg = ui.fg.diff.change },\n            NeoTreeGitIgnored = { fg = ui.fg.neutral, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.diff.add },\n            NeoTreeTitleBar = { fg = ui.fg.neutral, bg = bg_panel },\n        }\n    end,\n}\n```\n\n\nNow this please\nI'll update the neo-tree highlights to use the new UI token system:\n\n```lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_panel = bg.panel(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.default, bg = bg_panel },\n            NeoTreeNormalNC = { fg = ui.fg.subtle, bg = bg_panel },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.subtle },\n            NeoTreeEndOfBuffer = { fg = bg_panel },\n            NeoTreeFileName = { fg = ui.fg.default },\n            NeoTreeFloatBorder = { fg = bg_panel, bg = bg_panel },\n            NeoTreeFloatNormal = { fg = ui.fg.default, bg = bg_panel },\n            NeoTreeGitConflict = { fg = ui.fg.modify },\n            NeoTreeGitIgnored = { fg = ui.fg.subtle, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.add },\n            NeoTreeTitleBar = { fg = ui.fg.subtle, bg = bg_panel },\n        }\n    end,\n}\n```\n\nChanges:\n1. Updated token references:\n   - `fg.primary.main` → `fg.default`\n   - `fg.neutral` → `fg.subtle`\n   - `fg.diff.change` → `fg.modify`\n   - `fg.diff.add` → `fg.add`\n2. Kept the bg helper functions as they're already using the new system\n3. Maintained consistent use of semantic colors for git status indicators\n\nWould you like me to convert more files?\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local pal = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = colors.ui.fg.primary.main },\n            CmpItemAbbrDeprecated = { fg = pal.light_gray, strikethrough = true },\n            CmpItemAbbrMatch = { fg = pal.cyan },\n            CmpItemAbbrMatchFuzzy = { fg = pal.cyan, underline = true },\n            CmpItemMenu = { fg = colors.ui.fg.primary.main },\n            CmpItemKind = { fg = pal.magenta },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = pal.yellow,\n            Color = pal.green,\n            Constant = pal.dark_yellow,\n            Constructor = pal.blue,\n            Default = pal.magenta,\n            Enum = pal.magenta,\n            EnumMember = pal.yellow,\n            Event = pal.yellow,\n            Field = pal.magenta,\n            File = pal.blue,\n            Folder = pal.dark_yellow,\n            Function = pal.blue,\n            Interface = pal.cyan,\n            Keyword = pal.magenta,\n            Method = pal.yellow,\n            Module = pal.dark_yellow,\n            Operator = pal.magenta,\n            Property = pal.cyan,\n            Reference = pal.dark_yellow,\n            Snippet = pal.red,\n            Struct = pal.magenta,\n            Text = pal.light_gray,\n            TypeParameter = pal.red,\n            Unit = pal.green,\n            Value = pal.dark_yellow,\n            Variable = pal.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = colors.ui.fg.invert, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n\nI'll convert the nvim-cmp highlights to use UI tokens. For the LSP kind icons, I'll map them to semantic UI colors that best match their meaning:\n\n```lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = ui.fg.default },\n            CmpItemAbbrDeprecated = { fg = ui.fg.disabled, strikethrough = true },\n            CmpItemAbbrMatch = { fg = ui.fg.accent },\n            CmpItemAbbrMatchFuzzy = { fg = ui.fg.accent, underline = true },\n            CmpItemMenu = { fg = ui.fg.default },\n            CmpItemKind = { fg = ui.fg.accent },\n        }\n\n        -- Map LSP kinds to semantic UI colors\n        local lsp_kind_icons_color = {\n            -- Types\n            Class = ui.fg.info,\n            Interface = ui.fg.info,\n            Struct = ui.fg.info,\n            TypeParameter = ui.fg.info,\n            Enum = ui.fg.info,\n            \n            -- Values\n            Constant = ui.fg.accent,\n            EnumMember = ui.fg.accent,\n            Field = ui.fg.accent,\n            Property = ui.fg.accent,\n            Variable = ui.fg.accent,\n            Value = ui.fg.accent,\n            \n            -- Functions\n            Constructor = ui.fg.success,\n            Function = ui.fg.success,\n            Method = ui.fg.success,\n            \n            -- Keywords & Operators\n            Keyword = ui.fg.accent,\n            Operator = ui.fg.accent,\n            \n            -- Modules\n            Module = ui.fg.info,\n            \n            -- UI Elements\n            Color = ui.fg.success,\n            File = ui.fg.info,\n            Folder = ui.fg.info,\n            Reference = ui.fg.accent,\n            \n            -- Special\n            Event = ui.fg.warn,\n            Snippet = ui.fg.error,\n            Text = ui.fg.subtle,\n            Default = ui.fg.accent,\n            Unit = ui.fg.success,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = ui.fg.contrast, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\nKey changes:\n1. Updated basic highlight tokens:\n   - `fg.primary.main` → `fg.default`\n   - `pal.light_gray` → `fg.disabled`\n   - `pal.cyan` → `fg.accent`\n   - `pal.magenta` → `fg.accent`\n\n2. Reorganized LSP kind colors using semantic UI tokens:\n   - Types (Class, Interface, etc.) → `fg.info`\n   - Values (Constants, Fields, etc.) → `fg.accent`\n   - Functions → `fg.success`\n   - Keywords & Operators → `fg.accent`\n   - Modules → `fg.info`\n   - UI Elements → mix of `fg.info` and `fg.success`\n   - Special items → appropriate semantic colors\n\n3. Used `fg.contrast` instead of `fg.invert` for the background mode\n\nThe grouping of kinds is now more semantic and consistent with the UI token system. Would you like me to:\n1. Explain any specific color choices?\n2. Adjust any of the LSP kind mappings?\n3. Convert more files?\nIts okay to use colors from the palette here\nAh, I understand! Since LSP kinds often benefit from distinct colors for better visual differentiation, we can keep using the palette colors. Here's the revised version:\n\n```lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local ui = colors.ui\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = ui.fg.default },\n            CmpItemAbbrDeprecated = { fg = ui.fg.disabled, strikethrough = true },\n            CmpItemAbbrMatch = { fg = ui.fg.accent },\n            CmpItemAbbrMatchFuzzy = { fg = ui.fg.accent, underline = true },\n            CmpItemMenu = { fg = ui.fg.default },\n            CmpItemKind = { fg = p.magenta },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = ui.fg.contrast, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\nChanges:\n1. Updated basic UI elements to use UI tokens:\n   - `fg.primary.main` → `fg.default`\n   - Added `fg.accent` for matches\n   - `fg.disabled` for deprecated items\n2. Kept the palette colors for LSP kinds to maintain visual distinctiveness\n3. Used `ui.fg.contrast` for background mode text color\n\nWould you like me to convert more files?\n\nHmm ",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11738 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 196 },
      "start": 64274,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11735 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 197 },
      "start": 65919,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11729 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 635 },
      "start": 66455,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11740 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 636 },
      "start": 68838,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11732 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 903 },
      "start": 71659,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11739 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 904 },
      "start": 75504,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11736 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 971 },
      "start": 78187,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11742 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 972 },
      "start": 79104,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11749 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1282 },
      "start": 79228,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11733 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1283 },
      "start": 80413,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11727 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1373 },
      "start": 80454,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11746 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1374 },
      "start": 83252,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11745 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1965 },
      "start": 86342,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11741 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 1966 },
      "start": 88689,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11748 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 2902 },
      "start": 101063,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11730 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 2903 },
      "start": 103529,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11728 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 3493 },
      "start": 107359,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11744 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 3494 },
      "start": 115636,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11734 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 4094 },
      "start": 131923,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11737 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 4095 },
      "start": 134293,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11750 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 5308 },
      "start": 136760,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11726 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 5309 },
      "start": 139512,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11743 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 5956 },
      "start": 161533,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11731 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 5957 },
      "start": 171902,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11747 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 8022 },
      "start": 193844,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11712 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 8023 },
      "start": 198490,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11713 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 8733 },
      "start": 200246,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11714 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 8734 },
      "start": 202706,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11715 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 9320 },
      "start": 203460,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11716 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 9321 },
      "start": 204656,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11717 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 9730 },
      "start": 207080,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11718 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 9731 },
      "start": 209765,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11719 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 10232 },
      "start": 211070,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11720 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 10233 },
      "start": 212709,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11721 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 10764 },
      "start": 214736,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11722 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 10765 },
      "start": 217995,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11723 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 11618 },
      "start": 218040,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11724 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 11619 },
      "start": 220481,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 11725 }
      }
    }
  ],
  "summary": "UI Color Token System Simplification",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 5367, "end": 7160 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 7161, "end": 9063 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 9064, "end": 21384 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 21451, "end": 63928 },
      "icon": "Folder",
      "label": "nvim/lua/black-atom/highlights",
      "metadata": null
    },
    {
      "range": { "start": 21482, "end": 26002 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/lsp.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/lsp.lua" }
    },
    {
      "range": { "start": 26003, "end": 51609 },
      "icon": "Folder",
      "label": "plugins",
      "metadata": null
    },
    {
      "range": { "start": 26011, "end": 29996 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua"
      }
    },
    {
      "range": { "start": 29997, "end": 30533 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua"
      }
    },
    {
      "range": { "start": 30534, "end": 32153 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua"
      }
    },
    {
      "range": { "start": 32154, "end": 32702 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua"
      }
    },
    {
      "range": { "start": 32703, "end": 34418 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua"
      }
    },
    {
      "range": { "start": 34419, "end": 35127 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua"
      }
    },
    {
      "range": { "start": 35128, "end": 35968 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/flash.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/flash.lua" }
    },
    {
      "range": { "start": 35969, "end": 36757 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/fzflua.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/fzflua.lua"
      }
    },
    {
      "range": { "start": 36758, "end": 37494 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua"
      }
    },
    {
      "range": { "start": 37495, "end": 39902 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua"
      }
    },
    {
      "range": { "start": 39903, "end": 40482 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua"
      }
    },
    {
      "range": { "start": 40483, "end": 40924 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua"
      }
    },
    {
      "range": { "start": 40925, "end": 41355 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua"
      }
    },
    {
      "range": { "start": 41356, "end": 41892 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/mini.lua" }
    },
    {
      "range": { "start": 41893, "end": 42329 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua"
      }
    },
    {
      "range": { "start": 42330, "end": 43605 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua"
      }
    },
    {
      "range": { "start": 43606, "end": 45568 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua"
      }
    },
    {
      "range": { "start": 45569, "end": 47578 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua"
      }
    },
    {
      "range": { "start": 47579, "end": 48359 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua"
      }
    },
    {
      "range": { "start": 48360, "end": 48923 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua"
      }
    },
    {
      "range": { "start": 48924, "end": 49380 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua"
      }
    },
    {
      "range": { "start": 49381, "end": 50143 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua"
      }
    },
    {
      "range": { "start": 50144, "end": 50618 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua"
      }
    },
    {
      "range": { "start": 50619, "end": 51204 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua"
      }
    },
    {
      "range": { "start": 51205, "end": 51608 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua"
      }
    },
    {
      "range": { "start": 51610, "end": 59144 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/syntax.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/syntax.lua" }
    },
    {
      "range": { "start": 59145, "end": 63927 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    },
    {
      "range": { "start": 83253, "end": 86123 },
      "icon": "File",
      "label": "nvim/UI_COLOR_TOKENS.md",
      "metadata": { "path": "nvim/UI_COLOR_TOKENS.md" }
    },
    {
      "range": { "start": 88741, "end": 101061 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 103597, "end": 105422 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 105423, "end": 107357 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 115636, "end": 117021 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 117022, "end": 129884 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 129987, "end": 131921 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 134293, "end": 135680 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 135765, "end": 136756 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/bg.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/bg.lua" }
    },
    {
      "range": { "start": 139513, "end": 140481 },
      "icon": "File",
      "label": "nvim/lua/black-atom/lib/bg.lua",
      "metadata": { "path": "nvim/lua/black-atom/lib/bg.lua" }
    },
    {
      "range": { "start": 140482, "end": 145265 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    },
    {
      "range": { "start": 145266, "end": 145670 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua"
      }
    },
    {
      "range": { "start": 145671, "end": 146434 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua"
      }
    },
    {
      "range": { "start": 146435, "end": 146999 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua"
      }
    },
    {
      "range": { "start": 147000, "end": 147773 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua"
      }
    },
    {
      "range": { "start": 147774, "end": 149058 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua"
      }
    },
    {
      "range": { "start": 149059, "end": 149598 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/mini.lua" }
    },
    {
      "range": { "start": 149599, "end": 150388 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/fzflua.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/fzflua.lua"
      }
    },
    {
      "range": { "start": 150389, "end": 151098 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua"
      }
    },
    {
      "range": { "start": 151099, "end": 152719 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua"
      }
    },
    {
      "range": { "start": 152720, "end": 156711 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua"
      }
    },
    {
      "range": { "start": 156748, "end": 161531 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    },
    {
      "range": { "start": 171903, "end": 176240 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    },
    {
      "range": { "start": 176241, "end": 189185 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 189209, "end": 193729 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/lsp.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/lsp.lua" }
    },
    {
      "range": { "start": 198534, "end": 200244 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua"
      }
    },
    {
      "range": { "start": 202722, "end": 203458 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua"
      }
    },
    {
      "range": { "start": 204671, "end": 207078 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua"
      }
    },
    {
      "range": { "start": 209765, "end": 211052 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua"
      }
    },
    {
      "range": { "start": 212710, "end": 214734 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua"
      }
    }
  ]
}
