{
  "id": "6bf79957-14a7-4970-966a-020fa27d542d",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\n```json core/deno.json\n{\n  \"$schema\": \"https://deno.land/x/deno/cli/schemas/config-file.v1.json\",\n  \"version\": \"1.0.0\",\n  \"tasks\": {\n    \"install\": \"deno install --global --allow-read -f -n black-atom-core src/cli.ts\"\n  },\n  \"fmt\": {\n    \"useTabs\": false,\n    \"lineWidth\": 100,\n    \"indentWidth\": 4,\n    \"semiColons\": true,\n    \"singleQuote\": false,\n    \"proseWrap\": \"preserve\"\n  },\n  \"imports\": {\n    \"@std/path\": \"jsr:@std/path@^1.0.8\",\n    \"@std/yaml\": \"jsr:@std/yaml@1.0.5\",\n    \"@zod\": \"https://deno.land/x/zod@v3.24.2/mod.ts\"\n  }\n}\n```\n\n```lock core/deno.lock\n{\n  \"version\": \"4\",\n  \"specifiers\": {\n    \"jsr:@std/path@^1.0.8\": \"1.0.8\",\n    \"jsr:@std/yaml@1.0.5\": \"1.0.5\"\n  },\n  \"jsr\": {\n    \"@std/path@1.0.8\": {\n      \"integrity\": \"548fa456bb6a04d3c1a1e7477986b6cffbce95102d0bb447c67c4ee70e0364be\"\n    },\n    \"@std/yaml@1.0.5\": {\n      \"integrity\": \"71ba3d334305ee2149391931508b2c293a8490f94a337eef3a09cade1a2a2742\"\n    }\n  },\n  \"remote\": {\n    \"https://deno.land/x/zod@v3.24.2/ZodError.ts\": \"27b41119736fcdc69cc72e63838bed1e9e1210c7ce721211f02256e06b443b55\",\n    \"https://deno.land/x/zod@v3.24.2/errors.ts\": \"5285922d2be9700cc0c70c95e4858952b07ae193aa0224be3cbd5cd5567eabef\",\n    \"https://deno.land/x/zod@v3.24.2/external.ts\": \"a6cfbd61e9e097d5f42f8a7ed6f92f93f51ff927d29c9fbaec04f03cbce130fe\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/enumUtil.ts\": \"54efc393cc9860e687d8b81ff52e980def00fa67377ad0bf8b3104f8a5bf698c\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/errorUtil.ts\": \"7a77328240be7b847af6de9189963bd9f79cab32bbc61502a9db4fe6683e2ea7\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/parseUtil.ts\": \"c14814d167cc286972b6e094df88d7d982572a08424b7cd50f862036b6fcaa77\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/partialUtil.ts\": \"998c2fe79795257d4d1cf10361e74492f3b7d852f61057c7c08ac0a46488b7e7\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/typeAliases.ts\": \"0fda31a063c6736fc3cf9090dd94865c811dfff4f3cb8707b932bf937c6f2c3e\",\n    \"https://deno.land/x/zod@v3.24.2/helpers/util.ts\": \"30c273131661ca5dc973f2cfb196fa23caf3a43e224cdde7a683b72e101a31fc\",\n    \"https://deno.land/x/zod@v3.24.2/index.ts\": \"d27aabd973613985574bc31f39e45cb5d856aa122ef094a9f38a463b8ef1a268\",\n    \"https://deno.land/x/zod@v3.24.2/locales/en.ts\": \"a7a25cd23563ccb5e0eed214d9b31846305ddbcdb9c5c8f508b108943366ab4c\",\n    \"https://deno.land/x/zod@v3.24.2/mod.ts\": \"ec6e2b1255c1a350b80188f97bd0a6bac45801bb46fc48f50b9763aa66046039\",\n    \"https://deno.land/x/zod@v3.24.2/standard-schema.ts\": \"4abb2e7bd784fb95d219584673971bb317e74fb4fd0c74c196b558ba46df4456\",\n    \"https://deno.land/x/zod@v3.24.2/types.ts\": \"91f825106bcf5b2ba08daa108283aadc32c0ac332f09c9a90db3d88b142476a3\"\n  },\n  \"workspace\": {\n    \"dependencies\": [\n      \"jsr:@std/path@^1.0.8\",\n      \"jsr:@std/yaml@1.0.5\"\n    ]\n  }\n}\n```\n\ncore/src\n```ts core/src/cli.ts\nimport * as z from \"@zod\";\nimport { parse as parseYml } from \"@std/yaml\";\nimport { AdapterConfig, adapterConfigSchema } from \"./schemas/adapter.ts\";\nimport { config } from \"./config.ts\";\n\nasync function getAdapterConfig(): Promise<AdapterConfig> {\n    try {\n        const adapterConfig = await Deno.readTextFile(config.adapterFileName);\n        const parsedConfig = parseYml(adapterConfig);\n        const validatedConfig = adapterConfigSchema.parse(parsedConfig);\n\n        return validatedConfig;\n    } catch (error) {\n        if (error instanceof Deno.errors.NotFound) {\n            console.error(\"Error: `adapter.yml` not found in current directory\");\n            Deno.exit(1);\n        }\n\n        if (error instanceof z.ZodError) {\n            console.error(\n                \"Invalid adapter configuration!\",\n                error.issues,\n            );\n            Deno.exit(1);\n        }\n\n        throw error;\n    }\n}\n\nif (import.meta.main) {\n    const command = Deno.args[0];\n\n    switch (command) {\n        case \"generate\": {\n            const adapterConfig = await getAdapterConfig();\n            console.info(adapterConfig);\n            break;\n        }\n\n        default:\n            console.log(`\nUsage: black-atom-core <command>\n\nCommands:\n  generate    Generate theme files from templates\n`);\n            Deno.exit(1);\n    }\n}\n```\n\n```ts core/src/config.ts\nimport { join } from \"@std/path\";\n\nconst cwd = Deno.cwd();\n\nexport const config = {\n    adapterFileName: \"adapter.json\",\n    dir: {\n        themes: join(cwd, \"src\", \"themes\"),\n    },\n};\n\nexport type Config = typeof config;\n```\n\nschemas\n```ts core/src/schemas/adapter.ts\nimport * as z from \"@zod\";\nimport { themeKeys } from \"../types/theme.ts\";\n\nconst themeKeySchema = z.enum(themeKeys);\n\n// First check the structure without validating the types\nconst baseTemplateConfig = z.object({\n    template: z.any().optional(),\n    templates: z.any().optional(),\n}).superRefine((data, ctx) => {\n    if (data.template && data.templates) {\n        ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: \"Cannot specify both `template` and `templates`\",\n            path: [],\n        });\n        return;\n    }\n    if (!data.template && !data.templates) {\n        ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: \"Must specify either `template` or `templates`\",\n            path: [],\n        });\n        return;\n    }\n});\n\n// Then refine it to match our exact types\nconst templateConfigSchema = baseTemplateConfig.pipe(\n    z.union([\n        z.object({\n            template: z.string(),\n            templates: z.never().optional(),\n        }),\n        z.object({\n            template: z.never().optional(),\n            templates: z.array(z.string()),\n        }),\n    ]),\n);\n\n// Create a discriminated union for the record keys\nconst recordKeySchema = z.union([\n    z.literal(\"$schema\"),\n    themeKeySchema,\n]);\n\n// Create the record with the union of possible values\nexport const adapterConfigSchema = z.record(\n    recordKeySchema,\n    z.union([\n        z.string(), // for $schema\n        templateConfigSchema, // for theme configurations\n    ]),\n);\n\nexport type AdapterConfig = z.infer<typeof adapterConfigSchema>;\n```\n\n\nthemes/corp\n```ts core/src/themes/corp/black-atom-corp-eng.ts\nimport * as Theme from \"../../types/theme.ts\";\n\nimport syntax_dark from \"./syntax_dark.ts\";\nimport ui_dark from \"./ui_dark.ts\";\n\nconst meta: Theme.Meta = {\n    key: \"black-atom-corp-eng\",\n    label: \"Black Atom - Corp [ENG]\",\n    appearance: \"dark\",\n    status: \"release\",\n    collection: {\n        key: \"corp\",\n        label: \"Corporate\",\n    },\n};\n\nconst primaries: Theme.Primaries = [\n    \"#040505\",\n    \"#0e1110\",\n    \"#181b19\",\n    \"#1d201e\",\n    \"#3e4441\",\n    \"#565f59\",\n    \"#606a65\",\n    \"#79857f\",\n    \"#9fafa7\",\n    \"#abbbb3\",\n    \"#c4d4cc\",\n    \"#d0e0d8\",\n];\n\nconst palette: Theme.Palette = {\n    black: primaries[2],\n    gray: primaries[5],\n\n    darkRed: \"#9891d6\",\n    red: \"#a6a1df\",\n\n    darkGreen: \"#93c270\",\n    green: \"#a0ce7d\",\n\n    darkYellow: primaries[9],\n    yellow: \"#9BE197\",\n\n    darkBlue: primaries[8],\n    blue: primaries[10],\n\n    darkMagenta: \"#a498e9\",\n    magenta: \"#b7aded\",\n\n    darkCyan: \"#6ac779\",\n    cyan: \"#88dc96\",\n\n    lightGray: primaries[8],\n    white: primaries[11],\n};\n\nconst theme: Theme.Definition = {\n    meta,\n    primaries,\n    palette,\n    ui: ui_dark(primaries, palette),\n    syntax: syntax_dark(primaries, palette),\n};\n\nexport default theme;\n```\n\n```ts core/src/themes/corp/syntax_dark.ts\nimport { Palette, Primaries, Syntax } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): Syntax {\n    return {\n        variable: {\n            default: palette.blue,\n            builtin: palette.blue,\n            member: palette.darkBlue,\n            parameter: palette.darkYellow,\n        },\n        property: {\n            default: palette.darkBlue,\n        },\n        string: {\n            default: palette.green,\n            doc: palette.green,\n            regexp: palette.red,\n            escape: palette.red,\n        },\n        constant: {\n            default: primaries[10],\n            builtin: palette.darkRed,\n        },\n        module: {\n            default: palette.darkBlue,\n        },\n        boolean: {\n            default: palette.darkGreen,\n        },\n        number: {\n            default: palette.darkGreen,\n        },\n        type: {\n            default: palette.cyan,\n            builtin: palette.darkCyan,\n        },\n        attribute: {\n            default: palette.darkYellow,\n            builtin: palette.darkYellow,\n        },\n        func: {\n            default: palette.yellow,\n            builtin: palette.yellow,\n            method: palette.yellow,\n        },\n        constructor: {\n            default: palette.yellow,\n        },\n        keyword: {\n            default: palette.magenta,\n            import: palette.red,\n            export: palette.red,\n        },\n        operator: {\n            default: palette.magenta,\n        },\n        punctuation: {\n            default: palette.lightGray,\n            delimiter: primaries[8],\n            bracket: palette.lightGray,\n            special: palette.lightGray,\n        },\n        comment: {\n            default: palette.gray,\n            doc: palette.darkGreen,\n            todo: palette.green,\n            error: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n        },\n        markup: {\n            heading: {\n                h1: palette.yellow,\n                h2: palette.yellow,\n                h3: palette.yellow,\n                h4: palette.lightGray,\n                h5: palette.lightGray,\n                h6: palette.lightGray,\n            },\n            strong: palette.yellow,\n            italic: palette.yellow,\n            strikethrough: palette.yellow,\n            quote: palette.green,\n            math: palette.darkGreen,\n            link: palette.green,\n            list: {\n                default: palette.lightGray,\n                checked: palette.green,\n                unchecked: palette.lightGray,\n            },\n            code: {\n                fg: palette.gray,\n                bg: palette.black,\n            },\n        },\n        tag: {\n            default: palette.yellow,\n            builtin: palette.darkYellow,\n            attribute: primaries[8],\n            delimiter: primaries[9],\n        },\n    };\n}\n```\n\n```ts core/src/themes/corp/ui_dark.ts\nimport { Palette, Primaries, UI } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): UI {\n    return {\n        bg: {\n            default: primaries[2],\n            panel: primaries[1],\n            float: primaries[1],\n            active: primaries[3],\n            disabled: primaries[5],\n            hover: primaries[3],\n            selection: primaries[4],\n            search: primaries[4],\n            contrast: primaries[11],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n        fg: {\n            default: primaries[11],\n            subtle: primaries[9],\n            disabled: primaries[7],\n            accent: palette.yellow,\n            contrast: primaries[2],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n    };\n}\n```\n\n\ntypes\n```ts core/src/types/color.ts\nexport type HexColor = `#${string}`;\n```\n\n```ts core/src/types/theme.ts\nimport { HexColor } from \"./color.ts\";\n\nexport const themeKeys = [\n    \"black-atom-corp-eng\",\n    \"black-atom-corp-ops\",\n    \"black-atom-corp-med\",\n    \"black-atom-corp-res\",\n    \"black-atom-jpn-koyo-yoru\",\n    \"black-atom-jpn-koyo-hiru\",\n    \"black-atom-jpn-tsuki-yoru\",\n    \"black-atom-crbn-null\",\n    \"black-atom-crbn-supr\",\n    \"black-atom-terra-spring-day\",\n    \"black-atom-terra-spring-night\",\n    \"black-atom-terra-fall-day\",\n    \"black-atom-terra-fall-night\",\n    \"black-atom-terra-summer-day\",\n    \"black-atom-terra-summer-night\",\n    \"black-atom-terra-winter-day\",\n    \"black-atom-terra-winter-night\",\n] as const;\n\ntype ThemeKey = typeof themeKeys[number];\n\ntype CollectionKey = \"corp\" | \"terra\" | \"jpn\" | \"crbn\";\n\ntype CollectionLabel = string;\n\ninterface Meta {\n    key: ThemeKey;\n    label:\n        | \"Black Atom - Corp [ENG]\"\n        | \"Black Atom - Corp [OPS]\"\n        | \"Black Atom - Corp [MED]\"\n        | \"Black Atom - Corp [RES]\";\n    appearance: \"light\" | \"dark\";\n    status: \"development\" | \"beta\" | \"release\";\n    collection: {\n        key: CollectionKey;\n        label: CollectionLabel;\n    };\n}\n\ntype Primaries = [\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n];\n\ninterface Palette {\n    black: HexColor;\n    gray: HexColor;\n    darkRed: HexColor;\n    red: HexColor;\n    darkGreen: HexColor;\n    green: HexColor;\n    darkYellow: HexColor;\n    yellow: HexColor;\n    darkBlue: HexColor;\n    blue: HexColor;\n    darkMagenta: HexColor;\n    magenta: HexColor;\n    darkCyan: HexColor;\n    cyan: HexColor;\n    lightGray: HexColor;\n    white: HexColor;\n}\n\ninterface UIBackground {\n    default: HexColor;\n    panel: HexColor;\n    float: HexColor;\n    active: HexColor;\n    disabled: HexColor;\n    hover: HexColor;\n    selection: HexColor;\n    search: HexColor;\n    contrast: HexColor;\n    negative: HexColor;\n    warn: HexColor;\n    info: HexColor;\n    hint: HexColor;\n    positive: HexColor;\n    add: HexColor;\n    delete: HexColor;\n    modify: HexColor;\n}\n\ninterface UIForeground {\n    default: HexColor;\n    subtle: HexColor;\n    accent: HexColor;\n    disabled: HexColor;\n    contrast: HexColor;\n    negative: HexColor;\n    warn: HexColor;\n    info: HexColor;\n    hint: HexColor;\n    positive: HexColor;\n    add: HexColor;\n    delete: HexColor;\n    modify: HexColor;\n}\n\ninterface UI {\n    bg: UIBackground;\n    fg: UIForeground;\n}\n\ninterface Syntax {\n    variable: {\n        default: HexColor;\n        builtin: HexColor;\n        parameter: HexColor;\n        member: HexColor;\n    };\n    string: {\n        default: HexColor;\n        doc: HexColor;\n        regexp: HexColor;\n        escape: HexColor;\n    };\n    boolean: {\n        default: HexColor;\n    };\n    number: {\n        default: HexColor;\n    };\n    property: {\n        default: HexColor;\n    };\n    constant: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    module: {\n        default: HexColor;\n    };\n    type: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    attribute: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    func: {\n        default: HexColor;\n        builtin: HexColor;\n        method: HexColor;\n    };\n    constructor: {\n        default: HexColor;\n    };\n    operator: {\n        default: HexColor;\n    };\n    keyword: {\n        default: HexColor;\n        import: HexColor;\n        export: HexColor;\n    };\n    punctuation: {\n        default: HexColor;\n        delimiter: HexColor;\n        bracket: HexColor;\n        special: HexColor;\n    };\n    comment: {\n        default: HexColor;\n        doc: HexColor;\n        todo: HexColor;\n        error: HexColor;\n        warn: HexColor;\n        info: HexColor;\n        hint: HexColor;\n    };\n    tag: {\n        default: HexColor;\n        builtin: HexColor;\n        delimiter: HexColor;\n        attribute: HexColor;\n    };\n    markup: {\n        heading: {\n            h1: HexColor;\n            h2: HexColor;\n            h3: HexColor;\n            h4: HexColor;\n            h5: HexColor;\n            h6: HexColor;\n        };\n        list: {\n            default: HexColor;\n            checked: HexColor;\n            unchecked: HexColor;\n        };\n        strong: HexColor;\n        italic: HexColor;\n        strikethrough: HexColor;\n        quote: HexColor;\n        math: HexColor;\n        link: HexColor;\n        code: {\n            fg: HexColor;\n            bg: HexColor;\n        };\n    };\n}\n\ninterface Definition {\n    meta: Meta;\n    primaries: Primaries;\n    palette: Palette;\n    ui: UI;\n    syntax: Syntax;\n}\n\nexport type {\n    CollectionKey,\n    CollectionLabel,\n    Definition,\n    Meta,\n    Palette,\n    Primaries,\n    Syntax,\n    ThemeKey,\n    UI,\n};\n```\n\n\n\nWhen I try to run the command I get an error, which I don't understand, since I ran this commands.\n\n```\nnvim git:feature/dev-153-setup-black-atom-core\n❯ black-atom-core generate\nerror: Relative import path \"@std/yaml\" not prefixed with / or ./ or ../\n  hint: If you want to use a JSR or npm package, try running `deno add jsr:@std/yaml` or `deno add npm:@std/yaml`\n    at file:///Users/nbr/repos/black-atom-industries/core/src/cli.ts:2:35\n```\nThe error is occurring because of how the import is written in `cli.ts`. Even though you've specified the import map in `deno.json`, you need to reference the import alias correctly in your code.\n\nChange this line in `core/src/cli.ts`:\n\n```ts\nimport { parse as parseYml } from \"@std/yaml\";\n```\n\nto:\n\n```ts\nimport { parse as parseYml } from \"@std/yaml/parse.ts\";\n```\n\nThe main issue is that you need to specify the exact module file you want to import from the package. The JSR standard library modules typically expose their functionality through specific files.\n\nAfter making this change, the import should work correctly with your import map configuration.\n\nAlso, make sure you've installed the dependencies by running:\n\n```bash\ndeno cache --reload src/cli.ts\n```\n\nThis will ensure all dependencies are properly cached and available.\n",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 108 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 82 },
      "start": 16904,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 109 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 83 },
      "start": 17740,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 110 }
      }
    }
  ],
  "summary": "Deno Import Resolution Error Fix",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 3, "end": 545 },
      "icon": "File",
      "label": "core/deno.json",
      "metadata": { "path": "core/deno.json" }
    },
    {
      "range": { "start": 546, "end": 2780 },
      "icon": "File",
      "label": "core/deno.lock",
      "metadata": { "path": "core/deno.lock" }
    },
    {
      "range": { "start": 2781, "end": 16457 },
      "icon": "Folder",
      "label": "core/src",
      "metadata": null
    },
    {
      "range": { "start": 2790, "end": 4154 },
      "icon": "File",
      "label": "core/src/cli.ts",
      "metadata": { "path": "core/src/cli.ts" }
    },
    {
      "range": { "start": 4155, "end": 4407 },
      "icon": "File",
      "label": "core/src/config.ts",
      "metadata": { "path": "core/src/config.ts" }
    },
    {
      "range": { "start": 4408, "end": 6038 },
      "icon": "Folder",
      "label": "schemas",
      "metadata": null
    },
    {
      "range": { "start": 4416, "end": 6037 },
      "icon": "File",
      "label": "core/src/schemas/adapter.ts",
      "metadata": { "path": "core/src/schemas/adapter.ts" }
    },
    {
      "range": { "start": 6039, "end": 11576 },
      "icon": "Folder",
      "label": "themes/corp",
      "metadata": null
    },
    {
      "range": { "start": 6051, "end": 7301 },
      "icon": "File",
      "label": "core/src/themes/corp/black-atom-corp-eng.ts",
      "metadata": { "path": "core/src/themes/corp/black-atom-corp-eng.ts" }
    },
    {
      "range": { "start": 7302, "end": 10285 },
      "icon": "File",
      "label": "core/src/themes/corp/syntax_dark.ts",
      "metadata": { "path": "core/src/themes/corp/syntax_dark.ts" }
    },
    {
      "range": { "start": 10286, "end": 11575 },
      "icon": "File",
      "label": "core/src/themes/corp/ui_dark.ts",
      "metadata": { "path": "core/src/themes/corp/ui_dark.ts" }
    },
    {
      "range": { "start": 11577, "end": 16457 },
      "icon": "Folder",
      "label": "types",
      "metadata": null
    },
    {
      "range": { "start": 11583, "end": 11654 },
      "icon": "File",
      "label": "core/src/types/color.ts",
      "metadata": { "path": "core/src/types/color.ts" }
    },
    {
      "range": { "start": 11655, "end": 16456 },
      "icon": "File",
      "label": "core/src/types/theme.ts",
      "metadata": { "path": "core/src/types/theme.ts" }
    }
  ]
}
