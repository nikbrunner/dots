{
  "id": "1c3259e1-24c1-4f72-ae01-baad18758732",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\ncore/src\n```ts core/src/cli.ts\nimport * as z from \"@zod\";\nimport { AdapterConfig, adapterConfigSchema, TemplateConfig } from \"./schemas/adapter.ts\";\nimport { config } from \"./config.ts\";\nimport log from \"./lib/log.ts\";\nimport black_atom_corp_eng from \"./themes/corp/black-atom-corp-eng.ts\";\nimport black_atom_jpn_koyo_yoru from \"./themes/jpn/black-atom-jpn-koyo-yoru.ts\";\nimport black_atom_jpn_koyo_hiru from \"./themes/jpn/black-atom-jpn-koyo-hiru.ts\";\nimport black_atom_jpn_tsuki_yoru from \"./themes/jpn/black-atom-jpn-tsuki-yoru.ts\";\nimport { processTemplate, writeOutput } from \"./lib/template.ts\";\nimport { Definition, Key } from \"./types/theme.ts\";\n\nconst themeMap: Record<Key, Definition | null> = {\n    \"black-atom-corp-eng\": black_atom_corp_eng,\n    \"black-atom-corp-ops\": null,\n    \"black-atom-corp-med\": null,\n    \"black-atom-corp-res\": null,\n    \"black-atom-jpn-koyo-yoru\": black_atom_jpn_koyo_yoru,\n    \"black-atom-jpn-koyo-hiru\": black_atom_jpn_koyo_hiru,\n    \"black-atom-jpn-tsuki-yoru\": black_atom_jpn_tsuki_yoru,\n    \"black-atom-crbn-null\": null,\n    \"black-atom-crbn-supr\": null,\n    \"black-atom-terra-spring-day\": null,\n    \"black-atom-terra-spring-night\": null,\n    \"black-atom-terra-fall-day\": null,\n    \"black-atom-terra-fall-night\": null,\n    \"black-atom-terra-summer-day\": null,\n    \"black-atom-terra-summer-night\": null,\n    \"black-atom-terra-winter-day\": null,\n    \"black-atom-terra-winter-night\": null,\n};\n\nasync function getAdapterConfig(): Promise<AdapterConfig> {\n    try {\n        const adapterConfig = await Deno.readTextFile(config.adapterFileName);\n        return adapterConfigSchema.parse(JSON.parse(adapterConfig));\n    } catch (error) {\n        if (error instanceof Deno.errors.NotFound) {\n            log.error(`No \\`${config.adapterFileName}\\` found in current directory. Abort.`);\n            Deno.exit(1);\n        }\n\n        if (error instanceof z.ZodError) {\n            log.error(\"Invalid adapter configuration!\");\n            console.dir(error.issues);\n            Deno.exit(1);\n        }\n\n        throw error;\n    }\n}\n\nasync function processThemeTemplates(themeKey: Key, templatePath: TemplateConfig[\"templates\"]) {\n    const theme = themeMap[themeKey];\n\n    if (!theme) {\n        log.error(`Theme \"${themeKey}\" not found`);\n        return;\n    }\n\n    for (const path of templatePath) {\n        try {\n            log.info(`Processing template: ${path}`);\n            const content = await processTemplate(theme, path);\n            await writeOutput(content, path);\n            log.success(`Generated: ${path.replace(\".template.\", \".\")}`);\n        } catch (error) {\n            if (error instanceof Error) {\n                log.error(`Failed to process template ${path}: ${error.message}`);\n            }\n        }\n    }\n}\n\nif (import.meta.main) {\n    const command = Deno.args[0];\n\n    switch (command) {\n        case \"generate\": {\n            const adapterConfig = await getAdapterConfig();\n            log.success(\"Adapter configuration loaded successfully\");\n\n            const { $schema: _, ...configs } = adapterConfig;\n\n            const configEntries = Object.entries(configs) as [Key, TemplateConfig][];\n\n            if (configEntries.length === 0) {\n                log.warn(\"No theme keys defined!\");\n            }\n\n            for (const [themeKey, config] of configEntries) {\n                await processThemeTemplates(themeKey, config.templates);\n            }\n\n            break;\n        }\n\n        case \"-h\":\n        case \"--help\":\n            log.menu();\n            break;\n\n        default:\n            log.menu();\n            Deno.exit(1);\n    }\n}\n```\n\n```ts core/src/config.ts\nimport { join } from \"@std/path\";\n\nconst cwd = Deno.cwd();\n\nexport const config = {\n    adapterFileName: \"adapter.json\",\n    dir: {\n        themes: join(cwd, \"src\", \"themes\"),\n    },\n};\n\nexport type Config = typeof config;\n```\n\nlib\n```ts core/src/lib/log.ts\nimport * as colors from \"@std/fmt/colors\";\n\nconst log = {\n    error: (message: string) => {\n        console.error(colors.red(\" \" + message));\n    },\n    info: (message: string) => {\n        console.info(colors.white(\" \" + message));\n    },\n    warn: (message: string) => {\n        console.warn(colors.yellow(\" \" + message));\n    },\n    success: (message: string) => {\n        console.log(colors.green(\" \" + message));\n    },\n    menu: () => {\n        log.info(`Usage: black-atom-core <command>\n\nCommands:\n  ${colors.yellow(\"generate\")}    Generate theme files from templates\n`);\n    },\n};\n\nexport default log;\n```\n\n```ts core/src/lib/template.ts\nimport { Eta } from \"@eta\";\nimport { dirname } from \"@std/path\";\nimport type { Definition } from \"../types/theme.ts\";\n\n// Initialize Eta with options\nconst eta = new Eta({\n    views: Deno.cwd(), // Use current working directory as views directory\n    cache: true, // Enable caching for better performance\n    autoEscape: false, // Don't escape HTML since we're not generating HTML\n    varName: \"theme\", // Use 'theme' as the variable name in templates\n});\n\nexport async function processTemplate(themeDef: Definition, templatePath: string): Promise<string> {\n    try {\n        // Read template file\n        const template = await Deno.readTextFile(templatePath);\n\n        // Process template with Eta\n        return eta.renderString(template, themeDef);\n    } catch (error) {\n        if (error instanceof Deno.errors.NotFound) {\n            throw new Error(`Template file not found: ${templatePath}`);\n        }\n        throw error;\n    }\n}\n\nexport async function writeOutput(content: string, templatePath: string): Promise<void> {\n    // Generate output path by removing .template from the file name\n    const outputPath = templatePath.replace(\".template.\", \".\");\n\n    // Ensure the output directory exists\n    await Deno.mkdir(dirname(outputPath), { recursive: true });\n\n    // Write the processed content\n    await Deno.writeTextFile(outputPath, content);\n}\n```\n\n\nschemas\n```ts core/src/schemas/adapter.ts\nimport * as z from \"@zod\";\nimport { themeKeys } from \"../types/theme.ts\";\n\nconst templateConfigSchema = z.object({\n    templates: z.array(z.string()),\n});\n\nconst themeConfigShape = Object.fromEntries(\n    themeKeys.map((key) => [key, templateConfigSchema]),\n) as { [K in typeof themeKeys[number]]: typeof templateConfigSchema };\n\nexport const adapterConfigSchema = z.object({\n    $schema: z.string(),\n    ...themeConfigShape,\n}).partial();\n\nexport type TemplateConfig = z.infer<typeof templateConfigSchema>;\nexport type AdapterConfig = z.infer<typeof adapterConfigSchema>;\n```\n\n\nthemes\ncorp\n```ts core/src/themes/corp/black-atom-corp-eng.ts\nimport * as Theme from \"../../types/theme.ts\";\n\nimport syntax_dark from \"./syntax_dark.ts\";\nimport ui_dark from \"./ui_dark.ts\";\n\nconst meta: Theme.Meta = {\n    key: \"black-atom-corp-eng\",\n    label: \"Black Atom - Corp [ENG]\",\n    appearance: \"dark\",\n    status: \"release\",\n    collection: {\n        key: \"corp\",\n        label: \"Corporate\",\n    },\n};\n\nconst primaries: Theme.Primaries = [\n    \"#040505\",\n    \"#0e1110\",\n    \"#181b19\",\n    \"#1d201e\",\n    \"#3e4441\",\n    \"#565f59\",\n    \"#606a65\",\n    \"#79857f\",\n    \"#9fafa7\",\n    \"#abbbb3\",\n    \"#c4d4cc\",\n    \"#d0e0d8\",\n];\n\nconst palette: Theme.Palette = {\n    black: primaries[2],\n    gray: primaries[5],\n\n    darkRed: \"#9891d6\",\n    red: \"#a6a1df\",\n\n    darkGreen: \"#93c270\",\n    green: \"#a0ce7d\",\n\n    darkYellow: primaries[9],\n    yellow: \"#9BE197\",\n\n    darkBlue: primaries[8],\n    blue: primaries[10],\n\n    darkMagenta: \"#a498e9\",\n    magenta: \"#b7aded\",\n\n    darkCyan: \"#6ac779\",\n    cyan: \"#88dc96\",\n\n    lightGray: primaries[8],\n    white: primaries[11],\n};\n\nconst theme: Theme.Definition = {\n    meta,\n    primaries,\n    palette,\n    ui: ui_dark(primaries, palette),\n    syntax: syntax_dark(primaries, palette),\n};\n\nexport default theme;\n```\n\n```ts core/src/themes/corp/syntax_dark.ts\nimport { Palette, Primaries, Syntax } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): Syntax {\n    return {\n        variable: {\n            default: palette.blue,\n            builtin: palette.blue,\n            member: palette.darkBlue,\n            parameter: palette.darkYellow,\n        },\n        property: {\n            default: palette.darkBlue,\n        },\n        string: {\n            default: palette.green,\n            doc: palette.green,\n            regexp: palette.red,\n            escape: palette.red,\n        },\n        constant: {\n            default: primaries[10],\n            builtin: palette.darkRed,\n        },\n        module: {\n            default: palette.darkBlue,\n        },\n        boolean: {\n            default: palette.darkGreen,\n        },\n        number: {\n            default: palette.darkGreen,\n        },\n        type: {\n            default: palette.cyan,\n            builtin: palette.darkCyan,\n        },\n        attribute: {\n            default: palette.darkYellow,\n            builtin: palette.darkYellow,\n        },\n        func: {\n            default: palette.yellow,\n            builtin: palette.yellow,\n            method: palette.yellow,\n        },\n        constructor: {\n            default: palette.yellow,\n        },\n        keyword: {\n            default: palette.magenta,\n            import: palette.red,\n            export: palette.red,\n        },\n        operator: {\n            default: palette.magenta,\n        },\n        punctuation: {\n            default: palette.lightGray,\n            delimiter: primaries[8],\n            bracket: palette.lightGray,\n            special: palette.lightGray,\n        },\n        comment: {\n            default: palette.gray,\n            doc: palette.darkGreen,\n            todo: palette.green,\n            error: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n        },\n        markup: {\n            heading: {\n                h1: palette.yellow,\n                h2: palette.yellow,\n                h3: palette.yellow,\n                h4: palette.lightGray,\n                h5: palette.lightGray,\n                h6: palette.lightGray,\n            },\n            strong: palette.yellow,\n            italic: palette.yellow,\n            strikethrough: palette.yellow,\n            quote: palette.green,\n            math: palette.darkGreen,\n            link: palette.green,\n            list: {\n                default: palette.lightGray,\n                checked: palette.green,\n                unchecked: palette.lightGray,\n            },\n            code: {\n                fg: palette.gray,\n                bg: palette.black,\n            },\n        },\n        tag: {\n            default: palette.yellow,\n            builtin: palette.darkYellow,\n            attribute: primaries[8],\n            delimiter: primaries[9],\n        },\n    };\n}\n```\n\n```ts core/src/themes/corp/ui_dark.ts\nimport { Palette, Primaries, UI } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): UI {\n    return {\n        bg: {\n            default: primaries[2],\n            panel: primaries[1],\n            float: primaries[1],\n            active: primaries[3],\n            disabled: primaries[5],\n            hover: primaries[3],\n            selection: primaries[4],\n            search: primaries[4],\n            contrast: primaries[11],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n        fg: {\n            default: primaries[11],\n            subtle: primaries[9],\n            disabled: primaries[7],\n            accent: palette.yellow,\n            contrast: primaries[2],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n    };\n}\n```\n\n\njpn\n```ts core/src/themes/jpn/black-atom-jpn-koyo-hiru.ts\nimport * as Theme from \"../../types/theme.ts\";\n\nimport syntax_light from \"./syntax_light.ts\";\nimport ui_light from \"./ui_light.ts\";\n\nconst meta: Theme.Meta = {\n    key: \"black-atom-jpn-koyo-hiru\",\n    label: \"Black Atom - JPN - Koyo [Hiru]\",\n    appearance: \"light\",\n    status: \"release\",\n    collection: {\n        key: \"jpn\",\n        label: \"JPN\",\n    },\n};\n\nconst primaries: Theme.Primaries = [\n    \"#403240\",\n    \"#574457\",\n    \"#664a66\",\n    \"#735673\",\n    \"#605872\",\n    \"#6e6a86\",\n    \"#908caa\",\n    \"#aaa7be\",\n    \"#f4e8d9\",\n    \"#f6ede1\",\n    \"#f9f2e9\",\n    \"#f9f2ee\",\n];\n\nconst palette: Theme.Palette = {\n    black: primaries[0],\n    gray: primaries[5],\n\n    darkRed: \"#c65e53\",\n    red: \"#db7070\",\n\n    darkGreen: \"#428a68\",\n    green: \"#52ad82\",\n\n    darkYellow: \"#de8641\",\n    yellow: \"#ea9d34\",\n\n    darkBlue: \"#aa6f83\",\n    blue: \"#9175a3\",\n\n    darkMagenta: \"#ec935f\",\n    magenta: \"#f0a274\",\n\n    darkCyan: \"#529e86\",\n    cyan: \"#6aaf9a\",\n\n    lightGray: primaries[7],\n    white: primaries[10],\n};\n\nconst theme: Theme.Definition = {\n    meta,\n    primaries,\n    palette,\n    ui: ui_light(primaries, palette),\n    syntax: syntax_light(primaries, palette),\n};\n\nexport default theme;\n```\n\n```ts core/src/themes/jpn/black-atom-jpn-koyo-yoru.ts\nimport * as Theme from \"../../types/theme.ts\";\n\nimport syntax_dark from \"./syntax_dark.ts\";\nimport ui_dark from \"./ui_dark.ts\";\n\nconst meta: Theme.Meta = {\n    key: \"black-atom-jpn-koyo-yoru\",\n    label: \"Black Atom - JPN - Koyo [Yoru]\",\n    appearance: \"dark\",\n    status: \"release\",\n    collection: {\n        key: \"jpn\",\n        label: \"JPN\",\n    },\n};\n\nconst primaries: Theme.Primaries = [\n    \"#271f27\",\n    \"#332733\",\n    \"#3f2f3f\",\n    \"#4a384a\",\n    \"#605872\",\n    \"#6e6a86\",\n    \"#908caa\",\n    \"#aaa7be\",\n    \"#dab18c\",\n    \"#e0be9f\",\n    \"#e6cbb2\",\n    \"#ecd8c5\",\n];\n\nconst palette: Theme.Palette = {\n    black: primaries[2],\n    gray: primaries[5],\n\n    darkRed: \"#b46371\",\n    red: \"#eb6f84\",\n\n    darkGreen: \"#53ad82\",\n    green: \"#7ab89b\",\n\n    darkYellow: \"#ee9c6b\",\n    yellow: \"#e9b162\",\n\n    darkBlue: \"#ad8593\",\n    blue: \"#a095a8\",\n\n    darkMagenta: \"#ef9d6c\",\n    magenta: \"#ffb488\",\n\n    darkCyan: \"#68b19a\",\n    cyan: \"#8cc1b0\",\n\n    lightGray: primaries[7],\n    white: primaries[10],\n};\n\nconst theme: Theme.Definition = {\n    meta,\n    primaries,\n    palette,\n    ui: ui_dark(primaries, palette),\n    syntax: syntax_dark(primaries, palette),\n};\n\nexport default theme;\n```\n\n```ts core/src/themes/jpn/black-atom-jpn-tsuki-yoru.ts\nimport * as Theme from \"../../types/theme.ts\";\n\nimport syntax_dark from \"./syntax_dark.ts\";\nimport ui_dark from \"./ui_dark.ts\";\n\nconst meta: Theme.Meta = {\n    key: \"black-atom-jpn-tsuki-yoru\",\n    label: \"Black Atom - JPN - Tsuki [Yoru]\",\n    appearance: \"dark\",\n    status: \"release\",\n    collection: {\n        key: \"jpn\",\n        label: \"JPN\",\n    },\n};\n\nconst primaries: Theme.Primaries = [\n    \"#0f0f0f\",\n    \"#1c1c1c\",\n    \"#282828\",\n    \"#373737\",\n    \"#4f4f61\",\n    \"#69697f\",\n    \"#828299\",\n    \"#9d9daf\",\n    \"#b3b3b3\",\n    \"#cbcbcb\",\n    \"#e6e6e6\",\n    \"#ffffff\",\n];\n\nconst palette: Theme.Palette = {\n    black: primaries[2],\n    gray: primaries[4],\n\n    darkRed: \"#f2759e\",\n    red: \"#F591B2\",\n\n    darkGreen: \"#71a584\",\n    green: \"#90B99F\",\n\n    darkYellow: \"#f6a090\",\n    yellow: \"#eab899\",\n\n    darkBlue: \"#8699c1\",\n    blue: \"#a1b0cf\",\n\n    darkMagenta: \"#9789c3\",\n    magenta: \"#ACA1CF\",\n\n    darkCyan: \"#76bdac\",\n    cyan: \"#8dd9c5\",\n\n    lightGray: primaries[7],\n    white: primaries[10],\n};\n\nconst theme: Theme.Definition = {\n    meta,\n    primaries,\n    palette,\n    ui: ui_dark(primaries, palette),\n    syntax: syntax_dark(primaries, palette),\n};\n\nexport default theme;\n```\n\n```ts core/src/themes/jpn/syntax_dark.ts\nimport { Palette, Primaries, Syntax } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): Syntax {\n    return {\n        variable: {\n            default: primaries[9],\n            builtin: primaries[7],\n            member: palette.blue,\n            parameter: palette.darkYellow,\n        },\n        property: {\n            default: palette.blue,\n        },\n        string: {\n            default: palette.green,\n            doc: palette.green,\n            regexp: palette.red,\n            escape: palette.red,\n        },\n        constant: {\n            default: palette.darkBlue,\n            builtin: palette.darkRed,\n        },\n        module: {\n            default: palette.darkBlue,\n        },\n        boolean: {\n            default: palette.darkGreen,\n        },\n        number: {\n            default: palette.darkGreen,\n        },\n        type: {\n            default: palette.cyan,\n            builtin: palette.darkCyan,\n        },\n        attribute: {\n            default: palette.darkYellow,\n            builtin: palette.darkYellow,\n        },\n        func: {\n            default: palette.yellow,\n            builtin: palette.yellow,\n            method: palette.yellow,\n        },\n        constructor: {\n            default: palette.yellow,\n        },\n        keyword: {\n            default: palette.magenta,\n            import: palette.red,\n            export: palette.red,\n        },\n        operator: {\n            default: palette.darkBlue,\n        },\n        punctuation: {\n            default: palette.lightGray,\n            delimiter: palette.darkBlue,\n            bracket: palette.lightGray,\n            special: palette.lightGray,\n        },\n        comment: {\n            default: palette.gray,\n            doc: palette.darkGreen,\n            todo: palette.green,\n            error: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n        },\n        markup: {\n            heading: {\n                h1: palette.yellow,\n                h2: palette.yellow,\n                h3: palette.yellow,\n                h4: palette.lightGray,\n                h5: palette.lightGray,\n                h6: palette.lightGray,\n            },\n            list: {\n                default: palette.lightGray,\n                checked: palette.green,\n                unchecked: palette.lightGray,\n            },\n            quote: palette.green,\n            math: palette.darkGreen,\n            link: palette.green,\n            code: {\n                bg: palette.darkBlue,\n                fg: palette.magenta,\n            },\n            strong: palette.yellow,\n            italic: palette.yellow,\n            strikethrough: palette.yellow,\n        },\n        tag: {\n            default: palette.yellow,\n            builtin: palette.darkYellow,\n            attribute: primaries[7],\n            delimiter: primaries[8],\n        },\n    };\n}\n```\n\n```ts core/src/themes/jpn/syntax_light.ts\nimport { Palette, Primaries, Syntax } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): Syntax {\n    return {\n        variable: {\n            default: primaries[4],\n            builtin: primaries[6],\n            member: palette.blue,\n            parameter: palette.darkMagenta,\n        },\n        property: {\n            default: palette.blue,\n        },\n        string: {\n            default: palette.green,\n            doc: palette.green,\n            regexp: palette.red,\n            escape: palette.red,\n        },\n        constant: {\n            default: palette.darkBlue,\n            builtin: palette.darkRed,\n        },\n        module: {\n            default: palette.darkBlue,\n        },\n        boolean: {\n            default: palette.darkGreen,\n        },\n        number: {\n            default: palette.darkGreen,\n        },\n        type: {\n            default: palette.cyan,\n            builtin: palette.darkCyan,\n        },\n        attribute: {\n            default: palette.darkYellow,\n            builtin: palette.darkYellow,\n        },\n        func: {\n            default: palette.yellow,\n            builtin: palette.yellow,\n            method: palette.yellow,\n        },\n        constructor: {\n            default: palette.yellow,\n        },\n        keyword: {\n            default: palette.magenta,\n            import: palette.red,\n            export: palette.red,\n        },\n        operator: {\n            default: palette.darkBlue,\n        },\n        punctuation: {\n            default: palette.gray,\n            delimiter: palette.darkBlue,\n            bracket: palette.gray,\n            special: palette.gray,\n        },\n        comment: {\n            default: palette.gray,\n            doc: palette.darkGreen,\n            todo: palette.green,\n            error: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n        },\n        markup: {\n            heading: {\n                h1: palette.yellow,\n                h2: palette.yellow,\n                h3: palette.yellow,\n                h4: palette.gray,\n                h5: palette.gray,\n                h6: palette.gray,\n            },\n            list: {\n                default: palette.gray,\n                checked: palette.green,\n                unchecked: palette.gray,\n            },\n            quote: palette.green,\n            math: palette.darkGreen,\n            link: palette.green,\n            code: {\n                fg: primaries[5],\n                bg: primaries[9],\n            },\n            strong: palette.yellow,\n            italic: palette.yellow,\n            strikethrough: palette.yellow,\n        },\n        tag: {\n            default: palette.yellow,\n            builtin: palette.darkYellow,\n            attribute: primaries[4],\n            delimiter: primaries[3],\n        },\n    };\n}\n\n```\n\n```ts core/src/themes/jpn/ui_dark.ts\nimport { Palette, Primaries, UI } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): UI {\n    return {\n        bg: {\n            default: primaries[1],\n            panel: primaries[0],\n            float: primaries[0],\n            active: primaries[2],\n            disabled: primaries[4],\n            hover: primaries[2],\n            selection: primaries[3],\n            search: primaries[3],\n            contrast: primaries[10],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n        fg: {\n            default: primaries[10],\n            subtle: primaries[8],\n            disabled: primaries[6],\n            accent: palette.yellow,\n            contrast: primaries[1],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n    };\n}\n\n```\n\n```ts core/src/themes/jpn/ui_light.ts\nimport { Palette, Primaries, UI } from \"../../types/theme.ts\";\n\nexport default function (primaries: Primaries, palette: Palette): UI {\n    return {\n        bg: {\n            default: primaries[10],\n            panel: primaries[9],\n            float: primaries[9],\n            active: primaries[8],\n            disabled: primaries[7],\n            hover: primaries[8],\n            selection: primaries[8],\n            search: primaries[8],\n            contrast: primaries[1],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n        fg: {\n            default: primaries[1],\n            subtle: primaries[3],\n            disabled: primaries[5],\n            accent: palette.yellow,\n            contrast: primaries[10],\n            negative: palette.red,\n            warn: palette.yellow,\n            info: palette.blue,\n            hint: palette.darkYellow,\n            positive: palette.green,\n            add: palette.green,\n            delete: palette.red,\n            modify: palette.blue,\n        },\n    };\n}\n\n```\n\n\n\ntypes\n```ts core/src/types/color.ts\nexport type HexColor = `#${string}`;\n```\n\n```ts core/src/types/theme.ts\nimport { HexColor } from \"./color.ts\";\n\nexport const themeKeys = [\n    \"black-atom-corp-eng\",\n    \"black-atom-corp-ops\",\n    \"black-atom-corp-med\",\n    \"black-atom-corp-res\",\n    \"black-atom-jpn-koyo-yoru\",\n    \"black-atom-jpn-koyo-hiru\",\n    \"black-atom-jpn-tsuki-yoru\",\n    \"black-atom-crbn-null\",\n    \"black-atom-crbn-supr\",\n    \"black-atom-terra-spring-day\",\n    \"black-atom-terra-spring-night\",\n    \"black-atom-terra-fall-day\",\n    \"black-atom-terra-fall-night\",\n    \"black-atom-terra-summer-day\",\n    \"black-atom-terra-summer-night\",\n    \"black-atom-terra-winter-day\",\n    \"black-atom-terra-winter-night\",\n] as const;\n\ntype Key = typeof themeKeys[number];\n\ntype CollectionKey = \"corp\" | \"terra\" | \"jpn\" | \"crbn\";\n\ntype CollectionLabel = string;\n\ninterface Meta {\n    key: Key;\n    label:\n        | \"Black Atom - Corp [ENG]\"\n        | \"Black Atom - Corp [OPS]\"\n        | \"Black Atom - Corp [MED]\"\n        | \"Black Atom - Corp [RES]\"\n        | \"Black Atom - JPN - Koyo [Yoru]\"\n        | \"Black Atom - JPN - Koyo [Hiru]\"\n        | \"Black Atom - JPN - Tsuki [Yoru]\"\n        | \"Black Atom - CRBN - Null\"\n        | \"Black Atom - CRBN - Supr\"\n        | \"Black Atom - Terra - Spring [Day]\"\n        | \"Black Atom - Terra - Spring [Night]\"\n        | \"Black Atom - Terra - Fall [Day]\"\n        | \"Black Atom - Terra - Fall [Night]\"\n        | \"Black Atom - Terra - Summer [Day]\"\n        | \"Black Atom - Terra - Summer [Night]\"\n        | \"Black Atom - Terra - Winter [Day]\"\n        | \"Black Atom - Terra - Winter [Night]\";\n    appearance: \"light\" | \"dark\";\n    status: \"development\" | \"beta\" | \"release\";\n    collection: {\n        key: CollectionKey;\n        label: CollectionLabel;\n    };\n}\n\ntype Primaries = [\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n];\n\ninterface Palette {\n    black: HexColor;\n    gray: HexColor;\n    darkRed: HexColor;\n    red: HexColor;\n    darkGreen: HexColor;\n    green: HexColor;\n    darkYellow: HexColor;\n    yellow: HexColor;\n    darkBlue: HexColor;\n    blue: HexColor;\n    darkMagenta: HexColor;\n    magenta: HexColor;\n    darkCyan: HexColor;\n    cyan: HexColor;\n    lightGray: HexColor;\n    white: HexColor;\n}\n\ninterface UIBackground {\n    default: HexColor;\n    panel: HexColor;\n    float: HexColor;\n    active: HexColor;\n    disabled: HexColor;\n    hover: HexColor;\n    selection: HexColor;\n    search: HexColor;\n    contrast: HexColor;\n    negative: HexColor;\n    warn: HexColor;\n    info: HexColor;\n    hint: HexColor;\n    positive: HexColor;\n    add: HexColor;\n    delete: HexColor;\n    modify: HexColor;\n}\n\ninterface UIForeground {\n    default: HexColor;\n    subtle: HexColor;\n    accent: HexColor;\n    disabled: HexColor;\n    contrast: HexColor;\n    negative: HexColor;\n    warn: HexColor;\n    info: HexColor;\n    hint: HexColor;\n    positive: HexColor;\n    add: HexColor;\n    delete: HexColor;\n    modify: HexColor;\n}\n\ninterface UI {\n    bg: UIBackground;\n    fg: UIForeground;\n}\n\ninterface Syntax {\n    variable: {\n        default: HexColor;\n        builtin: HexColor;\n        parameter: HexColor;\n        member: HexColor;\n    };\n    string: {\n        default: HexColor;\n        doc: HexColor;\n        regexp: HexColor;\n        escape: HexColor;\n    };\n    boolean: {\n        default: HexColor;\n    };\n    number: {\n        default: HexColor;\n    };\n    property: {\n        default: HexColor;\n    };\n    constant: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    module: {\n        default: HexColor;\n    };\n    type: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    attribute: {\n        default: HexColor;\n        builtin: HexColor;\n    };\n    func: {\n        default: HexColor;\n        builtin: HexColor;\n        method: HexColor;\n    };\n    constructor: {\n        default: HexColor;\n    };\n    operator: {\n        default: HexColor;\n    };\n    keyword: {\n        default: HexColor;\n        import: HexColor;\n        export: HexColor;\n    };\n    punctuation: {\n        default: HexColor;\n        delimiter: HexColor;\n        bracket: HexColor;\n        special: HexColor;\n    };\n    comment: {\n        default: HexColor;\n        doc: HexColor;\n        todo: HexColor;\n        error: HexColor;\n        warn: HexColor;\n        info: HexColor;\n        hint: HexColor;\n    };\n    tag: {\n        default: HexColor;\n        builtin: HexColor;\n        delimiter: HexColor;\n        attribute: HexColor;\n    };\n    markup: {\n        heading: {\n            h1: HexColor;\n            h2: HexColor;\n            h3: HexColor;\n            h4: HexColor;\n            h5: HexColor;\n            h6: HexColor;\n        };\n        list: {\n            default: HexColor;\n            checked: HexColor;\n            unchecked: HexColor;\n        };\n        strong: HexColor;\n        italic: HexColor;\n        strikethrough: HexColor;\n        quote: HexColor;\n        math: HexColor;\n        link: HexColor;\n        code: {\n            fg: HexColor;\n            bg: HexColor;\n        };\n    };\n}\n\ninterface Definition {\n    meta: Meta;\n    primaries: Primaries;\n    palette: Palette;\n    ui: UI;\n    syntax: Syntax;\n}\n\nexport type {\n    CollectionKey,\n    CollectionLabel,\n    Definition,\n    Key,\n    Meta,\n    Palette,\n    Primaries,\n    Syntax,\n    UI,\n};\n```\n\n\n\nCould you please refactor the primaries from an array to an object with numbers as index?\n\nI imagine something like this:\n\n```ts\ntype PrimariesAlt = {\n    100: HexColor;\n    200: HexColor;\n    300: HexColor;\n    400: HexColor;\n    500: HexColor;\n    600: HexColor;\n    700: HexColor;\n    800: HexColor;\n    900: HexColor;\n};\n```\n\n100 should be the brightest, 900 the darkest\n\nPlease adjust all usages\n<patch>\n<title>Refactor primaries from array to indexed object</title>\n\n<edit>\n<path>core/src/types/theme.ts</path>\n<description>Replace Primaries array type with indexed object type</description>\n<old_text>type Primaries = [\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n    HexColor,\n];</old_text>\n<new_text>interface Primaries {\n    100: HexColor; // Brightest\n    200: HexColor;\n    300: HexColor;\n    400: HexColor;\n    500: HexColor;\n    600: HexColor;\n    700: HexColor;\n    800: HexColor;\n    900: HexColor; // Darkest\n}</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/corp/black-atom-corp-eng.ts</path>\n<description>Convert primaries array to indexed object</description>\n<old_text>const primaries: Theme.Primaries = [\n    \"#040505\",\n    \"#0e1110\",\n    \"#181b19\",\n    \"#1d201e\",\n    \"#3e4441\",\n    \"#565f59\",\n    \"#606a65\",\n    \"#79857f\",\n    \"#9fafa7\",\n    \"#abbbb3\",\n    \"#c4d4cc\",\n    \"#d0e0d8\",\n];</old_text>\n<new_text>const primaries: Theme.Primaries = {\n    900: \"#040505\",\n    800: \"#0e1110\", \n    700: \"#181b19\",\n    600: \"#3e4441\",\n    500: \"#565f59\",\n    400: \"#79857f\",\n    300: \"#9fafa7\",\n    200: \"#c4d4cc\",\n    100: \"#d0e0d8\",\n};</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/black-atom-jpn-koyo-hiru.ts</path>\n<description>Convert primaries array to indexed object</description>\n<old_text>const primaries: Theme.Primaries = [\n    \"#403240\",\n    \"#574457\",\n    \"#664a66\",\n    \"#735673\",\n    \"#605872\",\n    \"#6e6a86\",\n    \"#908caa\",\n    \"#aaa7be\",\n    \"#f4e8d9\",\n    \"#f6ede1\",\n    \"#f9f2e9\",\n    \"#f9f2ee\",\n];</old_text>\n<new_text>const primaries: Theme.Primaries = {\n    900: \"#403240\",\n    800: \"#574457\",\n    700: \"#664a66\",\n    600: \"#605872\",\n    500: \"#6e6a86\",\n    400: \"#908caa\",\n    300: \"#f4e8d9\",\n    200: \"#f9f2e9\",\n    100: \"#f9f2ee\",\n};</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/black-atom-jpn-koyo-yoru.ts</path>\n<description>Convert primaries array to indexed object</description>\n<old_text>const primaries: Theme.Primaries = [\n    \"#271f27\",\n    \"#332733\",\n    \"#3f2f3f\",\n    \"#4a384a\",\n    \"#605872\",\n    \"#6e6a86\",\n    \"#908caa\",\n    \"#aaa7be\",\n    \"#dab18c\",\n    \"#e0be9f\",\n    \"#e6cbb2\",\n    \"#ecd8c5\",\n];</old_text>\n<new_text>const primaries: Theme.Primaries = {\n    900: \"#271f27\",\n    800: \"#332733\",\n    700: \"#3f2f3f\",\n    600: \"#605872\",\n    500: \"#6e6a86\",\n    400: \"#908caa\",\n    300: \"#dab18c\",\n    200: \"#e6cbb2\",\n    100: \"#ecd8c5\",\n};</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/black-atom-jpn-tsuki-yoru.ts</path>\n<description>Convert primaries array to indexed object</description>\n<old_text>const primaries: Theme.Primaries = [\n    \"#0f0f0f\",\n    \"#1c1c1c\",\n    \"#282828\",\n    \"#373737\",\n    \"#4f4f61\",\n    \"#69697f\",\n    \"#828299\",\n    \"#9d9daf\",\n    \"#b3b3b3\",\n    \"#cbcbcb\",\n    \"#e6e6e6\",\n    \"#ffffff\",\n];</old_text>\n<new_text>const primaries: Theme.Primaries = {\n    900: \"#0f0f0f\",\n    800: \"#1c1c1c\",\n    700: \"#282828\",\n    600: \"#4f4f61\",\n    500: \"#69697f\",\n    400: \"#9d9daf\",\n    300: \"#b3b3b3\",\n    200: \"#e6e6e6\",\n    100: \"#ffffff\",\n};</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/corp/black-atom-corp-eng.ts</path>\n<description>Update references to primaries array indices</description>\n<old_text>    black: primaries[2],\n    gray: primaries[5],</old_text>\n<new_text>    black: primaries[700],\n    gray: primaries[500],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/corp/black-atom-corp-eng.ts</path>\n<old_text>    darkBlue: primaries[8],\n    blue: primaries[10],\n\n    darkMagenta: \"#a498e9\",\n    magenta: \"#b7aded\",\n\n    darkCyan: \"#6ac779\",\n    cyan: \"#88dc96\",\n\n    lightGray: primaries[8],\n    white: primaries[11],</old_text>\n<new_text>    darkBlue: primaries[300],\n    blue: primaries[200],\n\n    darkMagenta: \"#a498e9\",\n    magenta: \"#b7aded\",\n\n    darkCyan: \"#6ac779\",\n    cyan: \"#88dc96\",\n\n    lightGray: primaries[300],\n    white: primaries[100],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/syntax_dark.ts</path>\n<description>Update references to primaries array indices</description>\n<old_text>            default: primaries[9],\n            builtin: primaries[7],</old_text>\n<new_text>            default: primaries[200],\n            builtin: primaries[400],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/syntax_dark.ts</path>\n<old_text>            delimiter: primaries[7],\n            delimiter: primaries[8],</old_text>\n<new_text>            delimiter: primaries[400],\n            delimiter: primaries[300],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/syntax_light.ts</path>\n<description>Update references to primaries array indices</description>\n<old_text>            default: primaries[4],\n            builtin: primaries[6],</old_text>\n<new_text>            default: primaries[600],\n            builtin: primaries[400],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/syntax_light.ts</path>\n<old_text>            attribute: primaries[4],\n            delimiter: primaries[3],</old_text>\n<new_text>            attribute: primaries[600],\n            delimiter: primaries[700],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/ui_dark.ts</path>\n<description>Update references to primaries array indices</description>\n<old_text>            default: primaries[1],\n            panel: primaries[0],\n            float: primaries[0],\n            active: primaries[2],\n            disabled: primaries[4],\n            hover: primaries[2],\n            selection: primaries[3],\n            search: primaries[3],\n            contrast: primaries[10],</old_text>\n<new_text>            default: primaries[800],\n            panel: primaries[900],\n            float: primaries[900],\n            active: primaries[700],\n            disabled: primaries[600],\n            hover: primaries[700],\n            selection: primaries[600],\n            search: primaries[600],\n            contrast: primaries[200],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/ui_dark.ts</path>\n<old_text>            default: primaries[10],\n            subtle: primaries[8],\n            disabled: primaries[6],\n            accent: palette.yellow,\n            contrast: primaries[1],</old_text>\n<new_text>            default: primaries[200],\n            subtle: primaries[300],\n            disabled: primaries[400],\n            accent: palette.yellow,\n            contrast: primaries[800],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/ui_light.ts</path>\n<description>Update references to primaries array indices</description>\n<old_text>            default: primaries[10],\n            panel: primaries[9],\n            float: primaries[9],\n            active: primaries[8],\n            disabled: primaries[7],\n            hover: primaries[8],\n            selection: primaries[8],\n            search: primaries[8],\n            contrast: primaries[1],</old_text>\n<new_text>            default: primaries[200],\n            panel: primaries[300],\n            float: primaries[300],\n            active: primaries[300],\n            disabled: primaries[400],\n            hover: primaries[300],\n            selection: primaries[300],\n            search: primaries[300],\n            contrast: primaries[800],</new_text>\n</edit>\n\n<edit>\n<path>core/src/themes/jpn/ui_light.ts</path>\n<old_text>            default: primaries[1],\n            subtle: primaries[3],\n            disabled: primaries[5],\n            accent: palette.yellow,\n            contrast: primaries[10],</old_text>\n<new_text>            default: primaries[800],\n            subtle: primaries[700],\n            disabled: primaries[500],\n            accent: palette.yellow,\n            contrast: primaries[200],</new_text>\n</edit>\n\n</patch>\n\nThis patch:\n1. Redefines the Primaries type as an indexed object with values from 100 (brightest) to 900 (darkest)\n2. Updates all theme definition files to use the new object format\n3. Updates all references to primaries array indices to use the new numbered keys\n4. Maintains consistent color scales across all themes while converting to the new format\n\nThe scale is now more intuitive, with lower numbers representing lighter colors and higher numbers representing darker colors, following common design system conventions.\n",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 295 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 135 },
      "start": 30210,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 296 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 136 },
      "start": 38465,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 297 }
      }
    }
  ],
  "summary": "Refactor Theme Primaries Array Object",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 3, "end": 29807 },
      "icon": "Folder",
      "label": "core/src",
      "metadata": null
    },
    {
      "range": { "start": 12, "end": 3618 },
      "icon": "File",
      "label": "core/src/cli.ts",
      "metadata": { "path": "core/src/cli.ts" }
    },
    {
      "range": { "start": 3619, "end": 3871 },
      "icon": "File",
      "label": "core/src/config.ts",
      "metadata": { "path": "core/src/config.ts" }
    },
    {
      "range": { "start": 3872, "end": 5925 },
      "icon": "Folder",
      "label": "lib",
      "metadata": null
    },
    {
      "range": { "start": 3876, "end": 4528 },
      "icon": "File",
      "label": "core/src/lib/log.ts",
      "metadata": { "path": "core/src/lib/log.ts" }
    },
    {
      "range": { "start": 4529, "end": 5924 },
      "icon": "File",
      "label": "core/src/lib/template.ts",
      "metadata": { "path": "core/src/lib/template.ts" }
    },
    {
      "range": { "start": 5926, "end": 6546 },
      "icon": "Folder",
      "label": "schemas",
      "metadata": null
    },
    {
      "range": { "start": 5934, "end": 6545 },
      "icon": "File",
      "label": "core/src/schemas/adapter.ts",
      "metadata": { "path": "core/src/schemas/adapter.ts" }
    },
    {
      "range": { "start": 6547, "end": 24365 },
      "icon": "Folder",
      "label": "themes",
      "metadata": null
    },
    {
      "range": { "start": 6554, "end": 12084 },
      "icon": "Folder",
      "label": "corp",
      "metadata": null
    },
    {
      "range": { "start": 6559, "end": 7809 },
      "icon": "File",
      "label": "core/src/themes/corp/black-atom-corp-eng.ts",
      "metadata": { "path": "core/src/themes/corp/black-atom-corp-eng.ts" }
    },
    {
      "range": { "start": 7810, "end": 10793 },
      "icon": "File",
      "label": "core/src/themes/corp/syntax_dark.ts",
      "metadata": { "path": "core/src/themes/corp/syntax_dark.ts" }
    },
    {
      "range": { "start": 10794, "end": 12083 },
      "icon": "File",
      "label": "core/src/themes/corp/ui_dark.ts",
      "metadata": { "path": "core/src/themes/corp/ui_dark.ts" }
    },
    {
      "range": { "start": 12085, "end": 24364 },
      "icon": "Folder",
      "label": "jpn",
      "metadata": null
    },
    {
      "range": { "start": 12089, "end": 13345 },
      "icon": "File",
      "label": "core/src/themes/jpn/black-atom-jpn-koyo-hiru.ts",
      "metadata": { "path": "core/src/themes/jpn/black-atom-jpn-koyo-hiru.ts" }
    },
    {
      "range": { "start": 13346, "end": 14595 },
      "icon": "File",
      "label": "core/src/themes/jpn/black-atom-jpn-koyo-yoru.ts",
      "metadata": { "path": "core/src/themes/jpn/black-atom-jpn-koyo-yoru.ts" }
    },
    {
      "range": { "start": 14596, "end": 15848 },
      "icon": "File",
      "label": "core/src/themes/jpn/black-atom-jpn-tsuki-yoru.ts",
      "metadata": { "path": "core/src/themes/jpn/black-atom-jpn-tsuki-yoru.ts" }
    },
    {
      "range": { "start": 15849, "end": 18837 },
      "icon": "File",
      "label": "core/src/themes/jpn/syntax_dark.ts",
      "metadata": { "path": "core/src/themes/jpn/syntax_dark.ts" }
    },
    {
      "range": { "start": 18838, "end": 21782 },
      "icon": "File",
      "label": "core/src/themes/jpn/syntax_light.ts",
      "metadata": { "path": "core/src/themes/jpn/syntax_light.ts" }
    },
    {
      "range": { "start": 21783, "end": 23072 },
      "icon": "File",
      "label": "core/src/themes/jpn/ui_dark.ts",
      "metadata": { "path": "core/src/themes/jpn/ui_dark.ts" }
    },
    {
      "range": { "start": 23073, "end": 24363 },
      "icon": "File",
      "label": "core/src/themes/jpn/ui_light.ts",
      "metadata": { "path": "core/src/themes/jpn/ui_light.ts" }
    },
    {
      "range": { "start": 24366, "end": 29807 },
      "icon": "Folder",
      "label": "types",
      "metadata": null
    },
    {
      "range": { "start": 24372, "end": 24443 },
      "icon": "File",
      "label": "core/src/types/color.ts",
      "metadata": { "path": "core/src/types/color.ts" }
    },
    {
      "range": { "start": 24444, "end": 29806 },
      "icon": "File",
      "label": "core/src/types/theme.ts",
      "metadata": { "path": "core/src/types/theme.ts" }
    }
  ]
}
