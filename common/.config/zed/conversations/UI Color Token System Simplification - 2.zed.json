{
  "id": "5f1ba96c-bbe9-41ab-9708-ae59de70d819",
  "zed": "context",
  "version": "0.4.0",
  "text": "\n\n\nHi there again,\n\nI want to rework the UI color tokens.\n\nI want to keep it as simple as possible, while also trying to remain flexible.\n\nHere is what I come up with my self.\n\n## V1 - Simple as shit tokens\n\nThe simplest token system I can think of.\n\nImportant would be that every fg token needs enough contrast to every bg token.\n\n<!-- prettier-ignore -->\n```yml\nbg:\n  primary: \"string\"                                  # Primary background for UI elements\n  secondary: \"string\"                                # Secondary background for sidebars and floating windows\n  active: \"string\"                                   # Active elements like active tab or cursorline\n  selection: \"string\"                                # Visual selection\n  search: \"string\"                                   # Search background\n  overlay: \"string\"                                  # Layer atop surface for temporary elements like popovers & notifications\n  contrast: \"string\"                                 # Inverted background\n  error: \"string\"                                    # Feedback - Errors\n  warn: \"string\"                                     # Feedback - Warnings\n  info: \"string\"                                     # Feedback - Information\n  hint: \"string\"                                     # Feedback - Hints\n  success: \"string\"                                  # Feedback - Success\n  add: \"string\"                                      # Version control - added\n  delete: \"string\"                                   # Version control - deleted\n  modify: \"string\"                                   # Version control - modified\nfg:\n  primary: \"string\"                                  # Primary text\n  secondary: \"string\"                                # Secondary text like comments and other secondary information\n  muted: \"string\"                                    # For disabled and unfocused text\n  accent: \"string\"                                   # For links and other text that needs to stand out\n  contrast: \"string\"                                 # Inverted which is also used on colored backgrounds like feedback\n  error: \"string\"                                    # Feedback - Errors\n  warn: \"string\"                                     # Feedback - Warnings\n  info: \"string\"                                     # Feedback - Information\n  hint: \"string\"                                     # Feedback - Hints\n  success: \"string\"                                  # Feedback - Success\n  add: \"string\"                                      # Version control - added\n  delete: \"string\"                                   # Version control - deleted\n  modify: \"string\"                                   # Version control - modified\n```\n\nThis would be same, but with little sub groups for feedback and git.\n\n<!-- prettier-ignore -->\n```yml\nbg:\n  primary: \"string\"                                  # Primary background for UI elements\n  secondary: \"string\"                                # Secondary background for sidebars and floating windows\n  active: \"string\"                                   # Active elements like active tab or cursorline\n  selection: \"string\"                                # Visual selection\n  search: \"string\"                                   # Search background\n  overlay: \"string\"                                  # Layer atop surface for temporary elements like popovers & notifications\n  contrast: \"string\"                                 # Inverted background\n  feedback:\n    error: \"string\"                                  # Feedback - Errors\n    warn: \"string\"                                   # Feedback - Warnings\n    info: \"string\"                                   # Feedback - Information\n    hint: \"string\"                                   # Feedback - Hints\n    success: \"string\"                                # Feedback - Success\n  git:\n    add: \"string\"                                    # Version control - added\n    delete: \"string\"                                 # Version control - deleted\n    modify: \"string\"                                 # Version control - modified\nfg:\n  primary: \"string\"                                  # Primary text\n  secondary: \"string\"                                # Secondary text like comments and other secondary information\n  muted: \"string\"                                    # For disabled and unfocused text\n  accent: \"string\"                                   # For links and other text that needs to stand out\n  contrast: \"string\"                                 # Inverted which is also used on colored backgrounds like feedback\n  feedback:\n    error: \"string\"                                  # Feedback - Errors\n    warn: \"string\"                                   # Feedback - Warnings\n    info: \"string\"                                   # Feedback - Information\n    hint: \"string\"                                   # Feedback - Hints\n    success: \"string\"                                # Feedback - Success\n  git:\n    add: \"string\"                                    # Version control - added\n    delete: \"string\"                                 # Version control - deleted\n    modify: \"string\"                                 # Version control - modified\n```\n\n## Resources\n\n/fetch  https://rosepinetheme.com/palette/\n\n---\n\nThis is what I currently have:\n\n```lua nvim/lua/black-atom/themes/default/ui_dark.lua\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = primaries[4],\n            match = {\n                active = palette.yellow,\n                passive = primaries[5],\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = palette.dark_yellow,\n            invert = primaries[2],\n            neutral = primaries[6],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/themes/default/ui_light.lua\nlocal darken = require(\"black-atom.lib.color\").darken\n\n---@param primaries BlackAtom.Theme.Primaries\n---@param palette BlackAtom.Theme.Palette\n---@return BlackAtom.Theme.UI\nreturn function(primaries, palette)\n    return {\n        bg = {\n            primary = {\n                dark = primaries[10],\n                main = primaries[11],\n                light = primaries[12],\n            },\n            secondary = {\n                dark = primaries[7],\n                main = primaries[8],\n                light = primaries[9],\n            },\n            active = primaries[5],\n            match = {\n                active = darken(palette.green, 0.25, primaries[11]),\n                passive = darken(palette.magenta, 0.15, primaries[11]),\n            },\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        fg = {\n            primary = {\n                dark = primaries[1],\n                main = primaries[2],\n                light = primaries[3],\n            },\n            secondary = {\n                dark = primaries[4],\n                main = primaries[5],\n                light = primaries[6],\n            },\n            active = palette.red,\n            invert = primaries[11],\n            neutral = primaries[7],\n            diff = {\n                add = palette.green,\n                delete = palette.red,\n                change = palette.blue,\n                text = palette.dark_blue,\n            },\n        },\n        feedback = {\n            error = palette.red,\n            warn = palette.yellow,\n            info = palette.blue,\n            hint = palette.dark_yellow,\n            todo = palette.yellow,\n            success = palette.green,\n        },\n    }\nend\n```\n\n```lua nvim/lua/black-atom/types.lua\n-- vim: set colorcolumn=64:\n\n---@alias BlackAtom.Theme.Key\n---| \"black-atom-engineering\"\n---| \"black-atom-operations\"\n---| \"black-atom-medical\"\n---| \"black-atom-research\"\n---| \"black-atom-jpn-koyo-yoru\"\n---| \"black-atom-jpn-koyo-hiru\"\n---| \"black-atom-jpn-tsuki-yoru\"\n---| \"black-atom-mono-one-dark\"\n---| \"black-atom-crbn-null\"\n---| \"black-atom-crbn-supr\"\n---| \"terra-spring-day\"\n---| \"terra-spring-night\"\n---| \"terra-fall-day\"\n---| \"terra-fall-night\"\n---| \"terra-summer-day\"\n---| \"terra-summer-night\"\n---| \"terra-winter-day\"\n---| \"terra-winter-night\"\n\n---@alias BlackAtom.Theme.Collection.Key\n---| \"default\"\n---| \"terra\"\n---| \"jpn\"\n---| \"mono\"\n---| \"crbn\"\n\n---@class BlackAtom.HighlightDefinition\n---@field fg?                                                   string\n---@field bg?                                                   string\n---@field sp?                                                   string\n---@field bold?                                                 boolean\n---@field italic?                                               boolean\n---@field blend?                                                integer\n---@field standout?                                             boolean\n---@field underline?                                            boolean\n---@field undercurl?                                            boolean\n---@field underdouble?                                          boolean\n---@field underdotted?                                          boolean\n---@field underdashed?                                          boolean\n---@field strikethrough?                                        boolean\n---@field reverse?                                              boolean\n---@field link?                                                 string\n\n---@alias BlackAtom.Highlights                                  table<string, BlackAtom.HighlightDefinition>\n\n---@alias BlackAtom.HighlightMapExtension.map                   fun(colors: BlackAtom.Theme.Colors, config: BlackAtom.Config): BlackAtom.Highlights\n\n---@class BlackAtom.HighlightsSpec\n---@field enabled?                                              boolean Default: true\n---@field map                                                   BlackAtom.HighlightMapExtension.map\n\n---@class BlackAtom.Theme.Primaries                             string[]\n\n---@class BlackAtom.Theme.Palette\n---@field black                                                 string\n---@field gray                                                  string\n---@field dark_red                                              string\n---@field red                                                   string\n---@field dark_green                                            string\n---@field green                                                 string\n---@field dark_yellow                                           string\n---@field yellow                                                string\n---@field dark_blue                                             string\n---@field blue                                                  string\n---@field dark_magenta                                          string\n---@field magenta                                               string\n---@field dark_cyan                                             string\n---@field cyan                                                  string\n---@field light_gray                                            string\n---@field white                                                 string\n\n---@class BlackAtom.Theme.UI.Git\n---@field add                                                   string\n---@field delete                                                string\n---@field change                                                string\n---@field text                                                  string\n\n---@class BlackAtom.Theme.UI.Shades\n---@field dark                                                  string\n---@field main                                                  string\n---@field light                                                 string\n--\n---@class BlackAtom.Theme.UI.Background.Match\n---@field active                                                string Used for highlighting matches in the foreground for like visual selections\n---@field passive                                               string Used for highlighting matches in the background like for illuminate\n\n---@class BlackAtom.Theme.UI.Background\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field match                                                 BlackAtom.Theme.UI.Background.Match\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Foreground\n---@field primary                                               BlackAtom.Theme.UI.Shades\n---@field secondary                                             BlackAtom.Theme.UI.Shades\n---@field active                                                string\n---@field neutral                                               string\n---@field invert                                                string\n---@field diff                                                  BlackAtom.Theme.UI.Git\n\n---@class BlackAtom.Theme.UI.Feedback\n---@field error                                                 string\n---@field warn                                                  string\n---@field info                                                  string\n---@field hint                                                  string\n---@field todo                                                  string\n---@field success                                               string\n\n---@class BlackAtom.Theme.UI\n---@field bg                                                    BlackAtom.Theme.UI.Background\n---@field fg                                                    BlackAtom.Theme.UI.Foreground\n---@field feedback                                              BlackAtom.Theme.UI.Feedback\n\n---@class BlackAtom.Theme.Syntax.Markup\n---@field heading                                               { h1: string, h2: string, h3: string, h4: string, h5: string, h6: string }\n---@field quote                                                 string\n---@field math                                                  string\n---@field link                                                  string\n---@field code                                                  { fg: string, bg: string }\n---@field list                                                  { default: string, checked: string, unchecked: string }\n\n\n---@class BlackAtom.Theme.Syntax\n---@field variable                                              { default: string, builtin: string, parameter: string, member: string }\n---@field string                                                { default: string, documentation: string, regexp: string, escape: string }\n---@field boolean                                               { default: string }\n---@field number                                                { default: string }\n---@field property                                              { default: string }\n---@field constant                                              { default: string, builtin: string }\n---@field module                                                { default: string }\n---@field type                                                  { default: string, builtin: string }\n---@field attribute                                             { default: string, builtin: string }\n---@field func                                                  { default: string, builtin: string, method: string }\n---@field constructor                                           { default: string }\n---@field operator                                              { default: string }\n---@field keyword                                               { default: string, import: string, export: string }\n---@field punctuation                                           { default: string, delimiter: string, bracket: string, special: string }\n---@field comment                                               { default: string, doc: string, todo: string, error: string, warn: string, info: string, hint: string }\n---@field tag                                                   { default: string, builtin: string, delimiter: string, attribute: string }\n---@field markup                                                BlackAtom.Theme.Syntax.Markup\n\n---@class BlackAtom.Theme.Colors\n---@field none                                                  \"NONE\"\n---@field primaries                                             BlackAtom.Theme.Primaries\n---@field palette                                               BlackAtom.Theme.Palette\n---@field ui                                                    BlackAtom.Theme.UI\n---@field syntax                                                BlackAtom.Theme.Syntax\n\n---@class BlackAtom.Theme.Meta\n---@field key                                                   BlackAtom.Theme.Key\n---@field label                                                 string Display name\n---@field collection                                            { key: BlackAtom.Theme.Collection.Key, label: string }\n---@field appearance                                            \"light\" | \"dark\"\n---@field status                                                \"development\" | \"beta\" | \"release\" Status of the theme\n---@field icon                                                  string Icon to display in the UI\n\n---@class BlackAtom.Theme.Definition\n---@field colors                                                BlackAtom.Theme.Colors\n---@field meta                                                  BlackAtom.Theme.Meta\n\n---@class BlackAtom.Config.SyntaxStyle\n---@field comments?                                             BlackAtom.HighlightDefinition\n---@field keywords?                                             BlackAtom.HighlightDefinition\n---@field functions?                                            BlackAtom.HighlightDefinition\n---@field strings?                                              BlackAtom.HighlightDefinition\n---@field variables?                                            BlackAtom.HighlightDefinition\n---@field messages?                                             BlackAtom.HighlightDefinition\n\n---@class BlackAtom.Config.Diagnostics\n---@field undercurl?                                            boolean Wether to use undercurls for diagnostics (Default: false)\n---@field background?                                           boolean Wether to use background color for virtual text (Default: false)\n\n---@class BlackAtom.Config.Styles\n---@field cmp_kind_color_mode?                                  \"fg\" | \"bg\" (Default: \"fg\")\n---@field dark_sidebars?                                        boolean Wether to use dark sidebars (Default: true)\n---@field transparency?                                         \"full\" | \"partial\" | \"none\" Transparency level (Default: \"none\")\n---@field diagnostics?                                          BlackAtom.Config.Diagnostics Diagnostics related settings (Default: See Documentation)\n---@field syntax?                                               BlackAtom.Config.SyntaxStyle Syntax styling options (Default: See Documentation)\n---@field ending_tildes?                                        boolean Wether to show the end-of-buffer tildes (Default: false)\n\n---@class BlackAtom.Config\n---@field debug?                                                boolean Enables the Debug Mode (Enables various debug messages) (Default: false)\n---@field theme?                                                BlackAtom.Theme.Key\n---@field collection?                                           BlackAtom.Theme.Collection.Key\n---@field term_colors?                                          boolean Wether to enable terminal colors (Default: true)\n---@field styles?                                               BlackAtom.Config.Styles Various styles related settings (Default: See Documentation)\n\n```\n\n\nThis and some other places is where I use the ui color tokens. \n\nnvim/lua/black-atom/highlights\n```lua nvim/lua/black-atom/highlights/lsp.lua\n---@type BlackAtom.HighlightsSpec\nlocal highlight_map_extension = {\n    map = function(colors, config)\n        local cond_hl = require(\"black-atom.lib.highlights\").cond_hl\n        local darken = require(\"black-atom.lib.color\").darken\n        local styles = config.styles or {}\n\n        local diagnostics_error_color = colors.palette.red\n        local diagnostics_warn_color = colors.palette.yellow\n        local diagnostics_hint_color = colors.palette.blue\n        local diagnostics_info_color = colors.palette.green\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            LspCxxHlGroupEnumConstant = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupMemberVariable = { fg = colors.palette.dark_yellow },\n            LspCxxHlGroupNamespace = { fg = colors.palette.blue },\n            LspCxxhighlightskippedRegion = { fg = colors.palette.gray },\n            LspCxxhighlightskippedRegionBeginEnd = { fg = colors.palette.red },\n\n            DiagnosticError = { fg = colors.palette.red },\n            DiagnosticHint = { fg = colors.palette.blue },\n            DiagnosticInfo = { fg = colors.palette.cyan },\n            DiagnosticWarn = { fg = colors.palette.yellow },\n\n            DiagnosticVirtualTextError = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_error_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_error_color,\n            },\n            DiagnosticVirtualTextWarn = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_warn_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_warn_color,\n            },\n            DiagnosticVirtualTextInfo = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_info_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_info_color,\n            },\n            DiagnosticVirtualTextHint = {\n                bg = cond_hl(colors.none, {\n                    [styles.diagnostics.background] = darken(diagnostics_hint_color, 0.1, colors.ui.bg.primary.main),\n                }),\n                fg = diagnostics_hint_color,\n            },\n\n            DiagnosticUnderlineError = {\n                sp = colors.palette.red,\n                config.styles.diagnostics.undercurl and { undercurl = true },\n            },\n            DiagnosticUnderlineHint = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineInfo = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.blue,\n            },\n            DiagnosticUnderlineWarn = {\n                config.styles.diagnostics.undercurl and { undercurl = true },\n                sp = colors.palette.yellow,\n            },\n\n            LspReferenceText = { underline = true },\n            LspReferenceWrite = { underline = true },\n            LspReferenceRead = { underline = true },\n\n            LspCodeLens = { fg = colors.palette.gray },\n            LspCodeLensSeparator = { fg = colors.palette.gray },\n\n            LspDiagnosticsDefaultError = { link = \"DiagnosticError\" },\n            LspDiagnosticsDefaultHint = { link = \"DiagnosticHint\" },\n            LspDiagnosticsDefaultInformation = { link = \"DiagnosticInfo\" },\n            LspDiagnosticsDefaultWarning = { link = \"DiagnosticWarn\" },\n            LspDiagnosticsUnderlineError = { link = \"DiagnosticUnderlineError\" },\n            LspDiagnosticsUnderlineHint = { link = \"DiagnosticUnderlineHint\" },\n            LspDiagnosticsUnderlineInformation = {\n                link = \"DiagnosticUnderlineInfo\",\n            },\n            LspDiagnosticsUnderlineWarning = { link = \"DiagnosticUnderlineWarn\" },\n            LspDiagnosticsVirtualTextError = { link = \"DiagnosticVirtualTextError\" },\n            LspDiagnosticsVirtualTextWarning = {\n                link = \"DiagnosticVirtualTextWarn\",\n            },\n            LspDiagnosticsVirtualTextInformation = {\n                link = \"DiagnosticVirtualTextInfo\",\n            },\n            LspDiagnosticsVirtualTextHint = { link = \"DiagnosticVirtualTextHint\" },\n        }\n\n        return highlights_map\n    end,\n}\n\nreturn highlight_map_extension\n```\n\nplugins\n```lua nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua\n--[[\n    Hello there!\n    Thank you for wanting to contribute to the black-atom.nvim plugin!\n\n    To create a new highlight map for your plugin, simply copy this template\n    and rename it to a suitable name, such as \"my_plugin.lua\".\n\n    You don't need to require this file anywhere manually, since every lua file\n    in the `lua/black-atom/highlights/plugins/` folder will be loaded automatically.\n    Note: Filenames ending with \"_template.lua\" will be disregarded!\n\n    Each highlight file must return a `BlackAtom.HighlightsSpec` table,\n    which at a minimum, should contain a field called `map`.\n    The `BlackAtom.HighlightsSpec` and `BlackAtom.Highlights` types\n    will assist with completion and type checking.\n    (Ensure the `lua-language-server` is installed for this to work.)\n\n    The `enabled` field is optional and defaults to true.\n    The `map` function needs to return a `BlackAtom.Highlights` table.\n    It receives the colors and config tables as parameters,\n    which gives you access to all the colors and config options.\n    -- `colors` is a table containing the color palette.\n    -- `config` is a table containing configuration options.\n\n    IMPORTANT: When you add a new plugin file, and run the `./update_supported_plugins.sh` script,\n    it will be automatically included in the Supported Plugins section of the README.md file.\n    This is a great way to showcase your contribution and help others discover new plugin support!\n\n    To ensure this automatic process works correctly, please follow these guidelines:\n\n    1. Add a @doc comment with the plugin's GitHub URL at the top of the file:\n       ---@doc https://github.com/username/plugin-name\n\n    2. Ensure that the highlight groups are returned in the specific structure:\n\n    ---@type BlackAtom.Highlights\n    return {\n        HighlightGroup1 = { ... }, -- Each line in this block after `---@type BlackAtom.Highlights` will be counted.\n        HighlightGroup2 = { ... },\n        ...\n    }\n\n    This structure allows our script to accurately count the number of highlight groups\n    for each plugin and update the README.md file accordingly.\n\n    NAMING CONVENTION: Please name your plugin highlight file name like your plugin name. Replace dots with underscores.\n    For example: `telescope.nvim` => `telescope_nvim.lua`\n\n    After you have finished your highlight map, you can test it by running Neovim in a separate window\n    and see if your highlights are applied correctly, or turn on `debug` mode\n    in the config file to see a generated file with all highlights.\n    This will be placed in the `debug` folder placed at the root of the plugin.\n\n    For further assistance or questions, consider reaching out through the project's GitHub repository.\n]]\n\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        -- There are also helper functions for common background colors, which are dependent on the config\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local p = colors.palette -- These are semantic color tokens for the palette\n        local ui = colors.ui -- These are semantic color tokens for the UI\n        local s = colors.syntax -- These are semantic color tokens for the syntax\n\n        -- IMPORTANT: Ensure the highlight groups are returned in the correct structure so that the script to automatically generate the README.md file can work correctly\n        ---@type BlackAtom.Highlights\n        return {\n            MyHighlightGroup = { fg = ui.fg.primary.main },\n            MyFloatBorder = { fg = p.green, bg = bg_dark },\n            MyDimmedHighlightGroup = { fg = ui.fg.neutral },\n            MyHighlightGroupWithUnderline = { fg = ui.fg.primary.main, underline = true },\n            MyVariableKindSymbol = { fg = s.variable.default },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua\n---@doc https://github.com/otavioschwanck/arrow.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            ArrowCurrentFile = { fg = p.yellow, bold = true },\n            ArrowFileIndex = { fg = p.cyan },\n            ArrowAction = { fg = p.dark_yellow },\n            ArrowDeleteMode = { fg = p.red, bold = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/blink_nvim.lua\n---@doc https://github.com/saghen/blink.cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local fg = colors.ui.fg\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            BlinkCmpMenu = { bg = bg.dark(config, colors) },\n            BlinkCmpLabel = { fg = fg.primary.main, bg.main(config, colors) },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            highlights_map[\"BlinkCmpKind\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua\n---@doc https://github.com/nvimdev/dashboard-nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            DashboardShortCut = { fg = colors.palette.blue },\n            DashboardHeader = { fg = colors.palette.yellow },\n            DashboardCenter = { fg = colors.palette.cyan },\n            DashboardFooter = { fg = colors.palette.dark_red, italic = true },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua\n---@doc https://github.com/sindrets/diffview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            DiffviewFilePanelTitle = { fg = p.blue, bold = true },\n            DiffviewFilePanelCounter = { fg = p.magenta, bold = true },\n            DiffviewFilePanelFileName = { fg = ui.fg.primary.main },\n            DiffviewNormal = { link = \"Normal\" },\n            DiffviewCursorLine = { link = \"CursorLine\" },\n            DiffviewVertSplit = { link = \"VertSplit\" },\n            DiffviewSignColumn = { link = \"SignColumn\" },\n            DiffviewStatusLine = { link = \"StatusLine\" },\n            DiffviewStatusLineNC = { link = \"StatusLineNC\" },\n            DiffviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            DiffviewFilePanelRootPath = { fg = p.gray },\n            DiffviewFilePanelPath = { fg = p.gray },\n            DiffviewFilePanelInsertions = { fg = p.green },\n            DiffviewFilePanelDeletions = { fg = p.red },\n            DiffviewStatusAdded = { fg = p.green },\n            DiffviewStatusUntracked = { fg = p.blue },\n            DiffviewStatusModified = { fg = p.blue },\n            DiffviewStatusRenamed = { fg = p.blue },\n            DiffviewStatusCopied = { fg = p.blue },\n            DiffviewStatusTypeChange = { fg = p.blue },\n            DiffviewStatusUnmerged = { fg = p.blue },\n            DiffviewStatusUnknown = { fg = p.red },\n            DiffviewStatusDeleted = { fg = p.red },\n            DiffviewStatusBroken = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua\n---@doc https://github.com/folke/edgy.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg_sidebar = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            EdgyNormal = { fg = fg.primary.main, bg = bg_sidebar },\n            EdgyTitle = { link = \"EdgyNormal\" },\n            EdgyIcon = { link = \"EdgyNormal\" },\n            EdgyIconActive = { fg = fg.active, bg = bg_sidebar },\n            EdgyWinBar = { fg = fg.active, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/flash.lua\n---@doc https://github.com/folke/flash.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = false,\n    map = function(colors, config)\n        local ui = colors.ui\n        local palette = colors.palette\n\n        -- FlashBackdrop     Comment      backdrop\n        -- FlashMatch        Search       search matches\n        -- FlashCurrent      IncSearch    current match\n        -- FlashLabel        Substitute   jump label\n        -- FlashPrompt       MsgArea      prompt\n        -- FlashPromptIcon   Special      prompt icon\n        -- FlashCursor       Cursor       cursor\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            FlashMatch = { fg = ui.fg.invert, bg = palette.dark_magenta },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/fzflua.lua\n---@doc https://github.com/ibhagwan/fzf-lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local lib = require(\"black-atom.lib\")\n        local fg = colors.ui.fg\n        local bg = colors.ui.bg\n        local bg_dark = lib.bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            FzfLuaNormal = { fg = fg.primary.main, bg = bg_dark },\n            FzfLuaTitle = { fg = fg.active, bg = bg_dark },\n            FzfLuaBorder = { link = \"FloatBorder\" },\n            FzfLuaPreviewBorder = { link = \"FloatBorder\" },\n            FzfLuaCursorLine = { bg = bg.primary.main },\n            FzfLuaDirPart = { fg = fg.neutral },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua\n---@doc https://github.com/lewis6991/gitsigns.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitSignsAdd = { fg = p.green },\n            GitSignsAddLn = { fg = p.green },\n            GitSignsAddNr = { fg = p.green },\n            GitSignsChange = { fg = p.blue },\n            GitSignsChangeLn = { fg = p.blue },\n            GitSignsChangeNr = { fg = p.blue },\n            GitSignsDelete = { fg = p.red },\n            GitSignsDeleteLn = { fg = p.red },\n            GitSignsDeleteNr = { fg = p.red },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/glance_nvim.lua\n---@doc https://github.com/DNLHC/glance.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local bg = colors.ui.bg\n        local bg_main = bg.primary.main\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_main = fg.primary.main\n        local fg_neutral = fg.neutral\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        local border_style = { fg = fg.active, bg = bg_dark }\n\n        local neutral_element_style = { fg = fg_neutral, bg = bg.primary.dark }\n        local file_name_style = { fg = fg_active, bg = bg.primary.dark }\n        local file_path_style = neutral_element_style\n        local match_style = { bg = bg.match.active }\n\n        local preview_bg = bg_main\n        local preview_normal_style = { fg = fg_main, bg = preview_bg }\n        local list_bg = bg_dark\n        local list_normal_style = { fg = fg_active, bg = list_bg }\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- Preview (The preview of the file)\n            GlancePreviewNormal = preview_normal_style,\n            GlancePreviewMatch = match_style,\n            GlancePreviewCursorLine = { link = \"CursorLine\" },\n            GlancePreviewSignColumn = { link = \"SignColumn\" },\n            GlancePreviewEndOfBuffer = { link = \"EndOfBuffer\" },\n            GlancePreviewLineNr = { link = \"LineNr\" },\n            GlancePreviewBorderBottom = border_style,\n\n            -- WindowBar\n            GlanceWinBarFilename = file_name_style,\n            GlanceWinBarFilepath = file_path_style,\n            GlanceWinBarTitle = { fg = fg_active, bg = bg_dark },\n\n            -- List (The list of affected files and references)\n            GlanceListNormal = list_normal_style,\n            GlanceListFilename = file_name_style,\n            GlanceListFilepath = file_path_style,\n            GlanceListCount = { fg = fg_active },\n            GlanceListMatch = match_style,\n            GlanceListCursorLine = { link = \"CursorLine\" },\n            GlanceListEndOfBuffer = { bg = list_bg },\n            GlanceListBorderBottom = border_style,\n\n            -- Other\n            GlanceFoldIcon = { fg = palette.blue },\n            GlanceIndent = { fg = fg.neutral, bg = list_bg },\n            GlanceBorderTop = border_style,\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/incline_nvim.lua\n---@doc https://github.com/b0o/incline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            InclineNormal = {\n                fg = colors.ui.fg.active,\n                bg = colors.ui.bg.primary.dark,\n                bold = true,\n            },\n            InclineNormalNC = {\n                fg = colors.ui.fg.neutral,\n                bg = colors.ui.bg.primary.dark,\n            },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua\n---@doc https://github.com/lukas-reineke/indent-blankline.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        ---@type BlackAtom.Highlights\n        return {\n            IndentBlanklineChar = { fg = colors.ui.fg.neutral },\n            IndentBlanklineContextChar = { fg = colors.ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/markview_nvim.lua\n---@doc https://github.com/OXY2DEV/markview.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            MarkviewCode = { bg = s.markup.code.bg },\n            MarkviewInlineCode = { bg = s.markup.code.bg },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg_main = require(\"black-atom.lib\").bg.main(config, colors)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            -- mini.pick\n            MiniPickPrompt = { bg = bg_dark },\n            MiniPickMatchCurrent = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/mini_nvim.lua\n---@doc https://github.com/echasnovski/mini.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            ---@doc https://github.com/echasnovski/mini.indentscope\n            MiniIndentscopeSymbol = { fg = ui.fg.active },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua\n---@doc https://github.com/nvim-neo-tree/neo-tree.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_dark = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NeoTreeNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeNormalNC = { fg = ui.fg.neutral, bg = bg_dark },\n            NeoTreeWinSeparator = { fg = bg_main },\n            NeoTreeCursorLine = { bg = bg_main },\n            NeoTreeDotfile = { fg = ui.fg.neutral },\n            NeoTreeEndOfBuffer = { fg = bg_dark },\n            NeoTreeFileName = { fg = ui.fg.primary.main },\n            NeoTreeFloatBorder = { fg = bg_dark, bg = bg_dark },\n            NeoTreeFloatNormal = { fg = ui.fg.primary.main, bg = bg_dark },\n            NeoTreeGitConflict = { fg = ui.fg.diff.change },\n            NeoTreeGitIgnored = { fg = ui.fg.neutral, italic = true },\n            NeoTreeGitUntracked = { fg = ui.fg.diff.add },\n            NeoTreeTitleBar = { fg = ui.fg.neutral, bg = bg_dark },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua\n---@doc https://github.com/hrsh7th/nvim-cmp\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local p = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            CmpItemAbbr = { fg = colors.ui.fg.primary.main },\n            CmpItemAbbrDeprecated = { fg = p.light_gray, strikethrough = true },\n            CmpItemAbbrMatch = { fg = p.cyan },\n            CmpItemAbbrMatchFuzzy = { fg = p.cyan, underline = true },\n            CmpItemMenu = { fg = colors.ui.fg.primary.main },\n            CmpItemKind = { fg = p.magenta },\n        }\n\n        local lsp_kind_icons_color = {\n            Class = p.yellow,\n            Color = p.green,\n            Constant = p.dark_yellow,\n            Constructor = p.blue,\n            Default = p.magenta,\n            Enum = p.magenta,\n            EnumMember = p.yellow,\n            Event = p.yellow,\n            Field = p.magenta,\n            File = p.blue,\n            Folder = p.dark_yellow,\n            Function = p.blue,\n            Interface = p.cyan,\n            Keyword = p.magenta,\n            Method = p.yellow,\n            Module = p.dark_yellow,\n            Operator = p.magenta,\n            Property = p.cyan,\n            Reference = p.dark_yellow,\n            Snippet = p.red,\n            Struct = p.magenta,\n            Text = p.light_gray,\n            TypeParameter = p.red,\n            Unit = p.green,\n            Value = p.dark_yellow,\n            Variable = p.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons_color) do\n            if config.styles.cmp_kind_color_mode == \"fg\" then\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = color }\n            else\n                highlights_map[\"CmpItemKind\" .. kind] = { fg = colors.ui.fg.invert, bg = color }\n            end\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua\n---@doc https://github.com/SmiteshP/nvim-navbuddy\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local match_style = { bg = colors.ui.bg.match.active }\n\n        local bg = colors.ui.bg\n        local bg_dark = bg.primary.dark\n\n        local fg = colors.ui.fg\n        local fg_active = fg.active\n\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            NavbuddyName = { fg = fg_active, bg = bg_dark }, -- highlight for name in source buffer\n            NavbuddyScope = match_style, -- highlight for scope of context in source buffer\n            NavbuddyFloatBorder = { fg = palette.cyan }, -- Floatborder highlight\n        }\n\n        local lsp_kind_icons = {\n            Array = palette.red,\n            Boolean = palette.blue,\n            Class = palette.yellow,\n            Constant = palette.dark_yellow,\n            Constructor = palette.blue,\n            Enum = palette.magenta,\n            EnumMember = palette.yellow,\n            Event = palette.yellow,\n            Field = palette.magenta,\n            File = palette.gray,\n            Function = palette.yellow,\n            Interface = palette.cyan,\n            Key = palette.magenta,\n            Method = palette.yellow,\n            Module = palette.dark_yellow,\n            Namespace = palette.dark_blue,\n            Null = palette.gray,\n            Number = palette.light_gray,\n            Object = palette.blue,\n            Operator = palette.magenta,\n            Package = palette.red,\n            Property = palette.blue,\n            String = palette.green,\n            Struct = palette.cyan,\n            TypeParameter = palette.dark_cyan,\n            Variable = palette.magenta,\n        }\n\n        for kind, color in pairs(lsp_kind_icons) do\n            highlights_map[\"Navbuddy\" .. kind] = { fg = color }\n        end\n\n        return highlights_map\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_tree.lua\n---@doc https://github.com/nvim-tree/nvim-tree.lua\n---Tip: Use `:NvimTreeHiTest`to debug highlight groups\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib\").bg\n        local bg_sidebar = bg.dark(config, colors)\n        local bg_main = bg.main(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            NvimTreeNormal = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeNormalNC = { fg = ui.fg.primary.main, bg = bg_sidebar },\n            NvimTreeEndOfBuffer = { fg = bg_sidebar },\n            NvimTreeCursorLine = { bg = bg_main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua\n---@doc https://github.com/nvim-treesitter/nvim-treesitter-context\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_sidebar = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TreesitterContext = { bg = bg_sidebar },\n            TreesitterContextLineNumber = { fg = ui.fg.neutral, bg = bg_sidebar },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua\n---@doc https://github.com/username/plugin-name\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            SnacksPickerCursorLine = { bg = ui.bg.active },\n            SnacksPickerListCursorLine = { link = \"SnacksPickerCursorLine\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua\n---@doc https://github.com/nvim-telescope/telescope.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        local ui = colors.ui\n\n        ---@type BlackAtom.Highlights\n        return {\n            TelescopeNormal = { bg = bg_dark },\n            TelescopeBorder = { fg = bg_dark, bg = bg_dark },\n            TelescopeTitle = { fg = ui.fg.active },\n            TelescopePromptPrefix = { fg = ui.fg.active },\n            TelescopeMatching = { fg = ui.fg.active },\n            TelescopeSelection = { fg = ui.fg.active, bg = ui.bg.primary.main },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua\n---@doc https://github.com/airblade/vim-gitgutter\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local diff = colors.ui.fg.diff\n\n        ---@type BlackAtom.Highlights\n        return {\n            GitGutterAdd = { fg = diff.add },\n            GitGutterChange = { fg = diff.change },\n            GitGutterDelete = { fg = diff.delete },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua\n---@doc https://github.com/folke/which-key.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors)\n        local p = colors.palette\n        local s = colors.syntax\n\n        ---@type BlackAtom.Highlights\n        return {\n            WhichKey = { fg = p.cyan },\n            WhichKeyIcon = { fg = s.markup.link },\n            WhichKeyDesc = { fg = p.blue },\n            WhichKeyGroup = { fg = p.dark_yellow },\n            WhichKeySeperator = { fg = p.green },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua\n---@doc https://github.com/mikavilpas/yazi.nvim\n---@type BlackAtom.HighlightsSpec\nreturn {\n    enabled = true,\n    map = function(colors, config)\n        local bg_dark = require(\"black-atom.lib\").bg.dark(config, colors)\n\n        ---@type BlackAtom.Highlights\n        return {\n            YaziFloat = { bg = bg_dark },\n        }\n    end,\n}\n```\n\n\n```lua nvim/lua/black-atom/highlights/syntax.lua\n---@type BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local s = colors.syntax\n        -- TODO:  Rename to configurable globally\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        -- Treesitter Syntax Highlights (See: `:h treesitter-highlight-groups`)\n        ---@type BlackAtom.Highlights\n        return {\n            -- TODO: Link these to the builtin types (e.g. @operator & Operator)\n            -- TODO: Rename this file to `syntax.lua` and bring in the builtin types as well\n            -- TODO: Sort\n\n            Identifier = ext_hl({ fg = s.variable.default }, config.styles.syntax.variables),\n            StorageClass = { link = \"Identifier\" },\n            [\"@variable\"] = { link = \"Identifier\" },\n            [\"@variable.builtin\"] = { fg = s.variable.builtin },\n            [\"@variable.parameter\"] = { fg = s.variable.parameter, italic = true, bold = true },\n            [\"@variable.member\"] = { fg = s.variable.member, italic = true },\n\n            String = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string\"] = { link = \"String\" },\n            [\"@string.escape\"] = ext_hl({ fg = s.string.escape }, config.styles.syntax.strings),\n            [\"@string.regexp\"] = ext_hl({ fg = s.string.regexp }, config.styles.syntax.strings),\n            [\"@string.special\"] = ext_hl({ fg = s.string.default }, config.styles.syntax.strings),\n            [\"@string.special.url\"] = ext_hl({ fg = s.string.default, underline = true }, config.styles.syntax.strings),\n\n            Boolean = { fg = s.boolean.default },\n            [\"@boolean\"] = { link = \"Boolean\" },\n\n            Number = { fg = s.number.default },\n            Float = { link = \"Number\" },\n            [\"@number\"] = { link = \"Number\" },\n\n            -- We assign the `Keyword` highlight to some of the other regexpt highlight groups,\n            -- which are also keywords more of less.\n            -- To me thats find for now, but I'm open to suggestions.\n            Keyword = ext_hl({ fg = s.keyword.default }, config.styles.syntax.keywords),\n            [\"@keyword\"] = { link = \"Keyword\" },\n            [\"@keyword.import\"] = ext_hl({ fg = s.keyword.import }, config.styles.syntax.keywords),\n            [\"@keyword.export\"] = ext_hl({ fg = s.keyword.export }, config.styles.syntax.keywords),\n            Statement = { link = \"Keyword\" },\n            Conditional = { link = \"Keyword\" },\n            Repeat = { link = \"Keyword\" },\n            Label = { link = \"Keyword\" },\n            Exception = { link = \"Keyword\" },\n            PreProc = { link = \"Keyword\" },\n            Include = { link = \"Keyword\" },\n            Define = { link = \"Keyword\" },\n            Macro = { link = \"Keyword\" },\n            PreCondit = { link = \"Keyword\" },\n\n            Operator = { fg = s.operator.default },\n            [\"@operator\"] = { link = \"Operator\" },\n\n            Type = { fg = s.type.default, bold = true },\n            Structure = { link = \"Type\" },\n            Typedef = { link = \"Type\" },\n            [\"@type\"] = { link = \"Type\" },\n            [\"@type.builtin\"] = { fg = s.type.builtin, bold = true },\n\n            Constant = { fg = s.constant.default },\n            SpecialChar = { fg = s.constant.builtin },\n            [\"@constant\"] = { link = \"Constant\" },\n            [\"@constant.builtin\"] = { link = \"SpecialChar\" },\n\n            Character = { fg = s.constant.default },\n            [\"@character\"] = { link = \"Character\" },\n\n            [\"@module\"] = { fg = s.module.default },\n\n            [\"@attribute\"] = { fg = s.attribute.default },\n            [\"@attribute.builtin\"] = { fg = s.attribute.builtin },\n\n            [\"@property\"] = { fg = s.property.default },\n\n            Function = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@function\"] = { link = \"Function\" },\n            [\"@function.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n            [\"@function.builtin\"] = ext_hl({ fg = s.func.builtin }, config.styles.syntax.functions),\n            [\"@function.method\"] = ext_hl({ fg = s.func.method }, config.styles.syntax.functions),\n\n            [\"@method\"] = ext_hl({ fg = s.func.default }, config.styles.syntax.functions),\n            [\"@method.call\"] = ext_hl({ fg = s.func.default, bold = true }, config.styles.syntax.functions),\n\n            [\"@constructor\"] = { fg = s.constructor.default, bold = true },\n\n            Delimiter = { fg = s.punctuation.delimiter },\n            Special = { fg = s.punctuation.special },\n            [\"@punctuation.bracket\"] = { fg = s.punctuation.bracket },\n            [\"@punctuation.delimiter\"] = { fg = s.punctuation.delimiter },\n\n            Comment = ext_hl({ fg = s.comment.default }, config.styles.syntax.comments),\n            Todo = { fg = s.comment.todo },\n            SpecialComment = ext_hl({ fg = s.comment.doc }, config.styles.syntax.comments),\n            [\"@comment\"] = { link = \"Comment\" },\n            [\"@comment.todo\"] = { link = \"Todo\" },\n            [\"@comment.documentation\"] = { link = \"SpecialComment\" },\n\n            [\"@markup.heading.1\"] = { fg = s.markup.heading.h1, bold = true },\n            [\"@markup.heading.2\"] = { fg = s.markup.heading.h2, bold = true },\n            [\"@markup.heading.3\"] = { fg = s.markup.heading.h3, bold = true },\n            [\"@markup.heading.4\"] = { fg = s.markup.heading.h4, bold = true },\n            [\"@markup.heading.5\"] = { fg = s.markup.heading.h5, bold = true },\n            [\"@markup.heading.6\"] = { fg = s.markup.heading.h6, bold = true },\n            [\"@markup.quote\"] = { fg = s.markup.quote, italic = true },\n            [\"@markup.link\"] = { fg = s.markup.link, underline = true },\n\n            [\"@markup.raw\"] = { fg = s.markup.code.fg, bg = s.markup.code.bg },\n\n            [\"@markup.list\"] = { fg = s.markup.list.default },\n            [\"@markup.list.checked\"] = { fg = s.markup.list.checked },\n            [\"@markup.list.unchecked\"] = { fg = s.markup.list.unchecked },\n\n            Tag = { fg = s.tag.default },\n            [\"@tag\"] = { link = \"Tag\" },\n            [\"@tag.builtin\"] = { fg = s.tag.builtin },\n            [\"@tag.custom\"] = { fg = s.tag.builtin },\n            [\"@tag.attribute\"] = { fg = s.tag.attribute },\n            [\"@tag.delimiter\"] = { fg = s.tag.delimiter },\n\n            -- Treesitter Semantic Tokens\n            [\"@lsp.type.namespace\"] = { link = \"@namespace\" },\n            [\"@lsp.type.type\"] = { link = \"@type\" },\n            [\"@lsp.type.class\"] = { link = \"@type\" },\n            [\"@lsp.type.enum\"] = { link = \"@type\" },\n            [\"@lsp.type.interface\"] = { link = \"@type\" },\n            [\"@lsp.type.struct\"] = { link = \"@structure\" },\n            [\"@lsp.type.parameter\"] = { link = \"@variable.parameter\" },\n            [\"@lsp.type.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable\"] = { link = \"@variable\" },\n            [\"@lsp.typemod.variable.readonly\"] = { link = \"@constant\" },\n            [\"@lsp.type.property\"] = { link = \"@property\" },\n            [\"@lsp.type.enumMember\"] = { link = \"@variable.member\" },\n            [\"@lsp.type.function\"] = { link = \"@function\" },\n            [\"@lsp.type.method\"] = { link = \"@method\" },\n            [\"@lsp.type.macro\"] = { link = \"@macro\" },\n            [\"@lsp.type.decorator\"] = { link = \"@function\" },\n        }\n    end,\n}\n```\n\n```lua nvim/lua/black-atom/highlights/ui.lua\n---@return BlackAtom.HighlightsSpec\nreturn {\n    map = function(colors, config)\n        local bg = require(\"black-atom.lib.bg\")\n        local ext_hl = require(\"black-atom.lib.highlights\").ext_hl\n\n        local ui = colors.ui\n        local palette = colors.palette\n\n        ---@type BlackAtom.Highlights\n        local highlights_map = {\n            -- Basic Text\n            Normal = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            NormalNC = { fg = ui.fg.primary.main, bg = bg.main(config, colors) },\n            EndOfBuffer = ext_hl({ fg = ui.bg.primary.main }, { [config.styles.ending_tildes] = ui.fg.neutral }),\n            NonText = { fg = ui.fg.neutral },\n            Whitespace = { link = \"NonText\" },\n            SpecialKey = { link = \"NonText\" },\n\n            -- Floating Windows\n            NormalFloat = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            FloatBorder = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n            FloatTitle = { fg = ui.fg.active, bg = ui.bg.primary.dark },\n\n            -- Cursor & Matching\n            Cursor = { fg = ui.fg.invert, bg = ui.fg.active },\n            CursorIM = { link = \"Cursor\" },\n            lCursor = { link = \"Cursor\" },\n            TermCursor = { link = \"Cursor\" },\n            TermCursorNC = { link = \"Cursor\" },\n\n            CursorLine = { bg = ui.bg.active },\n            CursorColumn = { bg = ui.bg.active },\n\n            -- Search\n            Search = { bg = ui.bg.match.passive },\n            IncSearch = { bg = ui.bg.match.passive },\n            CurSearch = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            Substitute = { fg = ui.fg.invert, bg = ui.fg.active, bold = true },\n            MatchParen = { bg = ui.bg.match.passive },\n\n            Visual = { bg = ui.bg.match.passive },\n            VisualNOS = { link = \"Visual\" },\n\n            -- Line Numbering\n            LineNr = { fg = ui.fg.neutral },\n            CursorLineNr = { fg = ui.fg.active, bg = ui.bg.active },\n\n            -- Diff\n            DiffAdd = { fg = ui.fg.invert, bg = ui.bg.diff.add },\n            DiffChange = { fg = ui.fg.diff.change },\n            DiffDelete = { fg = ui.fg.diff.delete },\n            DiffText = { fg = ui.fg.diff.text },\n\n            -- Spell Checking\n            SpellBad = { fg = ui.feedback.error, sp = palette.red, undercurl = true },\n            SpellCap = { fg = ui.feedback.warn, sp = palette.yellow, undercurl = true },\n            SpellLocal = { fg = ui.feedback.info, sp = palette.blue, undercurl = true },\n            SpellRare = { fg = ui.feedback.error, sp = palette.magenta, undercurl = true },\n\n            -- Popup Menu\n            Pmenu = { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n            PmenuSel = { bg = ui.bg.primary.light },\n            PmenuSbar = { fg = colors.none, bg = ui.bg.primary.dark },\n            PmenuThumb = { fg = colors.none, bg = ui.bg.active },\n\n            -- Messages & Mode\n            Error = { fg = palette.red },\n            ErrorMsg = ext_hl({ fg = palette.red }, config.styles.syntax.messages),\n            MoreMsg = ext_hl({ fg = palette.blue }, config.styles.syntax.messages),\n            ModeMsg = ext_hl({ fg = ui.fg.primary.main }, config.styles.syntax.messages),\n            WarningMsg = ext_hl({ fg = palette.yellow }, config.styles.syntax.messages),\n\n            -- Window & Tab Management\n            Title = { fg = ui.fg.active },\n            StatusLine = ext_hl(\n                { fg = ui.fg.primary.main, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            StatusLineNC = ext_hl(\n                { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n                { [config.styles.transparency == \"full\"] = { bg = colors.none } }\n            ),\n            TabLine = { fg = ui.fg.neutral, bg = ui.bg.primary.main },\n            TabLineFill = { bg = ui.bg.primary.main },\n            TabLineSel = { fg = ui.fg.primary.main, bg = ui.bg.primary.light },\n\n            WinBar = { link = \"StatusLine\" },\n            WinBarNC = { link = \"StatusLineNC\" },\n            WinSeparator = { fg = bg.dark(config, colors), bg = bg.main(config, colors) },\n\n            -- Folds & Columns\n            Folded = { fg = ui.fg.neutral, bg = ui.bg.primary.dark },\n            FoldColumn = { fg = ui.fg.neutral },\n            SignColumn = { fg = ui.fg.neutral },\n            ColorColumn = { bg = ui.bg.primary.dark },\n\n            -- Others\n            Directory = { fg = ui.fg.primary.main, bold = true },\n            Conceal = { fg = ui.fg.neutral },\n            QuickFixLine = { fg = ui.fg.active, bg = ui.bg.primary.light },\n        }\n\n        return highlights_map\n    end,\n}\n```\n\n\n\nI need your counceling about my system and maybe other suggestions and ability to help me migrate from the old system to the new system.\n\nAlso we do not need to worry about backwards compatibility. This project is still in early development. No one is using it. We can be desctructive.\n\nBefore the migration though I will give you more context\nThank you for providing all the detailed context! Let me help analyze your proposed token system and suggest a migration strategy.\n\nYour proposed V1 token system is indeed simpler and clearer than the current one. I particularly like:\n\n1. The flat structure (or shallow nesting with feedback/git groups)\n2. Clear semantic naming\n3. The requirement that fg tokens need enough contrast with bg tokens\n4. Separation between UI, feedback, and version control concerns\n\nA few suggestions to consider:\n\n1. For the `bg` tokens, you might want to add:\n   ```yml\n   bg:\n     hover: \"string\"      # Hover state for interactive elements\n     disabled: \"string\"   # Disabled state for interactive elements\n```\n\n2. For accessibility, you might want to consider adding opacity variants:\n   ```yml\n   bg:\n     overlay:\n       default: \"string\"  # Regular overlay\n       light: \"string\"    # Light overlay (e.g., 10% opacity)\n       heavy: \"string\"    # Heavy overlay (e.g., 80% opacity)\n```\n\n3. Consider adding interaction states for feedback:\n   ```yml\n   feedback:\n     error:\n       default: \"string\"\n       hover: \"string\"\n     # ... same for other feedback types\n```\n\nFor migration strategy, I suggest:\n\n1. First, create the new token structure in a separate file\n2. Map the old tokens to new ones\n3. Create a migration script to help convert highlight files\n4. Update highlight files one at a time\n5. Remove old token system\n\nWould you like me to:\n1. Help create a detailed mapping between old and new tokens?\n2. Create a migration script?\n3. Help convert some of the highlight files as examples?\n\nLet me know which aspects you'd like to focus on first!\nTo answer your questions:\n\n1. Yes we can do that.\n2. We don't need to do that.\n3. Adds to much complexity.\n\n- Should we keep the nested groups for `feedback` and `git` or should we keep it flat?\n- Some design systems use tokens like `on_feedback` or `on_accent` for text tokens, but I am not sure if I need that. \n  - For me it makes sense, to use `fg.contrast` on all `bg.feedback` tokens. But maybe I am not seeing something. \n  As you can \n  \n",
  "messages": [
    {
      "id": { "replica_id": 0, "value": 0 },
      "start": 0,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 560 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 196 },
      "start": 64274,
      "metadata": {
        "role": "assistant",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 561 }
      }
    },
    {
      "id": { "replica_id": 0, "value": 197 },
      "start": 65919,
      "metadata": {
        "role": "user",
        "status": "Done",
        "timestamp": { "replica_id": 0, "value": 562 }
      }
    }
  ],
  "summary": "UI Color Token System Simplification",
  "slash_command_output_sections": [
    {
      "range": { "start": 0, "end": 1 },
      "icon": "Library",
      "label": "Default",
      "metadata": null
    },
    {
      "range": { "start": 5367, "end": 7160 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_dark.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_dark.lua" }
    },
    {
      "range": { "start": 7161, "end": 9063 },
      "icon": "File",
      "label": "nvim/lua/black-atom/themes/default/ui_light.lua",
      "metadata": { "path": "nvim/lua/black-atom/themes/default/ui_light.lua" }
    },
    {
      "range": { "start": 9064, "end": 21384 },
      "icon": "File",
      "label": "nvim/lua/black-atom/types.lua",
      "metadata": { "path": "nvim/lua/black-atom/types.lua" }
    },
    {
      "range": { "start": 21451, "end": 63928 },
      "icon": "Folder",
      "label": "nvim/lua/black-atom/highlights",
      "metadata": null
    },
    {
      "range": { "start": 21482, "end": 26002 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/lsp.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/lsp.lua" }
    },
    {
      "range": { "start": 26003, "end": 51609 },
      "icon": "Folder",
      "label": "plugins",
      "metadata": null
    },
    {
      "range": { "start": 26011, "end": 29996 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/__plugin_highlight_template.lua"
      }
    },
    {
      "range": { "start": 29997, "end": 30533 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/arrow_nvim.lua"
      }
    },
    {
      "range": { "start": 30534, "end": 32153 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/blink_nvim.lua"
      }
    },
    {
      "range": { "start": 32154, "end": 32702 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/dashboard_nvim.lua"
      }
    },
    {
      "range": { "start": 32703, "end": 34418 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/diffview_nvim.lua"
      }
    },
    {
      "range": { "start": 34419, "end": 35127 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/edgy_nvim.lua"
      }
    },
    {
      "range": { "start": 35128, "end": 35968 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/flash.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/flash.lua" }
    },
    {
      "range": { "start": 35969, "end": 36757 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/fzflua.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/fzflua.lua"
      }
    },
    {
      "range": { "start": 36758, "end": 37494 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/gitsigns_nvim.lua"
      }
    },
    {
      "range": { "start": 37495, "end": 39902 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/glance_nvim.lua"
      }
    },
    {
      "range": { "start": 39903, "end": 40482 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/incline_nvim.lua"
      }
    },
    {
      "range": { "start": 40483, "end": 40924 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/indent_blankline_nvim.lua"
      }
    },
    {
      "range": { "start": 40925, "end": 41355 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/markview_nvim.lua"
      }
    },
    {
      "range": { "start": 41356, "end": 41892 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/plugins/mini.lua" }
    },
    {
      "range": { "start": 41893, "end": 42329 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/mini_nvim.lua"
      }
    },
    {
      "range": { "start": 42330, "end": 43605 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/neotree_nvim.lua"
      }
    },
    {
      "range": { "start": 43606, "end": 45568 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_cmp.lua"
      }
    },
    {
      "range": { "start": 45569, "end": 47578 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_navbuddy.lua"
      }
    },
    {
      "range": { "start": 47579, "end": 48359 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_tree.lua"
      }
    },
    {
      "range": { "start": 48360, "end": 48923 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/nvim_treesitter_context.lua"
      }
    },
    {
      "range": { "start": 48924, "end": 49380 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/snacks_nvim.lua"
      }
    },
    {
      "range": { "start": 49381, "end": 50143 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/telescope_nvim.lua"
      }
    },
    {
      "range": { "start": 50144, "end": 50618 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/vim_gitgutter.lua"
      }
    },
    {
      "range": { "start": 50619, "end": 51204 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/whichkey_nvim.lua"
      }
    },
    {
      "range": { "start": 51205, "end": 51608 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua",
      "metadata": {
        "path": "nvim/lua/black-atom/highlights/plugins/yazi_nvim.lua"
      }
    },
    {
      "range": { "start": 51610, "end": 59144 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/syntax.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/syntax.lua" }
    },
    {
      "range": { "start": 59145, "end": 63927 },
      "icon": "File",
      "label": "nvim/lua/black-atom/highlights/ui.lua",
      "metadata": { "path": "nvim/lua/black-atom/highlights/ui.lua" }
    }
  ]
}
