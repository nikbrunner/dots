#!/usr/bin/env bash
# New dots command for symlink-based dotfiles management

set -e

# Get the dots directory
DOTS_DIR="${DOTS_DIR:-$HOME/repos/nikbrunner/dots}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Change to dots directory for git operations
cd "$DOTS_DIR"

# Function to show usage
show_usage() {
    echo -e "${BLUE}dots - Dotfiles management command${NC}"
    echo ""
    echo "Usage: dots <command> [options]"
    echo ""
    echo "Commands:"
    echo "  install      - Initial setup with symlinks and submodules"
    echo "  link         - Re-run symlink creation"
    echo "  sync         - Git pull + submodule updates"
    echo "  push         - Git add, commit, push"
    echo "  clean        - Remove broken symlinks"
    echo "  sub-update   - Update all submodules"
    echo "  sub-add      - Add new submodule"
    echo "  status       - Show git and symlink status"
    echo "  log          - Show git log"
}

# Install command
cmd_install() {
    echo -e "${YELLOW}→${NC} Running installation..."
    "$DOTS_DIR/install.sh" "$@"
}

# Link command
cmd_link() {
    echo -e "${YELLOW}→${NC} Creating symlinks..."
    "$DOTS_DIR/scripts/link.sh" "$@"
}

# Sync command
cmd_sync() {
    echo -e "${YELLOW}→${NC} Syncing repository..."
    git pull origin main || git pull origin master
    
    if [[ -f .gitmodules ]]; then
        echo -e "${YELLOW}→${NC} Updating submodules..."
        "$DOTS_DIR/scripts/submodules.sh" update
    fi
    
    echo -e "${GREEN}✓${NC} Sync complete"
}

# Push command
cmd_push() {
    local message="${1:-Updates}"
    
    echo -e "${YELLOW}→${NC} Pushing changes..."
    
    # Check if there are changes
    if [[ -z $(git status --porcelain) ]]; then
        echo -e "${GREEN}✓${NC} No changes to commit"
        return 0
    fi
    
    git add -A
    git commit -m "$message"
    git push origin main || git push origin master
    
    echo -e "${GREEN}✓${NC} Changes pushed"
}

# Clean command
cmd_clean() {
    echo -e "${YELLOW}→${NC} Cleaning broken symlinks..."
    
    local count=0
    while IFS= read -r -d '' link; do
        if [[ ! -e "$link" ]]; then
            echo -e "${RED}✗${NC} Removing broken symlink: $link"
            rm "$link"
            ((count++))
        fi
    done < <(find "$HOME" -type l -print0 2>/dev/null)
    
    if [[ $count -eq 0 ]]; then
        echo -e "${GREEN}✓${NC} No broken symlinks found"
    else
        echo -e "${GREEN}✓${NC} Removed $count broken symlinks"
    fi
}

# Submodule update command
cmd_sub_update() {
    "$DOTS_DIR/scripts/submodules.sh" update
}

# Submodule add command
cmd_sub_add() {
    if [[ $# -lt 2 ]]; then
        echo -e "${RED}✗${NC} Usage: dots sub-add <repo_url> <path>"
        return 1
    fi
    "$DOTS_DIR/scripts/submodules.sh" add "$@"
}

# Status command - enhanced with symlink status
cmd_status() {
    echo -e "${BLUE}=== Git Repository Status ===${NC}"
    git status --short
    
    echo ""
    echo -e "${BLUE}=== Symlink Status ===${NC}"
    
    local total_links=0
    local valid_links=0
    local broken_links=0
    local missing_links=0
    
    # Function to check a symlink
    check_symlink() {
        local link_path="$1"
        local expected_target="$2"
        ((total_links++))
        
        if [[ -L "$link_path" ]]; then
            # It's a symlink, check if it's valid
            local actual_target=$(readlink "$link_path")
            if [[ "$actual_target" == "$expected_target" ]]; then
                ((valid_links++))
            else
                echo -e "${YELLOW}⚠${NC}  Wrong target: $link_path → $actual_target"
                echo -e "    Expected: $expected_target"
            fi
            
            # Check if target exists
            if [[ ! -e "$link_path" ]]; then
                ((broken_links++))
                echo -e "${RED}✗${NC} Broken link: $link_path"
            fi
        elif [[ -e "$link_path" ]]; then
            # File/directory exists but is not a symlink
            echo -e "${RED}✗${NC} Not a symlink: $link_path"
            echo -e "    Run 'dots link --force' to fix"
        else
            # Neither symlink nor file exists
            ((missing_links++))
            echo -e "${YELLOW}→${NC} Missing link: $link_path"
        fi
    }
    
    # Check all expected symlinks
    check_symlink "$HOME/.zshrc" "$DOTS_DIR/config/zsh/.zshrc"
    check_symlink "$HOME/.gitconfig" "$DOTS_DIR/config/git/.gitconfig"
    check_symlink "$HOME/.gitignore" "$DOTS_DIR/config/git/.gitignore"
    check_symlink "$HOME/.vimrc" "$DOTS_DIR/config/vim/.vimrc"
    check_symlink "$HOME/.ideavimrc" "$DOTS_DIR/config/vim/.ideavimrc"
    check_symlink "$HOME/.hushlogin" "$DOTS_DIR/config/shell/.hushlogin"
    check_symlink "$HOME/.config/yazi" "$DOTS_DIR/config/yazi"
    check_symlink "$HOME/.config/lazygit" "$DOTS_DIR/config/lazygit"
    check_symlink "$HOME/.config/bat" "$DOTS_DIR/config/bat"
    check_symlink "$HOME/.config/tmux" "$DOTS_DIR/config/tmux"
    check_symlink "$HOME/.config/gallery-dl" "$DOTS_DIR/config/gallery-dl"
    check_symlink "$HOME/.config/oh-my-posh" "$DOTS_DIR/config/oh-my-posh"
    check_symlink "$HOME/.config/karabiner" "$DOTS_DIR/config/karabiner"
    check_symlink "$HOME/.config/kitty" "$DOTS_DIR/config/kitty"
    check_symlink "$HOME/.config/ghostty" "$DOTS_DIR/config/ghostty"
    check_symlink "$HOME/.scripts" "$DOTS_DIR/scripts-custom"
    
    # Add macOS-specific links if on macOS
    if [[ "$OSTYPE" == darwin* ]]; then
        check_symlink "$HOME/Library/Application Support/Claude/claude_desktop_config.json" \
                      "$DOTS_DIR/os-specific/macos/Library/Application Support/Claude/claude_desktop_config.json"
    fi
    
    # Summary
    echo ""
    echo -e "${BLUE}Summary:${NC}"
    echo -e "  Total expected links: $total_links"
    echo -e "  ${GREEN}✓${NC} Valid links: $valid_links"
    if [[ $broken_links -gt 0 ]]; then
        echo -e "  ${RED}✗${NC} Broken links: $broken_links"
    fi
    if [[ $missing_links -gt 0 ]]; then
        echo -e "  ${YELLOW}→${NC} Missing links: $missing_links"
    fi
    
    # Check for unlinked files in config directories
    echo ""
    echo -e "${BLUE}=== Checking for Unlinked Config Files ===${NC}"
    
    local unlinked_found=false
    
    # List of directories that are symlinked as whole directories
    local linked_dirs="yazi lazygit bat tmux gallery-dl oh-my-posh karabiner kitty ghostty"
    
    # Check config directory for files that might need linking
    for config_dir in "$DOTS_DIR/config"/*; do
        if [[ -d "$config_dir" ]]; then
            local dirname=$(basename "$config_dir")
            
            # Skip directories that are already linked
            if echo "$linked_dirs" | grep -q "\b$dirname\b"; then
                continue
            fi
            
            # Skip special directories that have individual file links
            if [[ "$dirname" == "zsh" ]] || [[ "$dirname" == "git" ]] || 
               [[ "$dirname" == "vim" ]] || [[ "$dirname" == "shell" ]]; then
                continue
            fi
            
            echo -e "${YELLOW}?${NC} Unlinked config: $config_dir"
            unlinked_found=true
        fi
    done
    
    if [[ "$unlinked_found" == false ]]; then
        echo -e "${GREEN}✓${NC} All config files are properly linked"
    fi
}

# Log command
cmd_log() {
    echo -e "${YELLOW}→${NC} Recent commits:"
    git log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate -10
}

# Main command dispatcher
case "${1:-}" in
    install)
        shift
        cmd_install "$@"
        ;;
    link)
        shift
        cmd_link "$@"
        ;;
    sync)
        cmd_sync
        ;;
    push)
        shift
        cmd_push "$@"
        ;;
    clean)
        cmd_clean
        ;;
    sub-update)
        cmd_sub_update
        ;;
    sub-add)
        shift
        cmd_sub_add "$@"
        ;;
    status)
        cmd_status
        ;;
    log)
        cmd_log
        ;;
    *)
        show_usage
        ;;
esac